<div @key="@CascadingDefaults" class="mdc-layout-grid__cell--span-12">
    <MTCard>
        <Primary>
            <div class="bmdc-card__primary">
                <h2 class="bmdc-card__title mdc-typography--headline4">@Title</h2>
            </div>
            <div class="bmdc-card__secondary">
                @Description

                @if (HasComponents)
                {
                    <p style="overflow: auto;">
                        <MTDataTable Items="@Items"
                                        Context="item"
                                        class="dr-table">
                            <TableHeader>
                                <th class="mdc-data-table__header-cell" role="columnheader" scope="col">Reference</th>
                                <th class="mdc-data-table__header-cell" role="columnheader" scope="col">Link Source</th>
                            </TableHeader>

                            <TableRow>
                                <td class="mdc-data-table__cell">@item.Title</td>
                                <td class="mdc-data-table__cell">@item.ConentMarkup</td>
                            </TableRow>
                        </MTDataTable>
                    </p>
                }

                @if (RequiresDisableSelection)
                {
                    <p>
                        <MTSwitch @bind-Value="@CascadingDefaults.Disabled" Label="Disable Components" />
                    </p>
                }

                @if (MinDensity != MTDensity.Default)
                {
                    <p>
                        <MTRadioButtonGroup @bind-Value="@CascadingDefaults.ThemeDensity"
                                            Items="@Densities" />
                    </p>
                }

                @Controls
            </div>
        </Primary>
    </MTCard>
</div>



@*  Using a key of the defaults' version number forces a complete re-render 
    of the block when defaults change, however components don't check for 
    updates to defaults because we use IsFixed="true" *@

<div @key="@CascadingDefaults.Version"
        class="mdc-layout-grid__cell--span-12">

    <div class="mdc-layout-grid__inner">
        <CascadingValue Value="@CascadingDefaults" IsFixed="true">
            @PageContent
        </CascadingValue>
    </div>
</div>


@code {
    [CascadingParameter(Name = "MaterialDocRef")] private string MaterialDocRef { get; set; }

    [Parameter] public string Title { get; set; }

    [Parameter] public RenderFragment Description { get; set; }

    [Parameter] public RenderFragment Controls { get; set; }

    [Parameter] public RenderFragment PageContent { get; set; }

    [Parameter] public string[] ComponentNames { get; set; }

    [Parameter] public ComponentBase DemoComponent { get; set; }

    [Parameter] public string[] MaterialIOPages { get; set; }

#nullable enable annotations
    [Parameter] public bool[]? IsGeneric { get; set; } = null;
#nullable restore annotations

    [Parameter] public MTDensity MinDensity { get; set; } = MTDensity.Default;

    [Parameter] public bool RequiresDisableSelection { get; set; } = false;


    private MTCascadingDefaults CascadingDefaults { get; set; } = new MTCascadingDefaults()
    {
        ThemeDensity = MTDensity.Default,
        Disabled = false
    };


    private class ReferenceItem
    {
        public string Title { get; set; }
        public string Content { get; set; }

        public MarkupString ConentMarkup => new MarkupString(Content);
    }


    private List<ReferenceItem> Items { get; set; }

    private IEnumerable<MTListElement<MTDensity>> Densities { get; set; }

    private bool HasComponents => ComponentNames != null && ComponentNames.Count() > 0;


    protected override void OnInitialized()
    {
        Items = new List<ReferenceItem>();

        if (!HasComponents)
        {
            return;
        }

        var articleText = "";
        var apiDocText = "";
        var prefix = "";

        for (int i = 0; i < ComponentNames.Length; i++)
        {
            var apiSuffix = (IsGeneric == null || !IsGeneric[i]) ? "" : "-1";
            articleText += prefix + $"<a href=\"https://docs.blazormdc.com/BlazorMdc/Components/{ComponentNames[i]}/MT{ComponentNames[i]}.razor.html\" target=\"_blank\">MT{ComponentNames[i]} article</a>";
            apiDocText += prefix + $"<a href=\"https://docs.blazormdc.com/api/BlazorMdc.MT{ComponentNames[i]}{apiSuffix}.html\" target=\"_blank\">MT{ComponentNames[i]} API docs</a>";
            prefix = ", ";
        }

        Items.Add(new ReferenceItem {
            Title = "Documentation Article",
            Content = articleText
        });

        Items.Add(new ReferenceItem {
            Title = "API Documentation",
            Content = apiDocText
        });

        Items.Add(new ReferenceItem {
            Title = "Source for This Page",
            Content = $"<a href=\"https://github.com/BlazorMdc/BlazorMdcWebsite/blob/main/BlazorMdcWebsite.Components/Pages/{DemoComponent.GetType().Name}.razor\" target=\"_blank\">GitHub source page link</a>"
        });

        if (MaterialIOPages != null && MaterialIOPages.Where(page => !string.IsNullOrWhiteSpace(page)).Count() > 0)
        {
            //var title = "Material Theme Pages";
            var materialPages = "";
            prefix = "";

            foreach (var page in MaterialIOPages.Where(page => !string.IsNullOrWhiteSpace(page)))
            {
                materialPages += prefix + $"<a href=\"{MaterialDocRef + page}\" target=\"_blank\">{page.Split("#")[0]}</a>";
                prefix = ", ";
            }

            Items.Add(new ReferenceItem
            {
                Title = "Material Theme Pages",
                Content = materialPages
            }); ; ;
        }

        Densities = new MTListElement<MTDensity>[]
        {
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Default, Label = "Default", Disabled = false },
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Minus1, Label = "Minus 1", Disabled = MinDensity > MTDensity.Minus1 },
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Minus2, Label = "Minus 2", Disabled = MinDensity > MTDensity.Minus2 },
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Minus3, Label = "Minus 3", Disabled = MinDensity > MTDensity.Minus3 },
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Minus4, Label = "Minus 4", Disabled = MinDensity > MTDensity.Minus4 },
            new MTListElement<MTDensity> {SelectedValue = MTDensity.Minus5, Label = "Minus 5", Disabled = MinDensity > MTDensity.Minus5 },
        }.Where(d => d.Disabled != true);
    }
}
