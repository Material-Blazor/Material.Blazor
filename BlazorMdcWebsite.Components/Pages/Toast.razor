@page "/toast"

@implements IDisposable

@inject IMTToastService ToastService


<style>
    .italic-class {
        font-style: italic;
    }
</style>

@if (OverrideCssDefaults)
{
    <style>
        :root {
            --bmdc-toast-color-info: var(--bmdc-color-on-light-blue-200) !important;
            --bmdc-toast-color-success: var(--bmdc-color-on-green-200) !important;
            --bmdc-toast-color-warning: var(--bmdc-color-on-amber-200) !important;
            --bmdc-toast-color-error: var(--bmdc-color-on-red-200) !important;
            --bmdc-toast-filter-info: var(--bmdc-color-on-light-blue-200) !important;
            --bmdc-toast-filter-success: var(--bmdc-color-on-green-200) !important;
            --bmdc-toast-filter-warning: var(--bmdc-color-on-amber-200) !important;
            --bmdc-toast-filter-error: var(--bmdc-color-on-red-200) !important;
            --bmdc-toast-background-color-info: var(--bmdc-color-light-blue-200) !important;
            --bmdc-toast-background-color-success: var(--bmdc-color-green-200) !important;
            --bmdc-toast-background-color-warning: var(--bmdc-color-amber-200) !important;
            --bmdc-toast-background-color-error: var(--bmdc-color-red-200) !important;
            --bmdc-toast-border-radius: 4px 16px !important;
        }
    </style>
}


<DemonstrationPageLayout ComponentNames=@(new string[] { "Toast" })
                         Title="Toast Demonstration"
                         DemoComponent="@this">
    <Description>
        <p>
            Demonstrates toast variations.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-12">
            <MTCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                                Basic Toasts
                            </h2>

                            <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows the four varieties of toast with CSS markup and managed timeout.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MTSelect @bind-Value="@ToastService.Configuration.Position" SelectInputStyle="@MTSelectInputStyle.Outlined" Label="Toast Position" Items="@positionItems" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MTCheckbox @bind-Value="@OverrideCssDefaults" Label="Override Default CSS" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MTNumericIntField @bind-Value="@ToastService.Configuration.MaxToastsShowing" TextInputStyle="@MTTextInputStyle.Outlined" Label="Max Toasts (0-10)" Min="0" Max="10" NumericFormat="N0" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-12">
                            <p>
                                <MTButton style="background-color: var(--bmdc-toast-background-color-info); color: var(--bmdc-toast-color-info); margin-bottom: 1rem;"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MTToastLevel.Info,
                                                              heading: "I'm an Info",
                                                              message: "Nothing doing here."))"
                                          Label="Info Toast"
                                          ButtonStyle="@MTButtonStyle.ContainedRaised" />

                                <MTButton style="background-color: var(--bmdc-toast-background-color-success); color: var(--bmdc-toast-color-success); margin-bottom: 1rem;"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MTToastLevel.Success,
                                                              heading: "I'm a SUCCESS",
                                                              message: "Congratulations!" ))"
                                          Label="Success Toast"
                                          ButtonStyle="@MTButtonStyle.ContainedRaised" />

                                <MTButton style="background-color: var(--bmdc-toast-background-color-warning); color: var(--bmdc-toast-color-warning); margin-bottom: 1rem;"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MTToastLevel.Warning,
                                                              heading: "I'm a WARNING",
                                                              message: "You have been warned."))"
                                          Label="Warning Toast"
                                          ButtonStyle="@MTButtonStyle.ContainedRaised" />

                                <MTButton style="background-color: var(--bmdc-toast-background-color-error); color: var(--bmdc-toast-color-error); margin-bottom: 1rem;"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MTToastLevel.Error,
                                                              heading: "I'm an ERROR",
                                                              message: "Go fix it."))"
                                          Label="Error Toast"
                                          ButtonStyle="@MTButtonStyle.ContainedRaised" />
                            </p>
                        </div>
                    </div>
                </Primary>
            </MTCard>
        </div>


        <div class="mdc-layout-grid__cell--span-12">
            <MTCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                                Tailored Toasts
                            </h2>

                            <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows how toasts can be tailored through the ShowToast method call.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                   
                            <MTSelect Label="Additional css class" @bind-Value="@CssClass" Items="CssClassItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Close method" @bind-Value="@CloseMethod" Items="closeMethodItems" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Heading" @bind-Value="@Heading" Items="headingItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Icon" @bind-Value="@Icon" Items="iconItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Level" @bind-Value="@Level" Items="levelItems" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Message" @bind-Value="@Message" Items="messageItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Show icon" @bind-Value="@ShowIcon" Items="showIconItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">                            
                            <MTSelect Label="Timeout" @bind-Value="@Timeout" Items="timeoutItems" ItemValidation="@MTItemValidation.DefaultToFirst" SelectInputStyle="@MTSelectInputStyle.Outlined" />
                        </div>

                        <div class="mdc-layout-grid__cell--span-12">
                            <MTButton @onclick="@CustomiseClick"
                                      Label="Toast with selected options"
                                      ButtonStyle="@MTButtonStyle.ContainedRaised" />
                        </div>
                    </div>
                </Primary>
            </MTCard>
        </div>
    </PageContent>
</DemonstrationPageLayout>



@code {
    private bool OverrideCssDefaults { get; set; }

    private readonly IEnumerable<MTListElement<MTToastPosition>> positionItems = from pos in (MTToastPosition[])Enum.GetValues(typeof(MTToastPosition))
                                                                                 select new MTListElement<MTToastPosition>
                                                                                 {
                                                                                     SelectedValue = pos,
                                                                                     Label = pos.ToString()
                                                                                 };


    private string CssClass { get; set; }
    private readonly MTListElement<string>[] CssClassItems = new MTListElement<string>[]
    {
        new MTListElement<string> { SelectedValue = "", Label = "Default" },
        new MTListElement<string> { SelectedValue = "italic-class", Label = "Italic" },
    };


    private MTToastCloseMethod CloseMethod { get; set; }
    private readonly IEnumerable<MTListElement<MTToastCloseMethod>> closeMethodItems = from c in (MTToastCloseMethod[])Enum.GetValues(typeof(MTToastCloseMethod))
                                                                                       select new MTListElement<MTToastCloseMethod>
                                                                                       {
                                                                                           SelectedValue = c,
                                                                                           Label = c.ToString()
                                                                                       };

    private string Heading { get; set; }
    private readonly MTListElement<string>[] headingItems = new MTListElement<string>[]
    {
        new MTListElement<string> { SelectedValue = "", Label = "Default" },
        new MTListElement<string> { SelectedValue = "Run of the mill heading", Label = "Run of the mill heading" },
        new MTListElement<string> { SelectedValue = "Heading truncated and truncated and truncated and truncated", Label = "Heading that will be truncated" }
    };


#nullable enable annotations
    class MyIcon
    {
        public string Name;
        public IMTIconFoundry? Foundry;
    }
#nullable restore annotations

    private MyIcon Icon { get; set; }
    private readonly MTListElement<MyIcon>[] iconItems = new MTListElement<MyIcon>[]
    {
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "directions_run" }, Label = "directions_run" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = MTIconHelper.MIFoundry(theme: MTIconMITheme.Filled) }, Label = "thumb_up (filled / default)" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = MTIconHelper.MIFoundry(theme: MTIconMITheme.Outlined) }, Label = "thumb_up (outlined)" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = MTIconHelper.MIFoundry(theme: MTIconMITheme.Round) }, Label = "thumb_up (rounded)" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = MTIconHelper.MIFoundry(theme: MTIconMITheme.TwoTone) }, Label = "thumb_up (two-tone)" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = MTIconHelper.MIFoundry(theme: MTIconMITheme.Sharp) }, Label = "thumb_up (sharp)" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance", Foundry = MTIconHelper.FAFoundry() }, Label = "fa-ambulance" },
        new MTListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance", Foundry = MTIconHelper.FAFoundry(relativeSize: MTIconFARelativeSize.ExtraSmall) }, Label = "fa-ambulance (x-small)" },
    };


    private MTToastLevel Level { get; set; }
    private readonly IEnumerable<MTListElement<MTToastLevel>> levelItems = from c in (MTToastLevel[])Enum.GetValues(typeof(MTToastLevel))
                                                                           select new MTListElement<MTToastLevel>
                                                                           {
                                                                               SelectedValue = c,
                                                                               Label = c.ToString()
                                                                           };


    private string Message { get; set; }
    private readonly MTListElement<string>[] messageItems = new MTListElement<string>[]
    {
        new MTListElement<string> { SelectedValue = "Run of the mill message", Label = "Run of the mill message" },
        new MTListElement<string> { SelectedValue = "Text <strong>bold</strong> and <u>underlined</u>", Label = "Message with markup" },
        new MTListElement<string> { SelectedValue = "Message truncated and truncated and truncated and truncated", Label = "Message that will be truncated" }
    };


    private string ShowIcon { get; set; }
    private readonly MTListElement<string>[] showIconItems = new MTListElement<string>[]
    {
        new MTListElement<string> { SelectedValue = "", Label = "Default" },
        new MTListElement<string> { SelectedValue = "true", Label = "true" },
        new MTListElement<string> { SelectedValue = "false", Label = "false" }
    };


    private string Timeout { get; set; }
    private readonly MTListElement<string>[] timeoutItems = new MTListElement<string>[]
    {
        new MTListElement<string> { SelectedValue = "", Label = "Default" },
        new MTListElement<string> { SelectedValue = "1000", Label = "1 second" },
        new MTListElement<string> { SelectedValue = "10000", Label = "10 seconds" },
        new MTListElement<string> { SelectedValue = "60000", Label = "60 seconds" }
    };


    private void CustomiseClick()
    {
        string appliedCssClass = (CssClass.Length == 0) ? null : CssClass;

        string appliedHeading = (Heading.Length == 0) ? null : Heading;

        bool? appliedShowIcon = (ShowIcon.Length == 0) ? appliedShowIcon = null : appliedShowIcon = Convert.ToBoolean(ShowIcon);

        uint? appliedTimeout = (Timeout.Length == 0) ? appliedTimeout = null : appliedTimeout = Convert.ToUInt32(Timeout);

        ToastService.ShowToast(
            cssClass: appliedCssClass,
            closeMethod: CloseMethod,
            heading: appliedHeading,
            level: Level,
            message: Message,
            iconName: Icon.Name,
            iconFoundry: Icon.Foundry,
            showIcon: appliedShowIcon,
            timeout: appliedTimeout);
    }


    private bool disposedValue;


    /// <inheritdoc/>
    /// <param name="disposing"></param>
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                ToastService.Configuration = Utilities.GetDefaultToastServiceConfiguration();
            }

            // TODO: free unmanaged resources (unmanaged objects) and override finalizer
            // TODO: set large fields to null
            disposedValue = true;
        }
    }


    /// <inheritdoc/>
    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}