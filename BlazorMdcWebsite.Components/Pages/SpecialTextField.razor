@page "/specialtextfield"

@inject IMTToastService ToastService

@using System.Runtime.InteropServices


<DemonstrationPageLayout ComponentNames=@(new string[] { "Autocomplete", "DebouncedTextField", "NumericDoubleField", "NumericIntField" })
                         Title="Special Text Field Demonstration"
                         DemoComponent="@this"
                         MinDensity="MTDensity.Minus4"
                         RequiresDisableSelection="true">
    <Description>
        <p>
            Shows debounced text fields, autcompletes and numeric text fields, each of which are Plus components. Each of these can display as Filled or Outlined and with
            the full variety of icon foundries. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MTCard AutoStyled="true">
                <Primary>
                    <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                        Autocompletes
                    </h2>

                    <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Three varieties - one disallowing blank selection, one allowing, and the last ignoring whitespace in searches.
                    </h3>

                    @if (IsWebAssembly)
                    {
                        <p>
                            Autocompletes are disabled on this site because it is running on WebAssembly. This is because of a <a href="https://github.com/mono/linker/issues/1408" target="_blank">bug in the Mono linker</a> affecting MTAutocomplete and its use of Regex.
                            You can test Autocompletes by <a href="https://github.com/simonziegler/BlazorMdcWebsite/" target="_blank">forking this repo</a> and running the Blazor Server project where this message is replaced with working Autocompletes.
                        </p>
                    }
                    else
                    {
                        <p><MTAutocomplete @bind-Value="@Autocomplete1" Label="Blanks disallowed" TextInputStyle="MTTextInputStyle.Filled" SelectItems="@Fruits" LeadingIcon="alarm" AllowBlankResult="false" /></p>
                        <p><MTAutocomplete @bind-Value="@Autocomplete2" Label="Blanks allowed" TextInputStyle="MTTextInputStyle.Outlined" SelectItems="@Fruits" AllowBlankResult="true" TrailingIcon="fa-dragon" IconFoundry="MTIconHelper.FAFoundry(relativeSize: MTIconFARelativeSize.Large)" /></p>
                        <p><MTAutocomplete @bind-Value="@Autocomplete3" Label="Whitespace ignored" TextInputStyle="MTTextInputStyle.Filled" SelectItems="@Fruits" AllowBlankResult="true" IgnoreWhitespace="true" /></p>
                    }
                </Primary>
            </MTCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MTCard AutoStyled="true">
                <Primary>
                    <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                        Debounced text field
                    </h2>

                    <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Set the debounce period you want.
                    </h3>

                    <p><MTRadioButtonGroup @bind-Value="@DebouncePeriod" Items="DebouncePeriods" ItemValidation="@MTItemValidation.DefaultToFirst" /></p>

                    <p>
                        <MTDebouncedTextField Label="Debounced Text"
                                              @bind-Value="@Debounced"
                                              TextInputStyle="MTTextInputStyle.Outlined"
                                              LeadingIcon="account_balance_wallet"
                                              DebounceInterval="DebouncePeriod" />
                    </p>

                    <p>Debounced text: <em>'@Debounced'</em></p>
                </Primary>
            </MTCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MTCard AutoStyled="true">
                <Primary>
                    <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Numerics
                    </h2>

                    <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric integer fields using formats for non focussed input.
                    </h3>

                    <p>
                        <MTNumericDoubleField Label="Double 2dp"
                                              @bind-Value="@Double"
                                              NumericFormat="N2" DecimalPlaces="2"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MTNumericDoubleField Label="Money by format"
                                              @bind-Value="@MoneyByFormat"
                                              NumericFormat="C2"
                                              DecimalPlaces="2"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MTNumericDoubleField Label="Money by prefix"
                                              Prefix="£"
                                              @bind-Value="@MoneyByPrefix"
                                              NumericFormat="N2"
                                              DecimalPlaces="2"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MTNumericIntField Label="Integer"
                                           @bind-Value="@Integer"
                                           NumericFormat="N0"
                                           TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>
                </Primary>
            </MTCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MTCard AutoStyled="true">
                <Primary>
                    <h2 class="bmdc-card__title mdc-typography mdc-typography--headline6">
                        Scaled Formatted Numerics
                    </h2>

                    <h3 class="bmdc-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Percentage and basis point numerics can be editted either using a prefix or standard formatting (in the case of percentages only).
                        A figure of "12.3%" results in a double value of "0.123" and one of "34.5 bp" results in a double value of "0.00345".
                    </h3>

                    <p>
                        <MTNumericDoubleField Label="Percent by format"
                                              @bind-Value="@PercentByFormat"
                                              NumericFormat="P2"
                                              DecimalPlaces="2"
                                              FocussedMagnitude="MTNumericInputMagnitude.Percent"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MTNumericDoubleField Label="Percent by Suffix"
                                              @bind-Value="@PercentBySuffix"
                                              NumericFormat="N2"
                                              DecimalPlaces="2"
                                              Suffix="%"
                                              FocussedMagnitude="MTNumericInputMagnitude.Percent"
                                              UnfocussedMagnitude="MTNumericInputMagnitude.Percent"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MTNumericDoubleField Label="Basis Points by Suffix"
                                              @bind-Value="@BasisPointsBySuffix"
                                              NumericFormat="N0"
                                              DecimalPlaces="0"
                                              Suffix="bp"
                                              FocussedMagnitude="MTNumericInputMagnitude.BasisPoints"
                                              UnfocussedMagnitude="MTNumericInputMagnitude.BasisPoints"
                                              TextInputStyle="MTTextInputStyle.Outlined" />
                    </p>
                </Primary>
            </MTCard>
        </div>
    </PageContent>
</DemonstrationPageLayout>


@code {
    string[] Fruits = { "Avocado", "Banana", "Blackberry", "Blueberry", "Cantaloupe", "Cherry", "Clementine", "Dragonfruit", "Fig", "Grape", "Guava", "Honeydew", "Huckleberry", "Jujube", "Kiwi", "Kumquat", "Lime", "Nectarine", "Orange", "Papaya", "Passion Fruit", "Pineapple", "Plum", "Pomegranate", "Raspberry", "Satsuma", "Strawberry", "Tangerine", "Tomato", "Watermelon" };

    private MTListElement<int>[] DebouncePeriods = new MTListElement<int>[]
    {
        new MTListElement<int> { SelectedValue = 300, Label = "300 ms" },
        new MTListElement<int> { SelectedValue = 500, Label = "500 ms" },
        new MTListElement<int> { SelectedValue = 1000, Label = "1,000 ms" }
        };



    private string _autocomplete1;
    private string Autocomplete1
    {
        get => _autocomplete1;
        set
        {
            _autocomplete1 = value;

            ToastService.ShowToast(heading: "Autocomplete blanks disallowed", message: $"Value: '{_autocomplete1}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private string _autocomplete2;
    private string Autocomplete2
    {
        get => _autocomplete2;
        set
        {
            _autocomplete2 = value;

            ToastService.ShowToast(heading: "Autocomplete blanks allowed", message: $"Value: '{_autocomplete2}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private string _autocomplete3;
    private string Autocomplete3
    {
        get => _autocomplete3;
        set
        {
            _autocomplete3 = value;

            ToastService.ShowToast(heading: "Autocomplete whitespace ignored", message: $"Value: '{_autocomplete3}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private string _debounced = "Initial Value";
    private string Debounced
    {
        get => _debounced;
        set
        {
            _debounced = value;

            ToastService.ShowToast(heading: "Debounced text field", message: $"Value: '{_debounced}'", level: MTToastLevel.Success, showIcon: false);
        }
    }

    private int DebouncePeriod { get; set; } = 300;



    private double _double;
    private double Double
    {
        get => _double;
        set
        {
            _double = value;

            ToastService.ShowToast(heading: "Double numeric", message: $"Value: '{_double.ToString("N2")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private double _moneyByFormat;
    private double MoneyByFormat
    {
        get => _moneyByFormat;
        set
        {
            _moneyByFormat = value;

            ToastService.ShowToast(heading: "Money by format numeric", message: $"Value: '{_moneyByFormat.ToString("C2")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private double _moneyByPrefix;
    private double MoneyByPrefix
    {
        get => _moneyByPrefix;
        set
        {
            _moneyByPrefix = value;

            ToastService.ShowToast(heading: "Money by Prefix numeric", message: $"Value: '{_moneyByPrefix.ToString("N2")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }



    private int _integer;
    private int Integer
    {
        get => _integer;
        set
        {
            _integer = value;

            ToastService.ShowToast(heading: "Integer numeric", message: $"Value: '{_integer.ToString("N0")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }


    private double _percentByFormat;
    private double PercentByFormat
    {
        get => _percentByFormat;
        set
        {
            _percentByFormat = value;

            ToastService.ShowToast(heading: "Percent by format", message: $"Value: '{_percentByFormat.ToString("N4")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }


    private double _percentBySuffix;
    private double PercentBySuffix
    {
        get => _percentBySuffix;
        set
        {
            _percentBySuffix = value;

            ToastService.ShowToast(heading: "Percent by suffix", message: $"Value: '{_percentBySuffix.ToString("N4")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }


    private double _basisPointsBySuffix;
    private double BasisPointsBySuffix
    {
        get => _basisPointsBySuffix;
        set
        {
            _basisPointsBySuffix = value;

            ToastService.ShowToast(heading: "Basis Points by suffix", message: $"Value: '{_basisPointsBySuffix.ToString("N4")}'", level: MTToastLevel.Success, showIcon: false);
        }
    }


    private bool IsWebAssembly => RuntimeInformation.OSArchitecture == Architecture.Wasm;
}