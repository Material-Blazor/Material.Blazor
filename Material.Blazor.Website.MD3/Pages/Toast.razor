@page "/toast"

@implements IDisposable

@inject IMBToastService ToastService

@using Material.Blazor

<style>
    .italic-class {
        font-style: italic;
    }
</style>

@if (OverrideCssDefaults)
{
    <style>
        :root {
            --mb-toast-color-info: var(--mb-color-on-light-blue-200) !important;
            --mb-toast-color-success: var(--mb-color-on-green-200) !important;
            --mb-toast-color-warning: var(--mb-color-on-amber-200) !important;
            --mb-toast-color-error: var(--mb-color-on-red-200) !important;
            --mb-toast-filter-info: var(--mb-color-on-light-blue-200) !important;
            --mb-toast-filter-success: var(--mb-color-on-green-200) !important;
            --mb-toast-filter-warning: var(--mb-color-on-amber-200) !important;
            --mb-toast-filter-error: var(--mb-color-on-red-200) !important;
            --mb-toast-background-color-info: var(--mb-color-light-blue-200) !important;
            --mb-toast-background-color-success: var(--mb-color-green-200) !important;
            --mb-toast-background-color-warning: var(--mb-color-amber-200) !important;
            --mb-toast-background-color-error: var(--mb-color-red-200) !important;
            --mb-toast-border-radius: 4px 16px !important;
        }
    </style>
}


<DemonstrationPage ComponentAndPageName="Toast"
                   DetailedArticle="Toast"
                   SuppressComponentDocumentation=true
                   Title="Toast Demonstration">
    <Description>
        <h2>Non-component</h2>
        <p>
            Demonstrates toast variations.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-12">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                                Basic Toasts
                            </h2>

                            <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows the four varieties of toast with CSS markup and managed timeout.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@ToastService.Configuration.Position"
                                                          Items="@positionItems"
                                                          LeadingLabel="Toast Position"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBCheckbox @bind-Value="@OverrideCssDefaults"
                                        TrailingLabelPLUS="Override Default CSS" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBIntField @bind-Value="@ToastService.Configuration.MaxToastsShowing"
                                        LeadingLabel="Max Toasts (0-10)"
                                        Max="10"
                                        Min="0"
                                        NumericFormat="N0" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-12">
                            <p>
                                <Material.Blazor.MD2.MBButton ButtonStyle="@MBButtonStyleMD2.ContainedRaised"
                                                              LeadingLabel="Info Toast"
                                                              @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Info,
                                                              heading: "I'm an Info",
                                                              message: "Nothing doing here."))"
                                                              style="background-color: var(--mb-toast-background-color-info); color: var(--mb-toast-color-info); margin-bottom: 1rem;" />

                                <Material.Blazor.MD2.MBButton ButtonStyle="@MBButtonStyleMD2.ContainedRaised"
                                                              LeadingLabel="Success Toast"
                                                              @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Success,
                                                              heading: "I'm a SUCCESS",
                                                              message: "Congratulations!" ))"
                                                              style="background-color: var(--mb-toast-background-color-success); color: var(--mb-toast-color-success); margin-bottom: 1rem;" />

                                <Material.Blazor.MD2.MBButton ButtonStyle="@MBButtonStyleMD2.ContainedRaised"
                                                              LeadingLabel="Warning Toast"
                                                              @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Warning,
                                                              heading: "I'm a WARNING",
                                                              message: "You have been warned."))"
                                                              style="background-color: var(--mb-toast-background-color-warning); color: var(--mb-toast-color-warning); margin-bottom: 1rem;" />

                                <Material.Blazor.MD2.MBButton ButtonStyle="@MBButtonStyleMD2.ContainedRaised"
                                                              LeadingLabel="Error Toast"
                                                              @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Error,
                                                              heading: "I'm an ERROR",
                                                              message: "Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it."))"
                                                              style="background-color: var(--mb-toast-background-color-error); color: var(--mb-toast-color-error); margin-bottom: 1rem;" />
                            </p>
                        </div>
                    </div>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-12">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                                Tailored Toasts
                            </h2>

                            <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows how toasts can be tailored through the ShowToast method call.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@CssClass"
                                                          Items="CssClassItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Additional css class"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@CloseMethod"
                                                          Items="closeMethodItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Close method"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@Heading"
                                                          Items="headingItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Heading"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@Icon"
                                                          Items="iconItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Icon"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@Level"
                                                          Items="levelItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Level"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@Message"
                                                          Items="messageItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Message"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@ShowIcon"
                                                          Items="showIconItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Show icon"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <Material.Blazor.MD2.MBSelect @bind-Value="@Timeout"
                                                          Items="timeoutItems"
                                                          ItemValidation="@MBItemValidation.DefaultToFirst"
                                                          LeadingLabel="Timeout"
                                                          SelectInputStyle="@MBSelectInputStyleMD2.Outlined" />
                        </div>

                        <div class="mdc-layout-grid__cell--span-12">
                            <Material.Blazor.MD2.MBButton ButtonStyle="@MBButtonStyleMD2.ContainedRaised"
                                                          LeadingLabel="Toast with selected options"
                                                          @onclick="@CustomiseClick" />
                        </div>
                    </div>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>
    </PageContent>
</DemonstrationPage>



@code {
    private bool OverrideCssDefaults { get; set; }

    private readonly IEnumerable<MBSelectElement<MBToastPosition>> positionItems = from pos in (MBToastPosition[])Enum.GetValues(typeof(MBToastPosition))
                                                                                   select new MBSelectElement<MBToastPosition>
                                                                                       {
                                                                                           SelectedValue = pos,
                                                                                           LeadingLabel = pos.ToString()
                                                                                       };


    private string CssClass { get; set; }
    private readonly MBSelectElement<string>[] CssClassItems = new MBSelectElement<string>[]
        {
        new MBSelectElement<string> { SelectedValue = "", LeadingLabel = "Toast Svc Default" },
        new MBSelectElement<string> { SelectedValue = "italic-class", LeadingLabel = "Italic" },
                                                };


    private MBNotifierCloseMethod CloseMethod { get; set; }
    private readonly IEnumerable<MBSelectElement<MBNotifierCloseMethod>> closeMethodItems = from c in (MBNotifierCloseMethod[])Enum.GetValues(typeof(MBNotifierCloseMethod))
                                                                                            select new MBSelectElement<MBNotifierCloseMethod>
                                                                                                {
                                                                                                    SelectedValue = c,
                                                                                                    LeadingLabel = c.ToString()
                                                                                                };

    private string Heading { get; set; }
    private readonly MBSelectElement<string>[] headingItems = new MBSelectElement<string>[]
        {
        new MBSelectElement<string> { SelectedValue = "", LeadingLabel = "Toast Svc Default" },
        new MBSelectElement<string> { SelectedValue = "Run of the mill heading", LeadingLabel = "Run of the mill heading" },
        new MBSelectElement<string> { SelectedValue = "Heading truncated and truncated and truncated and truncated", LeadingLabel = "Heading that will be truncated" }
                                                };


#nullable enable annotations
    class MyIcon
    {
        public string Name;
    }
#nullable restore annotations

    private MyIcon Icon { get; set; }
    private readonly MBSelectElement<MyIcon>[] iconItems = new MBSelectElement<MyIcon>[]
        {
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "directions_run" }, LeadingLabel = "directions_run" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, LeadingLabel = "thumb_up (filled / default)" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, LeadingLabel = "thumb_up (outlined)" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, LeadingLabel = "thumb_up (rounded)" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, LeadingLabel = "thumb_up (two-tone)" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, LeadingLabel = "thumb_up (sharp)" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance" }, LeadingLabel = "fa-ambulance" },
        new MBSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance" }, LeadingLabel = "fa-ambulance (x-small)" },
                                                };


    private MBToastLevel Level { get; set; }
    private readonly IEnumerable<MBSelectElement<MBToastLevel>> levelItems = from c in (MBToastLevel[])Enum.GetValues(typeof(MBToastLevel))
                                                                             select new MBSelectElement<MBToastLevel>
                                                                                 {
                                                                                     SelectedValue = c,
                                                                                     LeadingLabel = c.ToString()
                                                                                 };


    private string Message { get; set; }
    private readonly MBSelectElement<string>[] messageItems = new MBSelectElement<string>[]
        {
        new MBSelectElement<string> { SelectedValue = "Run of the mill message", LeadingLabel = "Run of the mill message" },
        new MBSelectElement<string> { SelectedValue = "Text <strong>bold</strong> and <u>underlined</u>", LeadingLabel = "Message with markup" },
        new MBSelectElement<string> { SelectedValue = "Message truncated and truncated and truncated and truncated", LeadingLabel = "Message that will be truncated" }
                                                };


    private string ShowIcon { get; set; }
    private readonly MBSelectElement<string>[] showIconItems = new MBSelectElement<string>[]
        {
        new MBSelectElement<string> { SelectedValue = "", LeadingLabel = "Toast Svc Default" },
        new MBSelectElement<string> { SelectedValue = "true", LeadingLabel = "true" },
        new MBSelectElement<string> { SelectedValue = "false", LeadingLabel = "false" }
                                                };


    private string Timeout { get; set; }
    private readonly MBSelectElement<string>[] timeoutItems = new MBSelectElement<string>[]
        {
        new MBSelectElement<string> { SelectedValue = "", LeadingLabel = "Toast Svc Default" },
        new MBSelectElement<string> { SelectedValue = "1000", LeadingLabel = "1 second" },
        new MBSelectElement<string> { SelectedValue = "10000", LeadingLabel = "10 seconds" },
        new MBSelectElement<string> { SelectedValue = "60000", LeadingLabel = "60 seconds" }
                                                };


    private void CustomiseClick()
    {
        string appliedCssClass = (CssClass.Length == 0) ? null : CssClass;

        string appliedHeading = (Heading.Length == 0) ? null : Heading;

        bool? appliedShowIcon = (ShowIcon.Length == 0) ? appliedShowIcon = null : appliedShowIcon = Convert.ToBoolean(ShowIcon);

        uint? appliedTimeout = (Timeout.Length == 0) ? appliedTimeout = null : appliedTimeout = Convert.ToUInt32(Timeout);

        ToastService.ShowToast(
            cssClass: appliedCssClass,
            closeMethod: CloseMethod,
            heading: appliedHeading,
            level: Level,
            message: Message,
            iconName: Icon.Name,
            showIcon: appliedShowIcon,
            timeout: appliedTimeout);
    }


    private bool disposedValue;


    /// <inheritdoc/>
    /// <param name="disposing"></param>
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                ToastService.Configuration = Utilities.GetDefaultToastServiceConfiguration();
            }

            // O: free unmanaged resources (unmanaged objects) and override finalizer
            // TODO: set large fields to null
            disposedValue = true;
        }
    }


    /// <inheritdoc/>
    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}