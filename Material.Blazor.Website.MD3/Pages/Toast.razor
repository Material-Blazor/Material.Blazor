@page "/toast"

@implements IDisposable

@inject IMBToastService ToastService

@using Material.Blazor

<style>
    .italic-class {
        font-style: italic;
    }
</style>

@if (OverrideCssDefaults)
{
    <style>
        :root {
            --mb-toast-color-info: var(--mb-color-on-light-blue-200) !important;
            --mb-toast-color-success: var(--mb-color-on-green-200) !important;
            --mb-toast-color-warning: var(--mb-color-on-amber-200) !important;
            --mb-toast-color-error: var(--mb-color-on-red-200) !important;
            --mb-toast-filter-info: var(--mb-color-on-light-blue-200) !important;
            --mb-toast-filter-success: var(--mb-color-on-green-200) !important;
            --mb-toast-filter-warning: var(--mb-color-on-amber-200) !important;
            --mb-toast-filter-error: var(--mb-color-on-red-200) !important;
            --mb-toast-background-color-info: var(--mb-color-light-blue-200) !important;
            --mb-toast-background-color-success: var(--mb-color-green-200) !important;
            --mb-toast-background-color-warning: var(--mb-color-amber-200) !important;
            --mb-toast-background-color-error: var(--mb-color-red-200) !important;
            --mb-toast-border-radius: 4px 16px !important;
        }
    </style>
}


<DemonstrationPage ComponentAndPageName="Toast"
                   DetailedArticle="Toast"
                   SuppressComponentDocumentation=true
                   Title="Toast Demonstration">
    <Description>
        <h2>Non-component</h2>
        <p>
            Demonstrates toast variations.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-12">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                                Basic Toasts
                            </h2>

                            <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows the four varieties of toast with CSS markup and managed timeout.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@ToastService.Configuration.Position"
                                      Items="@positionItems"
                                      SelectedLabel="Toast Position"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBCheckbox @bind-Value="@OverrideCssDefaults"
                                        TrailingLabelPLUS="Override Default CSS" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBIntField @bind-Value="@ToastService.Configuration.MaxToastsShowing"
                                        SelectedLabel="Max Toasts (0-10)"
                                        Max="10"
                                        Min="0"
                                        NumericFormat="N0" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-12">
                            <p>
                                <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                          Label="Info Toast"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Info,
                                                              heading: "I'm an Info",
                                                              message: "Nothing doing here."))"
                                          style="--md-sys-color-primary: var(--mb-toast-background-color-info); color: var(--mb-toast-color-info); margin-bottom: 1rem;" />

                                <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                          Label="Success Toast"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Success,
                                                              heading: "I'm a SUCCESS",
                                                              message: "Congratulations!" ))"
                                          style="--md-sys-color-primary: var(--mb-toast-background-color-success); color: var(--mb-toast-color-success); margin-bottom: 1rem;" />

                                <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                          Label="Warning Toast"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Warning,
                                                              heading: "I'm a WARNING",
                                                              message: "You have been warned."))"
                                          style="--md-sys-color-primary: var(--mb-toast-background-color-warning); color: var(--mb-toast-color-warning); margin-bottom: 1rem;" />

                                <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                          Label="Error Toast"
                                          @onclick="@(() => ToastService.ShowToast(
                                                              level: MBToastLevel.Error,
                                                              heading: "I'm an ERROR",
                                                              message: "Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it. Go fix it."))"
                                          style="--md-sys-color-primary: var(--mb-toast-background-color-error); color: var(--mb-toast-color-error); margin-bottom: 1rem;" />
                            </p>
                        </div>
                    </div>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-12">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <div class="mdc-layout-grid__inner">
                        <div class="mdc-layout-grid__cell--span-12">
                            <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                                Tailored Toasts
                            </h2>

                            <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                                Shows how toasts can be tailored through the ShowToast method call.
                            </h3>
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@CssClass"
                                      Items="CssClassItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Additional css class"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@CloseMethod"
                                      Items="closeMethodItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Close method"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@Heading"
                                      Items="headingItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Heading"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@Icon"
                                      Items="iconItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Icon"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@Level"
                                      Items="levelItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Level"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@Message"
                                      Items="messageItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Message"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@ShowIcon"
                                      Items="showIconItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Show icon"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>
                        <div class="mdc-layout-grid__cell--span-4">
                            <MBSelect @bind-Value="@Timeout"
                                      Items="timeoutItems"
                                      ItemValidation="@MBItemValidation.DefaultToFirst"
                                      Label="Timeout"
                                      SelectInputStyle="@MBSelectInputStyle.Outlined" />
                        </div>

                        <div class="mdc-layout-grid__cell--span-12">
                            <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                      Label="Toast with selected options"
                                      @onclick="@CustomiseClick" />
                        </div>
                    </div>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>
    </PageContent>
</DemonstrationPage>



@code {
    private bool OverrideCssDefaults { get; set; }

    private readonly IEnumerable<MBSingleSelectElement<MBToastPosition>> positionItems = from pos in (MBToastPosition[])Enum.GetValues(typeof(MBToastPosition))
                                                                                         select new MBSingleSelectElement<MBToastPosition>
                                                                                             {
                                                                                                 SelectedValue = pos,
                                                                                                 TrailingLabel = pos.ToString()
                                                                                             };


    private string CssClass { get; set; }
    private readonly MBSingleSelectElement<string>[] CssClassItems = new MBSingleSelectElement<string>[]
        {
        new MBSingleSelectElement<string> { SelectedValue = "", TrailingLabel = "Toast Svc Default" },
        new MBSingleSelectElement<string> { SelectedValue = "italic-class", TrailingLabel = "Italic" },
                                                };


    private MBNotifierCloseMethod CloseMethod { get; set; }
    private readonly IEnumerable<MBSingleSelectElement<MBNotifierCloseMethod>> closeMethodItems = from c in (MBNotifierCloseMethod[])Enum.GetValues(typeof(MBNotifierCloseMethod))
                                                                                                  select new MBSingleSelectElement<MBNotifierCloseMethod>
                                                                                                      {
                                                                                                          SelectedValue = c,
                                                                                                          TrailingLabel = c.ToString()
                                                                                                      };

    private string Heading { get; set; }
    private readonly MBSingleSelectElement<string>[] headingItems = new MBSingleSelectElement<string>[]
        {
        new MBSingleSelectElement<string> { SelectedValue = "", TrailingLabel = "Toast Svc Default" },
        new MBSingleSelectElement<string> { SelectedValue = "Run of the mill heading", TrailingLabel = "Run of the mill heading" },
        new MBSingleSelectElement<string> { SelectedValue = "Heading truncated and truncated and truncated and truncated", TrailingLabel = "Heading that will be truncated" }
                                                };


#nullable enable annotations
    class MyIcon
    {
        public string Name;
    }
#nullable restore annotations

    private MyIcon Icon { get; set; }
    private readonly MBSingleSelectElement<MyIcon>[] iconItems = new MBSingleSelectElement<MyIcon>[]
        {
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "directions_run" }, TrailingLabel = "directions_run" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, TrailingLabel = "thumb_up (filled / default)" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, TrailingLabel = "thumb_up (outlined)" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, TrailingLabel = "thumb_up (rounded)" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, TrailingLabel = "thumb_up (two-tone)" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up" }, TrailingLabel = "thumb_up (sharp)" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance" }, TrailingLabel = "fa-ambulance" },
        new MBSingleSelectElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance" }, TrailingLabel = "fa-ambulance (x-small)" },
                                                };


    private MBToastLevel Level { get; set; }
    private readonly IEnumerable<MBSingleSelectElement<MBToastLevel>> levelItems = from c in (MBToastLevel[])Enum.GetValues(typeof(MBToastLevel))
                                                                                   select new MBSingleSelectElement<MBToastLevel>
                                                                                       {
                                                                                           SelectedValue = c,
                                                                                           TrailingLabel = c.ToString()
                                                                                       };


    private string Message { get; set; }
    private readonly MBSingleSelectElement<string>[] messageItems = new MBSingleSelectElement<string>[]
        {
        new MBSingleSelectElement<string> { SelectedValue = "Run of the mill message", TrailingLabel = "Run of the mill message" },
        new MBSingleSelectElement<string> { SelectedValue = "Text <strong>bold</strong> and <u>underlined</u>", TrailingLabel = "Message with markup" },
        new MBSingleSelectElement<string> { SelectedValue = "Message truncated and truncated and truncated and truncated", TrailingLabel = "Message that will be truncated" }
                                                };


    private string ShowIcon { get; set; }
    private readonly MBSingleSelectElement<string>[] showIconItems = new MBSingleSelectElement<string>[]
        {
        new MBSingleSelectElement<string> { SelectedValue = "", TrailingLabel = "Toast Svc Default" },
        new MBSingleSelectElement<string> { SelectedValue = "true", TrailingLabel = "true" },
        new MBSingleSelectElement<string> { SelectedValue = "false", TrailingLabel = "false" }
                                                };


    private string Timeout { get; set; }
    private readonly MBSingleSelectElement<string>[] timeoutItems = new MBSingleSelectElement<string>[]
        {
        new MBSingleSelectElement<string> { SelectedValue = "", TrailingLabel = "Toast Svc Default" },
        new MBSingleSelectElement<string> { SelectedValue = "1000", TrailingLabel = "1 second" },
        new MBSingleSelectElement<string> { SelectedValue = "10000", TrailingLabel = "10 seconds" },
        new MBSingleSelectElement<string> { SelectedValue = "60000", TrailingLabel = "60 seconds" }
                                                };


    private void CustomiseClick()
    {
        string appliedCssClass = (CssClass is null || CssClass.Length == 0) ? null : CssClass;

        string appliedHeading = (Heading.Length == 0) ? null : Heading;

        bool? appliedShowIcon = (ShowIcon.Length == 0) ? appliedShowIcon = null : appliedShowIcon = Convert.ToBoolean(ShowIcon);

        uint? appliedTimeout = (Timeout.Length == 0) ? appliedTimeout = null : appliedTimeout = Convert.ToUInt32(Timeout);

        ToastService.ShowToast(
            cssClass: appliedCssClass,
            closeMethod: CloseMethod,
            heading: appliedHeading,
            level: Level,
            message: Message,
            iconName: Icon.Name,
            showIcon: appliedShowIcon,
            timeout: appliedTimeout);
    }


    private bool disposedValue;


    /// <inheritdoc/>
    /// <param name="disposing"></param>
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                ToastService.Configuration = Utilities.GetDefaultToastServiceConfiguration();
            }

            // O: free unmanaged resources (unmanaged objects) and override finalizer
            // TODO: set large fields to null
            disposedValue = true;
        }
    }


    /// <inheritdoc/>
    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}