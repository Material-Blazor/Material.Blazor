@page "/numericField"

@namespace Material.Blazor.Website.Pages

@inject IMBToastService ToastService

@using System.Runtime.InteropServices


<DemonstrationPage AdditionalAPIReferences="@apiTuple"
                   ComponentAndPageName="NumericField"
                   ComponentDirectory="NumericField"
                   MaterialWebPage=""
                   RequiresDisableSelection="true"
                   SuppressComponentDocumentation="true"
                   Title="Numeric Field Demonstration (Decimal, Double, and Int)">
    <Description>
        <p>
            Shows numeric fields, which are Plus components.
            Each of these can display as Filled or Outlined and with
            leading and trailing icons. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Decimals
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric decimal fields using formats for non focused input.
                    </h3>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalValue"
                                        DecimalPlaces="2"
                                        Label="Decimal 2dp"
                                        NumericFormat="N2"
                                        TextInputStyle="@MBTextInputStyle.Filled" />
                    </p>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalMoneyByFormat"
                                        DecimalPlaces="2"
                                        Label="Money by format"
                                        NumericFormat="C2"
                                        TextInputStyle="@MBTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalMoneyByPrefix"
                                        DecimalPlaces="2"
                                        Label="Money by prefix"
                                        NumericFormat="N2"
                                        Prefix="£"
                                        TextInputStyle="@MBTextInputStyle.Filled" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Scaled Formatted Decimals
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Percentage and basis point numerics can be edited either using a prefix or standard formatting (in the case of percentages only).
                        A figure of "12.3%" results in a decimal value of "0.123" and one of "34.5 bp" results in a decimal value of "0.00345".
                    </h3>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalPercentByFormat"
                                        DecimalPlaces="2"
                                        FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent"
                                        Label="Percent by format"
                                        NumericFormat="P2" />
                    </p>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalPercentBySuffix"
                                        DecimalPlaces="2"
                                        FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent"
                                        Label="Percent by Suffix"
                                        NumericFormat="N2"
                                        Suffix="%"
                                        UnfocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent" />
                    </p>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalBasisPointsBySuffix"
                                        DecimalPlaces="0"
                                        FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.BasisPoints"
                                        Label="Basis Points by Suffix"
                                        NumericFormat="N0"
                                        Suffix="bp"
                                        UnfocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.BasisPoints" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text on Decimal
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalPopupHelperText"
                                        SupportingText="Some helper text that pops up"
                                        Label="Popup Helper Text"
                                        NumericFormat="N2" />
                    </p>

                    <p>
                        <MBDecimalField @bind-Value="@DecimalPersistentHelperText"
                                        SupportingText="Some persistent helper text"
                                        SupportingTextPersistent="true"
                                        Label="Persistent Helper Text"
                                        NumericFormat="N2" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>





        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Doubles
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric double fields using formats for non focused input.
                    </h3>

                    <p>
                        <MBDoubleField @bind-Value="@DoubleValue"
                                       DecimalPlaces="2"
                                       Label="Double 2dp"
                                       NumericFormat="N2" />
                    </p>

                    <p>
                        <MBDoubleField @bind-Value="@DoubleMoneyByFormat"
                                       DecimalPlaces="2"
                                       Label="Money by format"
                                       NumericFormat="C2" />
                    </p>

                    <p>
                        <MBDoubleField @bind-Value="@DoubleMoneyByPrefix"
                                       DecimalPlaces="2"
                                       Label="Money by prefix"
                                       NumericFormat="N2"
                                       Prefix="£" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Scaled Formatted Doubles
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Percentage and basis point numerics can be edited either using a prefix or standard formatting (in the case of percentages only).
                        A figure of "12.3%" results in a double value of "0.123" and one of "34.5 bp" results in a double value of "0.00345".
                    </h3>

                    <p>
                        <MBDoubleField @bind-Value="@DoublePercentByFormat"
                                       DecimalPlaces="2"
                                       FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent"
                                       Label="Percent by format"
                                       NumericFormat="P2" />
                    </p>

                    <p>
                        <MBDoubleField @bind-Value="@DoublePercentBySuffix"
                                       DecimalPlaces="2"
                                       FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent"
                                       Label="Percent by Suffix"
                                       NumericFormat="N2"
                                       Suffix="%"
                                       UnfocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.Percent" />
                    </p>

                    <p>
                        <MBDoubleField @bind-Value="@DoubleBasisPointsBySuffix"
                                       DecimalPlaces="0"
                                       FocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.BasisPoints"
                                       Label="Basis Points by Suffix"
                                       NumericFormat="N0"
                                       Suffix="bp"
                                       UnfocusedMagnitude="Material.Blazor.MBNumericInputMagnitude.BasisPoints" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text on Double
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p>
                        <MBDoubleField @bind-Value="@DoublePopupHelperText"
                                       SupportingText="Some helper text that pops up"
                                       Label="Popup Helper Text"
                                       NumericFormat="N2" />
                    </p>

                    <p>
                        <MBDoubleField @bind-Value="@DoublePersistentHelperText"
                                       SupportingText="Some persistent helper text"
                                       SupportingTextPersistent="true"
                                       Label="Persistent Helper Text"
                                       NumericFormat="N2" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>





        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Int
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric integer fields using formats for non focused input.
                    </h3>

                    <p>
                        <MBIntField @bind-Value="@Integer"
                                    Label="Integer"
                                    NumericFormat="N0" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text on Int
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p>
                        <MBIntField @bind-Value="@IntPopupHelperText"
                                    Label="Popup Helper Text"
                                    SupportingText="Supporting text that pops up"
                                    NumericFormat="N0" />
                    </p>

                    <p>
                        <MBIntField @bind-Value="@IntPersistentHelperText"
                                    Label="Persistent Helper Text"
                                    SupportingText="Persistent supporting text"
                                    SupportingTextPersistent="true"
                                    NumericFormat="N0" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>

    </PageContent>
</DemonstrationPage>


@code {

    // ************************ DECIMAL *************************
    private decimal _decimalValue;
    private decimal DecimalValue
    {
        get => _decimalValue;
        set
        {
            _decimalValue = value;

            ToastService.ShowToast(heading: "Decimal numeric", message: $"Value: '{_decimalValue.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private decimal _decimalMoneyByFormat;
    private decimal DecimalMoneyByFormat
    {
        get => _decimalMoneyByFormat;
        set
        {
            _decimalMoneyByFormat = value;

            ToastService.ShowToast(heading: "Decimal Money by format numeric", message: $"Value: '{_decimalMoneyByFormat.ToString("C2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private decimal _decimalMoneyByPrefix;
    private decimal DecimalMoneyByPrefix
    {
        get => _decimalMoneyByPrefix;
        set
        {
            _decimalMoneyByPrefix = value;

            ToastService.ShowToast(heading: "Decimal Money by Prefix numeric", message: $"Value: '{_decimalMoneyByPrefix.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private decimal _decimalPercentByFormat;
    private decimal DecimalPercentByFormat
    {
        get => _decimalPercentByFormat;
        set
        {
            _decimalPercentByFormat = value;

            ToastService.ShowToast(heading: "Decimal Percent by format", message: $"Value: '{_decimalPercentByFormat.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private decimal _decimalPercentBySuffix;
    private decimal DecimalPercentBySuffix
    {
        get => _decimalPercentBySuffix;
        set
        {
            _decimalPercentBySuffix = value;

            ToastService.ShowToast(heading: "Decimal Percent by suffix", message: $"Value: '{_decimalPercentBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private decimal _decimalBasisPointsBySuffix;
    private decimal DecimalBasisPointsBySuffix
    {
        get => _decimalBasisPointsBySuffix;
        set
        {
            _decimalBasisPointsBySuffix = value;

            ToastService.ShowToast(heading: "Decimal Basis Points by suffix", message: $"Value: '{_decimalBasisPointsBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _decimalPopupHelperText;
    private decimal DecimalPopupHelperText
    {
        get => _decimalPopupHelperText;
        set
        {
            _decimalPopupHelperText = value;

            ToastService.ShowToast(heading: "Decimal Popup Helper Text", message: $"Value: '{_decimalPopupHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _decimalPersistentHelperText;
    private decimal DecimalPersistentHelperText
    {
        get => _decimalPersistentHelperText;
        set
        {
            _decimalPersistentHelperText = value;

            ToastService.ShowToast(heading: "Decimal Persistent Helper Text", message: $"Value: '{_decimalPersistentHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }




    // ************************ DOUBLE *************************
    private double _doubleValue;
    private double DoubleValue
    {
        get => _doubleValue;
        set
        {
            _doubleValue = value;

            ToastService.ShowToast(heading: "Double numeric", message: $"Value: '{_doubleValue.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleMoneyByFormat;
    private double DoubleMoneyByFormat
    {
        get => _doubleMoneyByFormat;
        set
        {
            _doubleMoneyByFormat = value;

            ToastService.ShowToast(heading: "Double Money by format numeric", message: $"Value: '{_doubleMoneyByFormat.ToString("C2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleMoneyByPrefix;
    private double DoubleMoneyByPrefix
    {
        get => _doubleMoneyByPrefix;
        set
        {
            _doubleMoneyByPrefix = value;

            ToastService.ShowToast(heading: "Double Money by Prefix numeric", message: $"Value: '{_doubleMoneyByPrefix.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doublePercentByFormat;
    private double DoublePercentByFormat
    {
        get => _doublePercentByFormat;
        set
        {
            _doublePercentByFormat = value;

            ToastService.ShowToast(heading: "Double Percent by format", message: $"Value: '{_doublePercentByFormat.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doublePercentBySuffix;
    private double DoublePercentBySuffix
    {
        get => _doublePercentBySuffix;
        set
        {
            _doublePercentBySuffix = value;

            ToastService.ShowToast(heading: "Double Percent by suffix", message: $"Value: '{_doublePercentBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleBasisPointsBySuffix;
    private double DoubleBasisPointsBySuffix
    {
        get => _doubleBasisPointsBySuffix;
        set
        {
            _doubleBasisPointsBySuffix = value;

            ToastService.ShowToast(heading: "Double Basis Points by suffix", message: $"Value: '{_doubleBasisPointsBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private double _doublePopupHelperText;
    private double DoublePopupHelperText
    {
        get => _doublePopupHelperText;
        set
        {
            _doublePopupHelperText = value;

            ToastService.ShowToast(heading: "Double Popup Helper Text", message: $"Value: '{_doublePopupHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private double _doublePersistentHelperText;
    private double DoublePersistentHelperText
    {
        get => _doublePersistentHelperText;
        set
        {
            _doublePersistentHelperText = value;

            ToastService.ShowToast(heading: "Double Persistent Helper Text", message: $"Value: '{_doublePersistentHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    // ************************ INT *************************


    private int _integer;
    private int Integer
    {
        get => _integer;
        set
        {
            _integer = value;

            ToastService.ShowToast(heading: "Integer numeric", message: $"Value: '{_integer.ToString("N0")}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private int _intPopupHelperText;
    private int IntPopupHelperText
    {
        get => _intPopupHelperText;
        set
        {
            _intPopupHelperText = value;

            ToastService.ShowToast(heading: "Int Popup Helper Text", message: $"Value: '{_intPopupHelperText}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private int _intPersistentHelperText;
    private int IntPersistentHelperText
    {
        get => _intPersistentHelperText;
        set
        {
            _intPersistentHelperText = value;

            ToastService.ShowToast(heading: "Int Persistent Helper Text", message: $"Value: '{_intPersistentHelperText}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private Tuple<int, string>[] apiTuple =
    {
       new Tuple<int, string>(0, "MBDecimalField"),
       new Tuple<int, string>(5, "InternalFloatingPointFieldBase"),
       new Tuple<int, string>(10, "InternalNumericFieldBase"),
       new Tuple<int, string>(15, "MBTextField"),
       new Tuple<int, string>(20, "InternalTextFieldBase"),
       new Tuple<int, string>(0, "MBDoubleField"),
       new Tuple<int, string>(5, "InternalFloatingPointFieldBase"),
       new Tuple<int, string>(10, "InternalNumericFieldBase"),
       new Tuple<int, string>(15, "MBTextField"),
       new Tuple<int, string>(20, "InternalTextFieldBase"),
       new Tuple<int, string>(0, "MBIntField"),
       new Tuple<int, string>(5, "InternalIntFieldBase"),
       new Tuple<int, string>(10, "InternalNumericFieldBase"),
       new Tuple<int, string>(15, "MBTextField"),
       new Tuple<int, string>(20, "InternalTextFieldBase"),
    };

}