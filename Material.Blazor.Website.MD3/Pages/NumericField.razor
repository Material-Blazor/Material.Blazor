@page "/numericField"

@namespace Material.Blazor.Website.Pages

@inject IMBToastService ToastService

@using System.Runtime.InteropServices


<DemonstrationPage APIReferences="@apiTuple"
                   ComponentAndPageName="NumericField"
                   ComponentDirectory="NumericField"
                   MaterialWebPage=""
                   RequiresDisableSelection="true"
                   SuppressComponentDocumentation="true"
                   Title="Numeric Field Demonstration (Decimal, Double, and Int)">
    <Description>
        <p>
            Shows numeric fields, which are Plus components.
            Each of these can display as Filled or Outlined and with
            leading and trailing icons. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
        </p>
    </Description>

    <PageContent>











    </PageContent>
</DemonstrationPage>


@code {





    // ************************ DOUBLE *************************
    private double _doubleValue;
    private double DoubleValue
    {
        get => _doubleValue;
        set
        {
            _doubleValue = value;

            ToastService.ShowToast(heading: "Double numeric", message: $"Value: '{_doubleValue.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleMoneyByFormat;
    private double DoubleMoneyByFormat
    {
        get => _doubleMoneyByFormat;
        set
        {
            _doubleMoneyByFormat = value;

            ToastService.ShowToast(heading: "Double Money by format numeric", message: $"Value: '{_doubleMoneyByFormat.ToString("C2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleMoneyByPrefix;
    private double DoubleMoneyByPrefix
    {
        get => _doubleMoneyByPrefix;
        set
        {
            _doubleMoneyByPrefix = value;

            ToastService.ShowToast(heading: "Double Money by Prefix numeric", message: $"Value: '{_doubleMoneyByPrefix.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doublePercentByFormat;
    private double DoublePercentByFormat
    {
        get => _doublePercentByFormat;
        set
        {
            _doublePercentByFormat = value;

            ToastService.ShowToast(heading: "Double Percent by format", message: $"Value: '{_doublePercentByFormat.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doublePercentBySuffix;
    private double DoublePercentBySuffix
    {
        get => _doublePercentBySuffix;
        set
        {
            _doublePercentBySuffix = value;

            ToastService.ShowToast(heading: "Double Percent by suffix", message: $"Value: '{_doublePercentBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }

    private double _doubleBasisPointsBySuffix;
    private double DoubleBasisPointsBySuffix
    {
        get => _doubleBasisPointsBySuffix;
        set
        {
            _doubleBasisPointsBySuffix = value;

            ToastService.ShowToast(heading: "Double Basis Points by suffix", message: $"Value: '{_doubleBasisPointsBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private double _doublePopupHelperText;
    private double DoublePopupHelperText
    {
        get => _doublePopupHelperText;
        set
        {
            _doublePopupHelperText = value;

            ToastService.ShowToast(heading: "Double Popup Helper Text", message: $"Value: '{_doublePopupHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private double _doublePersistentHelperText;
    private double DoublePersistentHelperText
    {
        get => _doublePersistentHelperText;
        set
        {
            _doublePersistentHelperText = value;

            ToastService.ShowToast(heading: "Double Persistent Helper Text", message: $"Value: '{_doublePersistentHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }



    private Tuple<int, string>[] apiTuple =
    {
       new Tuple<int, string>(0, "MBDoubleField"),
       new Tuple<int, string>(5, "InternalFloatingPointFieldBase"),
       new Tuple<int, string>(10, "InternalNumericFieldBase"),
    };

}