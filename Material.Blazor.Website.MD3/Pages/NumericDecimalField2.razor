@page "/numericdecimalField2"

@namespace Material.Blazor.Website.Pages

@inject IMBToastService ToastService

@using System.Runtime.InteropServices


<DemonstrationPage AdditionalAPIReferences="@apiTuple"
                   ComponentAndPageName="NumericDecimalField2"
                   ComponentDirectory="NumericField2"
                   MaterialDesignPage=""
                   RequiresDisableSelection="true"
                   SuppressComponentDocumentation="true"
                   Title="Numeric Decimal Field 2 Demonstration">
    <Description>
        <p>
            Shows numeric decimal fields, which are Plus components.
            Each of these can display as Filled or Outlined and with
            the full variety of icon foundries. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <Material.Blazor.MD2.MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Numerics
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric decimal fields using formats for non focused input.
                    </h3>

                    <p>
                        <MBDecimalField2 @bind-Value="@DecimalValue"
                                         DecimalPlaces="2"
                                         
                                         Label="Decimal 2dp"
                                         NumericFormat="N2"
                                         TextInputStyle="@MBTextInputStyle.Filled" />
                    </p>

                    <p>
                        <MBDecimalField2 @bind-Value="@MoneyByFormat"
                                         DecimalPlaces="2"
                                         Label="Money by format"
                                         NumericFormat="C2"
                                         TextInputStyle="@MBTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MBDecimalField2 @bind-Value="@MoneyByPrefix"
                                         DecimalPlaces="2"
                                         Label="Money by prefix"
                                         NumericFormat="N2"
                                         Prefix="£"
                                         TextInputStyle="@MBTextInputStyle.Filled" />
                    </p>
                </Primary>
            </Material.Blazor.MD2.MBCard>
        </div>
    </PageContent>
</DemonstrationPage>


@code {
    private decimal _decimalValue;
    private decimal DecimalValue
    {
        get => _decimalValue;
        set
        {
            _decimalValue = value;

            ToastService.ShowToast(heading: "Decimal numeric", message: $"Value: '{_decimalValue.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }



    private decimal _moneyByFormat;
    private decimal MoneyByFormat
    {
        get => _moneyByFormat;
        set
        {
            _moneyByFormat = value;

            ToastService.ShowToast(heading: "Money by format numeric", message: $"Value: '{_moneyByFormat.ToString("C2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }



    private decimal _moneyByPrefix;
    private decimal MoneyByPrefix
    {
        get => _moneyByPrefix;
        set
        {
            _moneyByPrefix = value;

            ToastService.ShowToast(heading: "Money by Prefix numeric", message: $"Value: '{_moneyByPrefix.ToString("N2")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }



    private decimal _percentByFormat;
    private decimal PercentByFormat
    {
        get => _percentByFormat;
        set
        {
            _percentByFormat = value;

            ToastService.ShowToast(heading: "Percent by format", message: $"Value: '{_percentByFormat.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _percentBySuffix;
    private decimal PercentBySuffix
    {
        get => _percentBySuffix;
        set
        {
            _percentBySuffix = value;

            ToastService.ShowToast(heading: "Percent by suffix", message: $"Value: '{_percentBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _basisPointsBySuffix;
    private decimal BasisPointsBySuffix
    {
        get => _basisPointsBySuffix;
        set
        {
            _basisPointsBySuffix = value;

            ToastService.ShowToast(heading: "Basis Points by suffix", message: $"Value: '{_basisPointsBySuffix.ToString("N4")}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _popupHelperText;
    private decimal PopupHelperText
    {
        get => _popupHelperText;
        set
        {
            _popupHelperText = value;

            ToastService.ShowToast(heading: "Popup Helper Text", message: $"Value: '{_popupHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private decimal _persistentHelperText;
    private decimal PersistentHelperText
    {
        get => _persistentHelperText;
        set
        {
            _persistentHelperText = value;

            ToastService.ShowToast(heading: "Persistent Helper Text", message: $"Value: '{_persistentHelperText}'", level: Material.Blazor.MBToastLevel.Success, showIcon: false);
        }
    }


    private Tuple<int, string>[] apiTuple =
    {
       new Tuple<int, string>(0, "MBDecimalField2"),
       new Tuple<int, string>(5, "InternalNumericField2Base"),
       new Tuple<int, string>(10, "InternalFloatingPointField2Base"),
       new Tuple<int, string>(15, "MBTextField2"),
       new Tuple<int, string>(20, "InternalTextField2Base")
    };

}