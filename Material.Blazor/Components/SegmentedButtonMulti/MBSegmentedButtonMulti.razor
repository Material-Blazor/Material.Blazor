@namespace Material.Blazor

@inherits MultiSelectComponent<TItem, MBIconBearingSelectElement<TItem>>
@typeparam TItem


<div @ref="@SegmentedButtonReference"
     class="mdc-segmented-button @ActiveConditionalClasses @(@class)"
     style="@style"
     id="@id"
     @attributes="AttributesToSplat()"
     role="@GroupRole">

    @for (int j = 0; j < ItemsArray.Length; j++)
    {
        int i = j;
        <MBTouchTargetWrapper @key="@KeyGenerator(ItemsArray[i].SelectedValue)" ApplyTouchTargetWrapper="AppliedTouchTarget">
            <div class="mb-segmented-button__container">
                <button @attributes="@SegmentAttributes[i]">
                    <div class="mdc-segmented-button__ripple"></div>

                    @if (!string.IsNullOrWhiteSpace(ItemsArray[i].Icon))
                    {
                        <MBIcon class="mdc-segmented-button__icon"
                        IconFoundry="@IconFoundry"
                        IconName="@ItemsArray[i].Icon" />
                    }

                    <div class="mdc-segmented-button__touch"></div>

                    @if (!string.IsNullOrWhiteSpace(ItemsArray[i].Label))
                    {
                        <div class="mdc-segmented-button__label">@ItemsArray[i].Label</div>
                    }
                </button>

                @if (HasBadge && i == ItemsArray.Length - 1)
                {
                    <span class="mb-badge-container">
                        <MBBadge @ref="@Badge" BadgeStyle="@BadgeStyle"
                            Value="@BadgeValue"
                            Exited="@BadgeExited" />
                    </span>
                }
            </div>
        </MBTouchTargetWrapper>
    }
</div>
