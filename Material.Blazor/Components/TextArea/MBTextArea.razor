@namespace Material.Blazor

@inherits InputComponent<string>


<label @ref="ElementReference"
       @attributes="@AttributesToSplat(SplatType.IdClassAndStyleOnly)">

    @if (AppliedInputStyle == MBTextInputStyle.Outlined)
    {
        <span class="mdc-notched-outline">
            <span class="mdc-notched-outline__leading"></span>

            @if (ShowLabel)
            {
                <span class="mdc-notched-outline__notch">
                    <span class="mdc-floating-label @FloatingLabelClass" for="@CrossReferenceId" id="@labelId">@DisplayLabel</span>
                </span>
            }

            <span class="mdc-notched-outline__trailing"></span>
        </span>
    }
    else
    {
        <span class="mdc-text-field__ripple"></span>

        @if (ShowLabel)
        {
            <span class="mdc-floating-label @FloatingLabelClass" for="@CrossReferenceId" id="@labelId">@DisplayLabel</span>
        }
    }

    <span class="mdc-text-field__resizer">
        <textarea @attributes="@AttributesToSplat(SplatType.ExcludeIdClassAndStyle)"
                  id="@CrossReferenceId"
                  class="mdc-text-field__input @AppliedTextInputStyleClass @FieldClass"
                  @bind="@ComponentValue"
                  aria-labelledby="@labelId"
                  rows="@Rows"
                  cols="@Cols"
                  disabled="@AppliedDisabled"></textarea>
    </span>

    @if (AppliedInputStyle == MBTextInputStyle.Filled)
    {
        <span class="mdc-line-ripple"></span>
    }
</label>

@if (HasHelperText)
{
    <div class="mdc-text-field-helper-line">
        <div @ref="@HelperTextReference"
             class="mdc-text-field-helper-text"
             id="@helperTextId"
             aria-hidden="true">
            @HelperText
        </div>
    </div>
}