@namespace Material.Blazor
@inherits InputComponent<List<TItem>>
@typeparam TItem


<div @ref="@ElementReference"
     class="mb-drag-and-drop-list @ActiveConditionalClasses @(@class)"
     style="@style"
     id="@id"
     @attributes="@AttributesToSplat()">

    <InternalDragAndDropSpacer Index="0" AutospaceContent="@DisplayCards" ShowDropZone="@ShowDropZone(0)" DropNotifier="@ReOrderItems" />

    @foreach (var (index, item) in ItemDict)
    {
        var hasMovedClass = index >= FirstHasMovedIndex && index <= LastHasMovedIndex ? "mb-drag-and-drop__has-moved" : "";

        @if (DisplayCards)
        {
            <MBCard class="@hasMovedClass" @key="@KeyGenerator(item)" CardStyle="@MBCardStyle.Outlined">
                <Primary>
                    <InternalDragAndDropItem Index="@index" Disabled="@AppliedDisabled" AutospaceContent="true" DragStartNotifier="SetDraggedItemIndex" DragEndNotifier="ClearDraggedItemIndex">
                        @Content(item)
                    </InternalDragAndDropItem>
                </Primary>
            </MBCard>
        }
        else
        {
            <InternalDragAndDropItem Index="@index" Disabled="@AppliedDisabled" DragStartNotifier="SetDraggedItemIndex" DragEndNotifier="ClearDraggedItemIndex">
                @Content(item)
            </InternalDragAndDropItem>
        }

        <InternalDragAndDropSpacer Index="@(index + 1)" AutospaceContent="@DisplayCards" ShowDropZone="@ShowDropZone(index + 1)" DropNotifier="@ReOrderItems" />
    }
</div>