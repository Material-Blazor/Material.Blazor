<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<!--<TargetFrameworks>net6.0;net7.0</TargetFrameworks>-->
		<TargetFrameworks>net6.0</TargetFrameworks>

		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>

		<VersionPrefix>3.0.0</VersionPrefix>
		<VersionSuffix>aaa1</VersionSuffix>

		<IsPackable>true</IsPackable>
		<PackageLicenseFile></PackageLicenseFile>
		<Authors>Simon Ziegler of Dioptra and Mark Stega of Optimium Health</Authors>
		<Company>Material.Blazor</Company>
		<Description>A lightweight Material Theme component library for Blazor. Intended to adhere rigorously to Material Theme guidelines in https://material.io. API and other documentation can be found at https://material-blazor.com/docs.</Description>
		<RepositoryUrl>https://github.com/Material-Blazor/Material.Blazor</RepositoryUrl>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageReleaseNotes></PackageReleaseNotes>
		<NeutralLanguage>en</NeutralLanguage>
		<Copyright>Dioptra and Optimium Health</Copyright>
		<PackageProjectUrl>https://material-blazor.com</PackageProjectUrl>
		<Product>Material.Blazor</Product>
		<UserSecretsId>d7509b6c-bc5c-4a56-a750-09c8ae4aeb85</UserSecretsId>
		<Configurations>Debug;Release</Configurations>
	</PropertyGroup>

	<PropertyGroup>
		<EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
	</PropertyGroup>

	<PropertyGroup>
		<EmitCompilerGeneratedFiles>false</EmitCompilerGeneratedFiles>
	</PropertyGroup>

	<ItemGroup>
		<SupportedPlatform Include="browser" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<WarningLevel>5</WarningLevel>
	</PropertyGroup>

	<ItemGroup>
		<!--Keep these two Removes-->
		<Content Remove="package-lock.json" />
		<Content Remove="package.json" />
	</ItemGroup>

	<ItemGroup Condition=" '$(TargetFramework)' == 'net6.0' ">
		<PackageReference Include="Microsoft.AspNetCore.Components" Version="6.0.7" />
		<PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="6.0.7" />
		<PackageReference Include="Microsoft.Extensions.Logging" Version="6.0.0" />
		<PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="6.0.1" />
	</ItemGroup>

	<ItemGroup Condition=" '$(TargetFramework)' == 'net7.0' ">
		<PackageReference Include="Microsoft.AspNetCore.Components" Version="7.0.0-preview.6.*" />
		<PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="7.0.0-preview.6.*" />
		<PackageReference Include="Microsoft.Extensions.Logging" Version="7.0.0-preview.6.*" />
		<PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="7.0.0-preview.6.*" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\README.md">
			<Pack>True</Pack>
			<PackagePath>\</PackagePath>
		</None>
		<None Include=".\package-lock.json" />
		<None Include=".\package.json" />
		<None Include="tsconfig.json" />
	</ItemGroup>

	<ItemGroup>
		<None Update="Scripts\material.blazor.ts">
			<SubType>Code</SubType>
		</None>
	</ItemGroup>

	<ItemGroup>
		<Folder Include="StaticAssets\" />
		<Folder Include="wwwroot\" />
	</ItemGroup>



	<ProjectExtensions>
		<VisualStudio>
			<UserProperties />
		</VisualStudio>
	</ProjectExtensions>

	<ItemGroup>
		<PackageReference Include="Microsoft.AspNetCore.ClientAssets" Version="0.1.0-alpha.21528.2" />
	</ItemGroup>

	<PropertyGroup>
		<ClientAssetsDirectory Condition="'$(ClientAssetsDirectory)' == ''">.</ClientAssetsDirectory>

		<ClientAssetsRestoreInputs Condition="'$(ClientAssetsRestoreInputs)' == ''">$(ClientAssetsDirectory)package-lock.json;$(ClientAssetsDirectory)package.json</ClientAssetsRestoreInputs>

		<ClientAssetsRestoreOutputs Condition="'$(ClientAssetsRestoreOutputs)' == ''">$(ClientAssetsDirectory)node_modules\.package-lock.json</ClientAssetsRestoreOutputs>

		<ClientAssetsRestoreCommand Condition="'$(ClientAssetsRestoreCommand)' == ''">npm install</ClientAssetsRestoreCommand>

		<ClientAssetsBuildCommand Condition="'$(ClientAssetsBuildCommand)' == ''">npm run buildStaticWebAssets</ClientAssetsBuildCommand>

		<ClientAssetsBuildOutputParameter Condition="'$(ClientAssetsBuildOutputParameter)' == ''">-o</ClientAssetsBuildOutputParameter>

		<ClientAssetsRestoreInputs>$(MSBuildProjectFile);$(ClientAssetsRestoreInputs)</ClientAssetsRestoreInputs>

		<!-- Run restore only once for multi targeting builds -->
		<ClientAssetsRestoreBeforeTargets Condition="'$(TargetFramework)' == ''">DispatchToInnerBuilds</ClientAssetsRestoreBeforeTargets>
		<!-- Allow multitargeting projects to choose the target framework in which they run by setting this value to true only for a given target framework -->
		<ShouldRunClientAssetsBuild Condition="'$(ShouldRunClientAssetsBuild)' == ''">true</ShouldRunClientAssetsBuild>

	</PropertyGroup>

	<Target Name="ClientAssetsRestore" BeforeTargets="$(ClientAssetsRestoreBeforeTargets)" Inputs="$(ClientAssetsRestoreInputs)" Outputs="$(ClientAssetsRestoreOutputs)">
		<Message Importance="high" Text="Running $(ClientAssetsRestoreCommand)..." />
		<Exec Command="$(ClientAssetsRestoreCommand)" WorkingDirectory="$(ClientAssetsDirectory)" />
	</Target>

	<ItemGroup>
		<ClientAssetsInputs Include="components\**\*.scss;styles\**\*.scss;components\**\*.ts;Scripts\**\*.ts" Exclude="$(DefaultItemExcludes)" />
	</ItemGroup>

	<Target Name="ClientAssetsBuild" Condition="'$(ShouldRunClientAssetsBuild)' == 'true'" DependsOnTargets="ClientAssetsRestore" BeforeTargets="AssignTargetPaths" Inputs="@(ClientAssetsInputs)" Outputs="$(IntermediateOutputPath)clientassetsbuild.complete.txt">

		<PropertyGroup>
			<_ClientAssetsOutputFullPath>$([System.IO.Path]::GetFullPath('$(ClientAssetsDirectory)'))/</_ClientAssetsOutputFullPath>
		</PropertyGroup>

		<Exec Command="$(ClientAssetsBuildCommand)" WorkingDirectory="$(ClientAssetsDirectory)" />

		<ItemGroup>
			<_ClientAssetsBuildOutput Include="$(ClientAssetsDirectory)**"></_ClientAssetsBuildOutput>
		</ItemGroup>

		<WriteLinesToFile File="$(IntermediateOutputPath)clientassetsbuild.complete.txt" Lines="@(_ClientAssetsBuildOutput)" />
	</Target>

	<Target Name="DefineClientAssets" AfterTargets="ClientAssetsBuild" DependsOnTargets="ResolveStaticWebAssetsConfiguration">
		<ItemGroup>
			<FileWrites Include="@(_ClientAssetsBuildOutput)" />
			<FileWrites Include="$(IntermediateOutputPath)clientassetsbuild.complete.txt" />

			<Content Condition="'$(TargetFramework)' != 'net6.0'" Include="@(_ClientAssetsBuildOutput)" Link="wwwroot\%(_ClientAssetsBuildOutput.RecursiveDir)\%(_ClientAssetsBuildOutput.FileName)%(_ClientAssetsBuildOutput.Extension)" />

		</ItemGroup>

		<!-- Note: We separate this target into two because content assets from outside the wwwroot folder won't get the right content root due to a bug/limitation
      within DiscoverStaticWebAssets. That doesn't matter for when the assets are being packaged, as the content root doesn't matter in that case, but will impact
      the ability to consume them from project references. As a workaround, we are using the Task directly on this package, to make sure this scenario works. In a future
      release we will address this by aligning DiscoverStaticWebAssets behavior with DefineStaticWebAssets to follow the same heuristics for determining the content root.
    -->
		<DefineStaticWebAssets Condition="'$(TargetFramework)' == 'net6.0'" CandidateAssets="@(_ClientAssetsBuildOutput)" SourceId="$(PackageId)" SourceType="Computed" ContentRoot="$(_ClientAssetsOutputFullPath)" BasePath="$(StaticWebAssetBasePath)">
			<Output TaskParameter="Assets" ItemName="StaticWebAsset" />
		</DefineStaticWebAssets>

	</Target>

</Project>