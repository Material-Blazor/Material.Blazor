<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<TargetFramework>netstandard2.1</TargetFramework>
		<RazorLangVersion>3.0</RazorLangVersion>
		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>
		<VersionPrefix>1.0.0</VersionPrefix>
		<VersionSuffix></VersionSuffix>
		<PackageLicenseFile></PackageLicenseFile>
		<Authors>Simon Ziegler of Dioptra and Mark Stega of Optimium Health</Authors>
		<Company>Material.Blazor</Company>
		<Description>A lightweight Material Theme component library for Blazor. Intended to adhere rigorously to Material Theme guidelines in https://material.io. API and other documentation can be found at https://material-blazor.com/docs.</Description>
		<RepositoryUrl>https://github.com/Material-Blazor/Material.Blazor</RepositoryUrl>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageReleaseNotes></PackageReleaseNotes>
		<NeutralLanguage>en</NeutralLanguage>
		<Copyright>Dioptra and Optimium Health</Copyright>
		<PackageProjectUrl>https://material-blazor.com</PackageProjectUrl>
		<Product>Material.Blazor</Product>
		<UserSecretsId>d7509b6c-bc5c-4a56-a750-09c8ae4aeb85</UserSecretsId>
	</PropertyGroup>

	<ItemGroup>
		<Content Remove="tsconfig.json" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.AspNetCore.Components" Version="3.1.6" />
		<PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="3.1.6" />
	</ItemGroup>

	<ItemGroup>
		<None Include="tsconfig.json" />
	</ItemGroup>

	<ItemGroup>
		<None Update="Scripts\MaterialBlazor.ts">
			<SubType>Code</SubType>
		</None>
	</ItemGroup>

	<Target Name="BuildNpmBase">
		<!-- Build the base for both styles and scripts: this is essentially just the npm install -->
		<Exec Command="docker build -q -t mb_static_assets -f npm.df ." />
	</Target>
	
	<ItemGroup>
		<InputStaticAssetsCss Include="**\*.css;**\*.scss" Exclude="wwwroot\**\*;obj\**\*;bin\**\*" />
		<OutputStaticAssetsCss Include="wwwroot\bundled.min.css;wwwroot\unbundled.min.css;wwwroot\unbundled.css;" />
	</ItemGroup>

	<Target Name="BuildStyles" BeforeTargets="BeforeBuild" Inputs="@(InputStaticAssetsCss)" Outputs="@(OutputStaticAssetsCss)" DependsOnTargets="BuildNpmBase">
		<!-- We need to remove our tmp output dir, otherwise the copy command from docker to host will mess things up -->
		<Message Importance="high" Text="$(BaseIntermediateOutputPath)static_assets_css" />
		<ItemGroup>
			<TmpFiles Include="$(BaseIntermediateOutputPath)static_assets_css\*" />
		</ItemGroup>
		<Delete Files="@(TmpFiles)" />
		<RemoveDir Directories="$(BaseIntermediateOutputPath)static_assets_css" />
		<!-- This is the actual build of assets -->
		<Exec Command="docker build -q -t mb_static_assets_css -f npm_css.df ." />
		<!-- Now we want to copy all output assets from the container to the host -->
		<!-- Remove container instance in case anything went wrong in a previous run, so nevermind if it fails -->
		<Exec Command="docker rm -f tmp_css" ContinueOnError="true" />
		<!-- Create a fresh container instance -->
		<Exec Command="docker create -ti --name tmp_css mb_static_assets_css bash" />
		<!-- Copy relevant output files into tmp folder -->
		<Exec Command="docker cp tmp_css:/src/wwwroot &quot;$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_css&quot;" />
		<!-- Remove container instance -->
		<Exec Command="docker rm -f tmp_css" />
		<ItemGroup>
			<GeneratedStaticAssetsCss Include="$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_css\*" />
		</ItemGroup>
		<!-- Copy files from tmp folder to wwwroot -->
		<Touch Files="@(GeneratedStaticAssetsCss)" ForceTouch="true" />
		<Copy SourceFiles="@(GeneratedStaticAssetsCss)" DestinationFolder="$(ProjectDir)wwwroot" />
		<RemoveDir Directories="$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_css" />
	</Target>

	<ItemGroup>
		<InputStaticAssetsJs Include="**\*.js;**\*.ts;" Exclude="wwwroot\**\*;obj\**\*;bin\**\*" />
		<OutputStaticAssetsJs Include="wwwroot\bundled.min.js;wwwroot\unbundled.min.js;wwwroot\unbundled.js;" />
	</ItemGroup>

	<Target Name="BuildScripts" BeforeTargets="BeforeBuild" Inputs="@(InputStaticAssetsJs)" Outputs="@(OutputStaticAssetsJs)" DependsOnTargets="BuildNpmBase">
		<!-- We need to remove our tmp output dir, otherwise the copy command from docker to host will mess things up -->
		<ItemGroup>
			<TmpFiles Include="$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_js\*" />
		</ItemGroup>
		<Delete Files="@(TmpFiles)" />
		<RemoveDir Directories="$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_js" />
		<!-- This is the actual build of assets -->
		<Exec Command="docker build -q -t mb_static_assets_js -f npm_js.df ." />
		<!-- Now we want to copy all output assets from the container to the host -->
		<!-- Remove container instance in case anything went wrong in a previous run, so nevermind if it fails -->
		<Exec Command="docker rm -f tmp_js" ContinueOnError="true" />
		<!-- Create a fresh container instance -->
		<Exec Command="docker create -ti --name tmp_js mb_static_assets_js bash" />
		<!-- Copy relevant output files into tmp folder -->
		<Exec Command="docker cp tmp_js:/src/wwwroot &quot;$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_js&quot;" />
		<!-- Remove container instance -->
		<Exec Command="docker rm -f tmp_js" />
		<ItemGroup>
			<GeneratedStaticAssetsJs Include="$(ProjectDir)$(BaseIntermediateOutputPath)static_assets_js\*" />
		</ItemGroup>
		<!-- Copy files from tmp folder to wwwroot -->
		<Touch Files="@(GeneratedStaticAssetsJs)" ForceTouch="true" />
		<Copy SourceFiles="@(GeneratedStaticAssetsJs)" DestinationFolder="$(ProjectDir)wwwroot" />
	</Target>

	<ProjectExtensions>
		<VisualStudio>
			<UserProperties />
		</VisualStudio>
	</ProjectExtensions>

</Project>
