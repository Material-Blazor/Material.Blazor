@page "/fileupload"

@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.IO

@inject ILogger<FileUpload> Logger
@inject IWebHostEnvironment Environment


<DemonstrationPage ComponentName="FileUpload"
                   DemoComponent="@this"
                   RequiresDisableSelection="true"
                   Title="File Upload Demontration">
    <Description>
        <p>
            Demonstrates a Material.Blazor file upload that wraps the <code>InputFile</code> component but styled per material.
        </p>
    </Description>

    <Controls>
        <p>
            <MBCheckbox @bind-Value="@Multiple" Label="Load Multiple Files" />
        </p>
    </Controls>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-6">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Button Style
                    </h2>

                    <div>
                        <p>
                            <MBFileUpload ButtonStyle="@MBButtonStyle.Outlined"
                                          LeadingIcon="file_upload"
                                          Multiple="@Multiple"
                                          Label="@Label"
                                          OnLoadFiles="@OnLoadFiles" />
                        </p>
                    </div>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-6">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Drag and Drop Style
                    </h2>

                    <div>
                        <p>
                            <MBFileUpload LeadingIcon="file_upload"
                                          DragAndDropArea="true"
                                          Multiple="@Multiple"
                                          Label="@Label"
                                          OnLoadFiles="@OnLoadFiles" />
                        </p>
                    </div>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-12">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Uploaded Files
                    </h2>

                    <div>
                        @if (!string.IsNullOrWhiteSpace(LoadingMessage))
                        {
                            <p>@LoadingMessage</p>
                        }
                        else
                        {
                            <ul>
                                @foreach (var file in LoadedFiles)
                                {
                                    <li style="margin-bottom: 12px;">
                                        <ul>
                                            <li>Name: @file.Name</li>
                                            <li>Last modified: @file.LastModified.ToString()</li>
                                            <li>Size (bytes): @file.Size.ToString("N0")</li>
                                            <li>Content type: @file.ContentType</li>
                                        </ul>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>



@code {
    private bool Multiple { get; set; }

    private List<IBrowserFile> LoadedFiles { get; set; } = new();
    private string LoadingMessage { get; set; }
    private string Label => Multiple ? "Choose multiple files" : "Choose one file";


    private Task OnLoadFiles(InputFileChangeEventArgs e)
    {
        LoadingMessage = "Uploading...";
        LoadedFiles.Clear();

        var files = e.GetMultipleFiles();

        foreach (var file in files)
        {
            LoadedFiles.Add(file);

            var trustedFileNameForFileStorage = Path.GetRandomFileName();
            
            var path = Path.Combine(Environment.ContentRootPath,
                    Environment.EnvironmentName, "unsafe_uploads",
                    trustedFileNameForFileStorage);
        }

        LoadingMessage = "";

        return Task.CompletedTask;
    }
}