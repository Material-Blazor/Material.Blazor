@page "/bladeset"

@implements IDisposable

@inject IMBToastService ToastService



<DemonstrationPage ComponentName="Blades"
                   DemoComponent="@this"
                   RequiresDisableSelection="false"
                   Title="Blades Demonstration">
    <Description>
        <p>
            Demonstrates Material Blazor's blade functionality.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Add Blades
                    </h2>

                    @foreach (var bladeReference in BladeReferences)
                    {
                        <p>
                            <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                      Disabled="@Blades.BladeReferences.Contains(bladeReference)"
                                      @key="@bladeReference"
                                      Label="@GetAddLabel(bladeReference)"
                                      @onclick="@(() => AddSingleBlade(bladeReference))" />
                        </p>
                    }

                    <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                              Disabled="@Blades.BladeReferences.Any()"
                              Label="Add All Blades"
                              @onclick="@AddAllBlades" />
                </Primary>
            </MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Remove Blades
                    </h2>

                    @foreach (var bladeReference in BladeReferences)
                    {
                        <p>
                            <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                                      Disabled="@(!Blades.BladeReferences.Contains(bladeReference))"
                                      @key="@bladeReference"
                                      Label="@GetRemoveLabel(bladeReference)"
                                      @onclick="@(() => RemoveSingleBlade(bladeReference))" />
                        </p>
                    }

                    <MBButton ButtonStyle="@MBButtonStyle.Outlined"
                              Disabled="@(Blades.BladeReferences.Count() < BladeReferences.Length)"
                              Label="Remove All Blades"
                              @onclick="@RemoveAllBlades" />
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>



@code {
    [CascadingParameter] private MBBladeSet Blades { get; set; }

    public readonly static string[] BladeReferences = { "One", "Two", "Three" };

    private string GetAddLabel(string reference) => $"Add Blade {reference}";

    private string GetRemoveLabel(string reference) => $"Remove Blade {reference}";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        Blades.BladeSetChanged += HandleBladeSetChange;
    }


    public void Dispose() => Blades.BladeSetChanged -= HandleBladeSetChange;


    private void HandleBladeSetChange(object sender, EventArgs e) => InvokeAsync(StateHasChanged);


    private void AddAllBlades()
    {
        foreach (var bladeReference in BladeReferences)
        {
            Blades.AddBlade(bladeReference, "demo-blade");
        }

        ToastService.ShowToast(heading: "Blade action", message: "Add all blades", level: MBToastLevel.Success, showIcon: false);
    }


    private void AddSingleBlade(string bladeReference)
    {
        Blades.AddBlade(bladeReference, "demo-blade");

        ToastService.ShowToast(heading: "Blade action", message: "Add single blade: " + bladeReference, level: MBToastLevel.Success, showIcon: false);
    }


    private void RemoveAllBlades()
    {
        foreach (var bladeReference in BladeReferences)
        {
            Blades.RemoveBlade(bladeReference);
        }

        ToastService.ShowToast(heading: "Blade action", message: "Removed all blades", level: MBToastLevel.Success, showIcon: false);
    }


    private void RemoveSingleBlade(string bladeReference)
    {
        Blades.RemoveBlade(bladeReference);

        ToastService.ShowToast(heading: "Blade action", message: "Remove single blade: " + bladeReference, level: MBToastLevel.Success, showIcon: false);
    }
}