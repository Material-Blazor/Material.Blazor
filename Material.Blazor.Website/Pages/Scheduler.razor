@page "/scheduler"
@using System.Drawing

@inject IMBToastService ToastService

<DemonstrationPage ComponentName="Scheduler"
                   DemoComponent="@this"
                   DetailedArticle="Scheduler"
                   Title="Scheduler Demonstration (EXPERIMENTAL)">
    <Description>
        <p>
            Shows a Scheduler using many of the Scheduler features.
        </p>
        <p>
            This is an EXPERIMENTAL component. It's API is subject to change. It's styling is not yet
            Material. It will not be released as part of Blazor 2.0.0 except in EXPERIMENTAL form.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-12">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Scheduler using parameter defaults
                    </h2>

                    <MBScheduler Appointments="@appointmentList1"
                        OnDragEnd="@OnDragEnd1" />

                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-12">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Scheduler using a single column and just one appointment
                    </h2>

                    <MBScheduler
                        Appointments="@appointmentList2"
                        NumberOfSubColumns="1"
                        OnDragEnd="@OnDragEnd2" />

                </Primary>
            </MBCard>
        </div>

    </PageContent>
</DemonstrationPage>

@code {
    List<MBSchedulerAppointment> appointmentList1 = new List<MBSchedulerAppointment>()
    {

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.Blue,
            Column = 1,
            EndTime = new DateTime(2022, 4, 4, 17, 0, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 4, 7, 0, 0),
            Title = "XYZ practice block time",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.Blue,
            Column = 1,
            EndTime = new DateTime(2022, 4, 5, 12, 0, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 5, 7, 0, 0),
            Title = "XYZ practice block time",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.Blue,
            Column = 1,
            EndTime = new DateTime(2022, 4, 8, 17, 0, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 8, 7, 0, 0),
            Title = "XYZ practice block time",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.Purple,
            Column = 2,
            EndTime = new DateTime(2022, 4, 4, 10, 30, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 4, 7, 0, 0),
            Title = "Smith",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.LightGreen,
            Column = 2,
            EndTime = new DateTime(2022, 4, 4, 12, 30, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 4, 10, 30, 0),
            Title = "Jenkins",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.LightGreen,
            Column = 2,
            EndTime = new DateTime(2022, 4, 5, 10, 30, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 5, 7, 0, 0),
            Title = "Jenkins",
            Uid = Guid.NewGuid()
        },

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.LightCoral,
            Column = 2,
            EndTime = new DateTime(2022, 4, 5, 14, 30, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 5, 12, 30, 0),
            Title = "Adams",
            Uid = Guid.NewGuid()
        }
    };

    List<MBSchedulerAppointment> appointmentList2 = new List<MBSchedulerAppointment>()
    {

        new MBSchedulerAppointment
        {
            BackgroundColor = Color.Purple,
            Column = 1,
            EndTime = new DateTime(2022, 4, 4, 10, 30, 0),
            ForegroundColor = Color.White,
            StartTime = new DateTime(2022, 4, 4, 7, 0, 0),
            Title = "Smith",
            Uid = Guid.NewGuid()
        }
    };

    public Scheduler()
    {
    }

    public async Task OnDragEnd1(MBScheduler.DragEndInfo dei)
    {
        await Task.CompletedTask;
        List<MBSchedulerAppointment> newAppointmentList = new List<MBSchedulerAppointment>();

        foreach (var appt in appointmentList1)
        {
            if (appt.Uid == dei.appointment.Uid)
            {
                // There is no validation in this demo but this is where it should
                // be performed
                appt.StartTime = dei.newStartTime;
                appt.EndTime = dei.newEndTime;
            }
            newAppointmentList.Add(appt);
        }
        appointmentList1 = newAppointmentList;
        StateHasChanged();
    }

    public async Task OnDragEnd2(MBScheduler.DragEndInfo dei)
    {
        await Task.CompletedTask;
        List<MBSchedulerAppointment> newAppointmentList = new List<MBSchedulerAppointment>();

        foreach (var appt in appointmentList2)
        {
            if (appt.Uid == dei.appointment.Uid)
            {
                // There is no validation in this demo but this is where it should
                // be performed
                appt.StartTime = dei.newStartTime;
                appt.EndTime = dei.newEndTime;
            }
            newAppointmentList.Add(appt);
        }
        appointmentList2 = newAppointmentList;
        StateHasChanged();
    }
}
