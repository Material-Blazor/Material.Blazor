@page "/debouncedtextfield"

@inject IMBSnackbarService SnackbarService

@using System.Runtime.InteropServices


<DemonstrationPage ComponentName="DebouncedTextField"
                   DemoComponent="@this"
                   MinDensity="MBDensity.Minus4"
                   RequiresDisableSelection="true"
                   Title="Debounced Text Field Demonstration">
    <Description>
        <p>
            Shows debounced text field which is a Plus component.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Debounce Intervals
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        <p>Set the debounce period you want.</p>
                    </h3>

                    <p>
                        <MBRadioButtonGroup @bind-Value="@DebouncePeriod"
                                            Items="DebouncePeriods"
                                            ItemValidation="@MBItemValidation.DefaultToFirst" />
                    </p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Debounced text field
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        <p>
                            Each of these can display as Filled or Outlined and with
                            the full variety of icon foundries. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
                        </p>
                    </h3>

                    <p>
                        <MBDebouncedTextField @bind-Value="@Debounced"
                                              DebounceInterval="@DebouncePeriod"
                                              Label="Debounced Text"
                                              LeadingIcon="account_balance_wallet"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>
                    <p>Debounced text: <em>'@Debounced'</em></p>

                    <p>
                        <MBDebouncedTextField @bind-Value="@Prefilled"
                                              DebounceInterval="@DebouncePeriod"
                                              Label="Pre-filled"
                                              LeadingIcon="account_balance_wallet"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>
                    <p>Prefilled text: <em>'@Prefilled'</em></p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p>
                        <MBDebouncedTextField @bind-Value="@PopupHelperText"
                                              DebounceInterval="@DebouncePeriod"
                                              HelperText="Some helper text that pops up"
                                              Label="Popup Helper Text" />
                    </p>

                    <p>
                        <MBDebouncedTextField @bind-Value="@PersistentHelperText"
                                              DebounceInterval="@DebouncePeriod"
                                              HelperText="Some persistent helper text"
                                              HelperTextPersistent="true"
                                              Label="Persistent Helper Text" />
                    </p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Two-way binding
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Demonstrates two-way binding.
                    </h3>

                    <p>
                        <MBDebouncedTextField @bind-Value="@TwoWayBinding"
                                              DebounceInterval="@DebouncePeriod"
                                              Label="Two Way Binding" />
                    </p>

                    <p>
                        <MBDebouncedTextField @bind-Value="@TwoWayBinding"
                                              DebounceInterval="@DebouncePeriod"
                                              Label="Two Way Binding" />
                    </p>
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>


@code {
    private MBSelectElement<int>[] DebouncePeriods = new MBSelectElement<int>[]
    {
        new MBSelectElement<int> { SelectedValue = 300, Label = "300 ms" },
        new MBSelectElement<int> { SelectedValue = 500, Label = "500 ms" },
        new MBSelectElement<int> { SelectedValue = 1000, Label = "1,000 ms" }
        };



    private string _debounced;
    private string Debounced
    {
        get => _debounced;
        set
        {
            _debounced = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Debounced text field " + $"Value: '{_debounced}'");
        }
    }


    private string _prefilled = "Initial Value";
    private string Prefilled
    {
        get => _prefilled;
        set
        {
            _prefilled = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Prefilled " + $"Value: '{_prefilled}'");
        }
    }


    private string _popupHelperText;
    private string PopupHelperText
    {
        get => _popupHelperText;
        set
        {
            _popupHelperText = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Popup Helper Text " + $"Value: '{_popupHelperText}'");
        }
    }


    private string _persistentHelperText;
    private string PersistentHelperText
    {
        get => _persistentHelperText;
        set
        {
            _persistentHelperText = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Persistent Helper Text " + $"Value: '{_persistentHelperText}'");
        }
    }


    private string _twoWayBinding;
    private string TwoWayBinding
    {
        get => _twoWayBinding;
        set
        {
            _twoWayBinding = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Two Way Binding " + $"Value: '{_twoWayBinding}'");
        }
    }

    private int DebouncePeriod { get; set; } = 300;
}