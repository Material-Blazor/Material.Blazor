@page "/datepicker"

@inject IMBToastService ToastService

@using Nager.Date



<DemonstrationPage ComponentName="DatePicker"
                   DemoComponent="@this"
                   MinDensity="MBDensity.Minus4"
                   Title="Date Picker Demonstration"
                   RequiresDisableSelection="true">
    <Description>
        <p>
            The Date Picker is a Plus components, using Material.Blazor's implementation of the <a href="https://material.io/components/pickers" target="_blank">Material Date Picker</a>.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Button Styles
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Default and explicit button styles.
                    </h3>

                    <p>
                        <MBDatePicker @bind-Value="@Filled"
                                      Label="Filled"
                                      DateFormat="ddd MMM dd, yyyy"
                                      MaxDate="@Max"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      MinDate="@Min"
                                      SelectInputStyle="MBSelectInputStyle.Filled" />
                    </p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Button Styles
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Default and explicit button styles.
                    </h3>

                    <p>
                        <MBDatePicker @bind-Value="@Outlined"
                                      Label="Weekdays Outlined"
                                      DateFormat="ddd MMM dd, yyyy"
                                      DateSelectionCriteria="MBDateSelectionCriteria.WeekdaysOnly"
                                      SelectInputStyle="MBSelectInputStyle.Outlined"
                                      MaxDate="@Max"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      MinDate="@Min" />
                    </p>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Selectable dates
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Control which dates are selectable, first with Mondays, Wednesdays and Fridays and second with business days in England, using the <a href="https://www.nuget.org/packages/Nager.Date/" target="_blank">Nager.Date nuget package</a>.
                    </h3>

                    <p>
                        <MBDatePicker @bind-Value="@MonWedFri"
                                      Label="Mon, Wed, or Fri"
                                      DateFormat="ddd MMM dd, yyyy"
                                      DateIsSelectable="(date) => date.DayOfWeek is DayOfWeek.Monday or DayOfWeek.Wednesday or DayOfWeek.Friday"
                                      SelectInputStyle="MBSelectInputStyle.Outlined"
                                      MaxDate="@Max"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      MinDate="@Min" />
                    </p>

                    <p>
                        <MBDatePicker @bind-Value="@EnglandBusinessDay"
                                      Label="England Business Day"
                                      DateFormat="ddd MMM dd, yyyy"
                                      DateIsSelectable="@((date) => !DateSystem.IsPublicHoliday(date, CountryCode.GB, "GB-ENG") && !DateSystem.IsWeekend(date, CountryCode.GB))"
                                      SelectInputStyle="MBSelectInputStyle.Outlined"
                                      MaxDate="@Max"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      MinDate="@Min" />
                    </p>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Custom style
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        In a typical month, the first day of that month doesn't coincide with the first day of the week.
                        Similarly, the last week of a month will usually end with a few days in the next month.

                        By default, this date picker component will not show these days. You can override this behavior by overriding the CSS classes <code>mb-dp-day-pad__button_earlier_month</code> and <code>mb-dp-day-pad__button_later_month</code>.
                    </h3>

                    <p>
                        <style>
                            .custom-style .mb-dp-day-pad__button_earlier_month {
                                opacity: .3;
                                visibility: unset !important;
                                font-style: italic;
                            }

                            .custom-style .mb-dp-day-pad__button_later_month {
                                opacity: .7;
                                visibility: unset !important;
                            }
                        </style>
                        <MBDatePicker @bind-Value="@CustomStyle"
                                      Label="Custom style"
                                      class="custom-style"
                                      DateFormat="ddd MMM dd, yyyy"
                                      DateSelectionCriteria="MBDateSelectionCriteria.WeekdaysOnly"
                                      SelectInputStyle="MBSelectInputStyle.Outlined"
                                      MaxDate="@Max"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      MinDate="@Min" />
                    </p>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Default value with SupressDefaultValue set to false
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        The DatePicker component supports the entire range from <code>DateTime.MinValue</code> to <code>DateTime.MaxValue</code>. For a good user experience, remember to set minimum/maximum selectable value to meaningful values.
                    </h3>

                    <p>
                        <MBDatePicker @bind-Value="@Default"
                                      DateFormat="ddd MMM dd, yyyy"
                                      Label="Default"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      SelectInputStyle="MBSelectInputStyle.Outlined" />
                    </p>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Default value with SupressDefaultValue set to true
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        The DatePicker component supports the entire range from <code>DateTime.MinValue</code> to <code>DateTime.MaxValue</code>. For a good user experience, remember to set minimum/maximum selectable value to meaningful values.
                    </h3>

                    <p>
                        <MBDatePicker @bind-Value="@Default"
                                      DateFormat="ddd MMM dd, yyyy"
                                      Label="Default"
                                      MenuSurfacePositioning="@MBMenuSurfacePositioning.Fixed"
                                      SupressDefaultDate="true"
                                      SelectInputStyle="MBSelectInputStyle.Outlined" />
                    </p>
                </Primary>
            </MBCard>
        </div>

    </PageContent>
</DemonstrationPage>



@code {
    private DateTime _filled = DateTime.Today.AddMonths(1);
    private DateTime Filled
    {
        get => _filled;
        set
        {
            _filled = value;

            ToastService.ShowToast(heading: "Filled Date Picker", message: $"Value: {_filled.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private DateTime _outlined = DateTime.Today.AddMonths(1);
    private DateTime Outlined
    {
        get => _outlined;
        set
        {
            _outlined = value;

            ToastService.ShowToast(heading: "Outlined Date Picker", message: $"Value: {_outlined.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private DateTime _monWedFri = new DateTime(2021, 1, 8);
    private DateTime MonWedFri
    {
        get => _monWedFri;
        set
        {
            _monWedFri = value;

            ToastService.ShowToast(heading: "Mon, Wed, Fri selectable", message: $"Value: {_monWedFri.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private DateTime _englandBusinessDay = new DateTime(2021, 4, 6);
    private DateTime EnglandBusinessDay
    {
        get => _englandBusinessDay;
        set
        {
            _englandBusinessDay = value;

            ToastService.ShowToast(heading: "England Business Day selectable", message: $"Value: {_englandBusinessDay.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private DateTime _customStyle = new DateTime(2021, 1, 8);
    private DateTime CustomStyle
    {
        get => _customStyle;
        set
        {
            _customStyle = value;

            ToastService.ShowToast(heading: "Custom Style", message: $"Value: {_customStyle.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }

    private DateTime _default = default;
    private DateTime Default
    {
        get => _default;
        set
        {
            _default = value;

            ToastService.ShowToast(heading: "Default", message: $"Value: {_default.ToLongDateString()}", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private DateTime Min { get; set; } = new DateTime(2019, 12, 14);
    private DateTime Max { get; set; } = new DateTime(2097, 6, 14);
}