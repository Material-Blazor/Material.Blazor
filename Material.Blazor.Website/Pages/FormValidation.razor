@page "/formvalidation"

@using System.ComponentModel.DataAnnotations

@inject IMBToastService ToastService



<DemonstrationPage DemoComponent="@this"
                   DetailedArticle="FormValidation"
                   Title="Form Validation">
    <Description>
        <p>
            Demonstrates native Blazor form validation displayed in the Material Theme style.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-6-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-phone">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Validated Form
                    </h2>

                    <EditForm Model="@Model">
                        <DataAnnotationsValidator />

                        <div class="mdc-layout-grid__inner">
                            <div class="mdc-layout-grid__cell--span-12" style="margin-top: 6px;">
                                <MBTextField @bind-Value="@Model.Text"
                                             Label="Text Field"
                                             TextInputStyle="@MBTextInputStyle.Outlined"
                                             ValidationMessageFor="@(() => Model.Text)" />
                            </div>
                            <div class="mdc-layout-grid__cell--span-12">
                                <MBTextArea @bind-Value="@Model.Area"
                                            HelperText="Min 20 Characters"
                                            HelperTextPersistent="false"
                                            Label="Text Area"
                                            TextInputStyle="@MBTextInputStyle.Outlined"
                                            ValidationMessageFor="@(() => Model.Area)" />
                            </div>
                            <div class="mdc-layout-grid__cell--span-12">
                                <MBAutocompleteTextField @bind-Value="@Model.Autocomplete"
                                                         Label="Autocomplete Text Field"
                                                         SelectItems="@Fruits"
                                                         TextInputStyle="@MBTextInputStyle.Outlined"
                                                         ValidationMessageFor="@(() => Model.Autocomplete)" />
                            </div>
                            <div class="mdc-layout-grid__cell--span-12">
                                <MBNumericDoubleField @bind-Value="@Model.NumericDouble"
                                                      DecimalPlaces="2"
                                                      Label="Numeric Double"
                                                      NumericFormat="N2"
                                                      TextInputStyle="@MBTextInputStyle.Outlined"
                                                      ValidationMessageFor="@(() => Model.NumericDouble)" />
                            </div>
                            <div class="mdc-layout-grid__cell--span-12">
                                <MBNumericIntField @bind-Value="@Model.NumericInt"
                                                   Label="Numeric Int"
                                                   NumericFormat="N0"
                                                   TextInputStyle="@MBTextInputStyle.Outlined"
                                                   ValidationMessageFor="@(() => Model.NumericInt)" />
                            </div>
                            <div class="mdc-layout-grid__cell--span-12" style="text-align: right;">
                                <MBButton Label="submit"
                                          style="margin: 0.75em 0.25em 0.25em 0.25em;"
                                          type="submit" />
                                <MBButton Label="cancel"
                                          style="margin: 0.75em 0.25em 0.25em 0.25em;" />
                            </div>
                        </div>
                    </EditForm>
                </Primary>
            </MBCard>
        </div>

        <div class="mdc-layout-grid__cell--span-6-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-phone">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Form Data Model
                    </h2>

                    <div style="overflow-x: auto;">
                        <pre>
                        <code>
private class FormModel
{
    [Required(ErrorMessage = "The text field is required")]
    public string Text { get; set; }


    [Required(ErrorMessage = "The text area is required")]
    [MinLength(20, ErrorMessage ="The text area's minimum length is 20 characters")]
    public string Area { get; set; }


    [Required(ErrorMessage = "The autocomplete text field is required")]
    public string Autocomplete { get; set; }


    // Add decimal point to force double comparison rather than int which rounds before comparing
    [Range(0.0, 100.0, ErrorMessage = "Must be from 0 to 100")]
    public double NumericDouble { get; set; }


    // No decimal points because integer rounding is required
    [Range(0, 100, ErrorMessage = "Must be from 0 to 100")]
    public int NumericInt { get; set; }
}
                            </code>
                        </pre>
                    </div>
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>



@code {
    public string[] Fruits = { "Avocado", "Banana", "Blackberry", "Blueberry", "Cantaloupe", "Cherry", "Clementine", "Dragonfruit", "Fig", "Grape", "Guava", "Honeydew", "Huckleberry", "Jujube", "Kiwi", "Kumquat", "Lime", "Nectarine", "Orange", "Papaya", "Passion Fruit", "Pineapple", "Plum", "Pomegranate", "Raspberry", "Satsuma", "Strawberry", "Tangerine", "Tomato", "Watermelon" };

    public class FormModel
    {
        [Required(ErrorMessage = "The text field is required")]
        public string Text { get; set; }


        [Required(ErrorMessage = "The text area is required")]
        [MinLength(20, ErrorMessage = "The text area's minimum length is 20 characters")]
        public string Area { get; set; }


        [Required(ErrorMessage = "The autocomplete text field is required")]
        public string Autocomplete { get; set; }


        // Add decimal point to force double comparison rather than int which rounds before comparing
        [Range(0.0, 100.0, ErrorMessage = "Must be from 0 to 100")]
        public double NumericDouble { get; set; }


        // No decimal points because integer rounding is required
        [Range(0, 100, ErrorMessage = "Must be from 0 to 100")]
        public int NumericInt { get; set; }
    }

    private FormModel Model { get; set; } = new();
}