@page "/autocompletetextfield"

@inject IMBToastService ToastService

@using System.Runtime.InteropServices


<DemonstrationPage ComponentName="AutocompleteTextField"
                   DemoComponent="@this"
                   MinDensity="MBDensity.Minus4"
                   RequiresDisableSelection="true"
                   Title="Autocomplete Text Field Demonstration">
    <Description>
        <p>
            Shows autocomplete text fields which are Plus components.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Autocompletes
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Three varieties - one disallowing blank selection, one allowing, and the last ignoring whitespace in searches.
                        Each of these can display as Filled or Outlined and with
                        the full variety of icon foundries. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
                    </h3>

                    <p><MBAutocompleteTextField @bind-Value="@Autocomplete1" Label="Blanks disallowed" TextInputStyle="MBTextInputStyle.Filled" SelectItems="@Fruits" LeadingIcon="alarm" AllowBlankResult="false" /></p>
                    <p><MBAutocompleteTextField @bind-Value="@Autocomplete2" Label="Blanks allowed" TextInputStyle="MBTextInputStyle.Outlined" SelectItems="@Fruits" AllowBlankResult="true" TrailingIcon="fa-dragon" IconFoundry="MBIconHelper.FAFoundry(relativeSize: MBIconFARelativeSize.Large)" /></p>
                    <p><MBAutocompleteTextField @bind-Value="@Autocomplete3" Label="Whitespace ignored" TextInputStyle="MBTextInputStyle.Filled" SelectItems="@Fruits" AllowBlankResult="true" IgnoreWhitespace="true" /></p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p><MBAutocompleteTextField Label="Popup Helper Text" @bind-Value="@PopupHelperText" SelectItems="@Fruits" HelperText="Some helper text that pops up" /></p>
                    <p><MBAutocompleteTextField Label="Persistent Helper Text" @bind-Value="@PersistentHelperText" SelectItems="@Fruits" HelperText="Some persistent helper text" HelperTextPersistent="true" /></p>
                </Primary>
            </MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Allow custom value
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        The auto-complete items may only be suggestions, but custom values may be permitted.
                    </h3>

                    <style>
                        li.mb-autocomplete-custom-value + li {
                            border-top: 1px solid darkgray;
                        }
                    </style>

                    <p><MBAutocompleteTextField Label="Any value is valid" @bind-Value="@CustomValue" SelectItems="@Fruits" AllowCustomValue="true" /></p>
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>


@code {
    string[] Fruits = { "Avocado", "Banana", "Blackberry", "Blueberry", "Cantaloupe", "Cherry", "Clementine", "Dragonfruit", "Fig", "Grape", "Guava", "Honeydew", "Huckleberry", "Jujube", "Kiwi", "Kumquat", "Lime", "Nectarine", "Orange", "Papaya", "Passion Fruit", "Pineapple", "Plum", "Pomegranate", "Raspberry", "Satsuma", "Strawberry", "Tangerine", "Tomato", "Watermelon" };

    private string _autocomplete1;
    private string Autocomplete1
    {
        get => _autocomplete1;
        set
        {
            _autocomplete1 = value;

            ToastService.ShowToast(heading: "Autocomplete blanks disallowed", message: $"Value: '{_autocomplete1}'", level: MBToastLevel.Success, showIcon: false);
        }
    }



    private string _autocomplete2;
    private string Autocomplete2
    {
        get => _autocomplete2;
        set
        {
            _autocomplete2 = value;

            ToastService.ShowToast(heading: "Autocomplete blanks allowed", message: $"Value: '{_autocomplete2}'", level: MBToastLevel.Success, showIcon: false);
        }
    }



    private string _autocomplete3;
    private string Autocomplete3
    {
        get => _autocomplete3;
        set
        {
            _autocomplete3 = value;

            ToastService.ShowToast(heading: "Autocomplete whitespace ignored", message: $"Value: '{_autocomplete3}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private string _popupHelperText = "Avocado";
    private string PopupHelperText
    {
        get => _popupHelperText;
        set
        {
            _popupHelperText = value;

            ToastService.ShowToast(heading: "Popup Helper Text", message: $"Value: '{_popupHelperText}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private string _customValue = "Customberry";
    private string CustomValue
    {
        get => _customValue;
        set
        {
            _customValue = value;

            ToastService.ShowToast(heading: "Custom Value", message: $"Value: '{_customValue}'", level: MBToastLevel.Success, showIcon: false);
        }
    }


    private string _persistentHelperText = "Banana";
    private string PersistentHelperText
    {
        get => _persistentHelperText;
        set
        {
            _persistentHelperText = value;

            ToastService.ShowToast(heading: "Persistent Helper Text", message: $"Value: '{_persistentHelperText}'", level: MBToastLevel.Success, showIcon: false);
        }
    }
}