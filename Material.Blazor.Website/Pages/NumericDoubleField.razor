@page "/numericdoublefield"

@inject IMBSnackbarService SnackbarService

@using System.Runtime.InteropServices


<DemonstrationPage ComponentName="NumericDoubleField"
                   DemoComponent="@this"
                   MinDensity="MBDensity.Minus4"
                   RequiresDisableSelection="true"
                   Title="Numeric Double Field Demonstration">
    <Description>
        <p>
            Shows numeric double fields, which are Plus components.
            Each of these can display as Filled or Outlined and with
            the full variety of icon foundries. These are used across the page but it we don't attempt to show each variant everywhere - see the Text Field demo for this.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Standard Formatted Numerics
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        A range of numeric double fields using formats for non focused input.
                    </h3>

                    <p>
                        <MBNumericDoubleField @bind-Value="@DoubleValue"
                                              DecimalPlaces="2"
                                              Label="Double 2dp"
                                              NumericFormat="N2"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MBNumericDoubleField @bind-Value="@MoneyByFormat"
                                              DecimalPlaces="2"
                                              Label="Money by format"
                                              NumericFormat="C2"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MBNumericDoubleField @bind-Value="@MoneyByPrefix"
                                              DecimalPlaces="2"
                                              Label="Money by prefix"
                                              NumericFormat="N2"
                                              Prefix="£"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Scaled Formatted Numerics
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Percentage and basis point numerics can be editted either using a prefix or standard formatting (in the case of percentages only).
                        A figure of "12.3%" results in a double value of "0.123" and one of "34.5 bp" results in a double value of "0.00345".
                    </h3>

                    <p>
                        <MBNumericDoubleField @bind-Value="@PercentByFormat"
                                              DecimalPlaces="2"
                                              FocusedMagnitude="MBNumericInputMagnitude.Percent"
                                              Label="Percent by format"
                                              NumericFormat="P2"
                                              TextInputStyle="MBTextInputStyle.Outlined" />
                    </p>

                    <p>
                        <MBNumericDoubleField @bind-Value="@PercentBySuffix"
                                              DecimalPlaces="2"
                                              FocusedMagnitude="MBNumericInputMagnitude.Percent"
                                              Label="Percent by Suffix"
                                              NumericFormat="N2"
                                              Suffix="%"
                                              TextInputStyle="MBTextInputStyle.Outlined"
                                              UnfocusedMagnitude="MBNumericInputMagnitude.Percent" />
                    </p>

                    <p>
                        <MBNumericDoubleField @bind-Value="@BasisPointsBySuffix"
                                              DecimalPlaces="0"
                                              FocusedMagnitude="MBNumericInputMagnitude.BasisPoints"
                                              Label="Basis Points by Suffix"
                                              NumericFormat="N0"
                                              Suffix="bp"
                                              TextInputStyle="MBTextInputStyle.Outlined"
                                              UnfocusedMagnitude="MBNumericInputMagnitude.BasisPoints" />
                    </p>
                </Primary>
            </MBCard>
        </div>



        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true">
                <Primary>
                    <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                        Helper Text
                    </h2>

                    <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                        Shows persistent and non-persistent helper text.
                    </h3>

                    <p>
                        <MBNumericDoubleField @bind-Value="@PopupHelperText"
                                              HelperText="Some helper text that pops up"
                                              Label="Popup Helper Text"
                                              NumericFormat="N2" />
                    </p>

                    <p>
                        <MBNumericDoubleField @bind-Value="@PersistentHelperText"
                                              Label="Persistent Helper Text"
                                              HelperText="Some persistent helper text"
                                              HelperTextPersistent="true"
                                              NumericFormat="N2" />
                    </p>
                </Primary>
            </MBCard>
        </div>
    </PageContent>
</DemonstrationPage>


@code {
    private double _doubleValue;
    private double DoubleValue
    {
        get => _doubleValue;
        set
        {
            _doubleValue = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Double numeric " + $"Value: '{_doubleValue.ToString("N2")}'");
        }
    }



    private double _moneyByFormat;
    private double MoneyByFormat
    {
        get => _moneyByFormat;
        set
        {
            _moneyByFormat = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Money by format numeric " + $"Value: '{_moneyByFormat.ToString("C2")}'");
        }
    }



    private double _moneyByPrefix;
    private double MoneyByPrefix
    {
        get => _moneyByPrefix;
        set
        {
            _moneyByPrefix = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Money by Prefix numeric " + $"Value: '{_moneyByPrefix.ToString("N2")}'");
        }
    }



    private double _percentByFormat;
    private double PercentByFormat
    {
        get => _percentByFormat;
        set
        {
            _percentByFormat = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Percent by format " + $"Value: '{_percentByFormat.ToString("N4")}'");
        }
    }


    private double _percentBySuffix;
    private double PercentBySuffix
    {
        get => _percentBySuffix;
        set
        {
            _percentBySuffix = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Percent by suffix " + $"Value: '{_percentBySuffix.ToString("N4")}'");
        }
    }


    private double _basisPointsBySuffix;
    private double BasisPointsBySuffix
    {
        get => _basisPointsBySuffix;
        set
        {
            _basisPointsBySuffix = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Basis Points by suffix " + $"Value: '{_basisPointsBySuffix.ToString("N4")}'");
        }
    }


    private double _popupHelperText;
    private double PopupHelperText
    {
        get => _popupHelperText;
        set
        {
            _popupHelperText = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Popup Helper Text " + $"Value: '{_popupHelperText}'");
        }
    }


    private double _persistentHelperText;
    private double PersistentHelperText
    {
        get => _persistentHelperText;
        set
        {
            _persistentHelperText = value;

            SnackbarService.ShowSnackbar(additionalClass: "snackbar-success", message: "Persistent Helper Text " + $"Value: '{_persistentHelperText}'");
        }
    }
}