@namespace BlazorMdc.Demo

<MTDialog Title=@dialogHeader
          EscapeKeyAction=""
          ScrimClickAction=""
          @ref="pinLogonDialogReference">

    <Body>
        @if (dialogStyle == ePINDialogStyle.CreatePIN)
        {
            <h6>Your PIN has never been set.</h6>
            <h6>Pick a PIN, enter it, and verify the entry.</h6>
            <MTDivider Padded="true" />
        }

        <EditForm Model="@pinLogonDTO"
                  OnValidSubmit="@SubmitLogon">

            <DataAnnotationsValidator />

            @if (dialogStyle == ePINDialogStyle.CreatePIN)
            {
                <div class="form-group">
                    <MTTextField @bind-Value="pinLogonDTO.PIN1"
                                 @onfocus="@(() => FocusPIN("PIN1"))"
                                 Label="New PIN"
                                 TrailingIcon="lock_outline"
                                 type="password" />
                    <ValidationMessage For=@( () => pinLogonDTO.PIN1 ) />
                </div>
                <div class="form-group">
                    <MTTextField @bind-Value="pinLogonDTO.PIN2"
                                 @onfocus="@(() => FocusPIN("PIN2"))"
                                 Label="Verify PIN"
                                 TrailingIcon="lock_outline"
                                 type="password" />
                    <ValidationMessage For=@( () => pinLogonDTO.PIN2 ) />
                </div>
            }
            else
            {
                <div class="form-group">
                    <MTTextField @bind-Value="pinLogonDTO.PIN1"
                                 @onfocus="@(() => FocusPIN("PIN1"))"
                                 Label="PIN"
                                 TrailingIcon="lock_outline"
                                 type="password" />
                    <ValidationMessage For=@( () => pinLogonDTO.PIN1 ) />
                </div>
            }
            <div class="form-group">
                <div style="display: flex; flex-direction:column; justify-content:flex-start;">
                    <div style="display:flex; flex-direction: row; justify-content: center;">
                        <MTButton Label="7"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("7"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="8"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("8"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="9"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("9"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                    </div>
                    <div style="display:flex; flex-direction: row; justify-content: center;">
                        <MTButton Label="4"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("4"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="5"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("5"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="6"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("6"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                    </div>
                    <div style="display:flex; flex-direction: row; justify-content: center;">
                        <MTButton Label="1"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("1"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="2"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("2"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="3"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("3"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                    </div>
                    <div style="display:flex; flex-direction: row; justify-content: center;">
                        <MTButton Label="0"
                                  Style="margin: 0.75em 0.75em 0.25em 0.25em; height: 2rem; width: 2rem;"
                                  @onclick="@(() => NumberClick("0"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                        <MTButton Label="Backspace"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em; height: 2rem; min-width: 128px;"
                                  @onclick="@(() => NumberClick("BKS"))"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                    </div>

                    <div style="display:flex; flex-direction: row; justify-content: center;">
                        @if (dialogStyle == ePINDialogStyle.CreatePIN)
                        {
                            <MTButton Style="margin: 0.75em 0.25em 0.25em 0.25em;"
                                      type="submit"
                                      Label="Create PIN"
                                      ButtonStyle="MTButtonStyle.ContainedRaised" />
                        }
                        else
                        {
                            <MTButton Style="margin: 0.75em 0.25em 0.25em 0.25em;"
                                      type="submit"
                                      Label="Enter PIN"
                                      ButtonStyle="MTButtonStyle.ContainedRaised" />
                        }
                        <MTButton @onclick="@CancelClick"
                                  Style="margin: 0.75em 0.25em 0.25em 0.25em;"
                                  Label="Cancel"
                                  ButtonStyle="MTButtonStyle.ContainedRaised" />
                    </div>
                </div>
            </div>
            <hr />
        </EditForm>
    </Body>
    <Buttons></Buttons>
</MTDialog>

@code{

    public enum ePINDialogStyle { CreatePIN, EnterPIN };

    [Inject] private IMTToastService toastService { get; set; }

    [Parameter] public ePINDialogStyle dialogStyle { get; set; }
    [Parameter] public string validationPIN { get; set; }

    private string dialogHeader { get; set; }
    private string lastFocus { get; set; }
    private string returnValue { get; set; }
    private MTDialog pinLogonDialogReference { get; set; }
    private PINLogonDTO pinLogonDTO = new PINLogonDTO();

    public async Task<string> OpenPINLogonDialogAsync()
    {
        pinLogonDTO.PIN1 = "";
        pinLogonDTO.PIN2 = "";

        if (dialogStyle == ePINDialogStyle.CreatePIN)
        {
            dialogHeader = "Create PIN";
        }
        else
        {
            dialogHeader = "Enter PIN";

            // Prevent validation error
            pinLogonDTO.PIN2 = "x";
        }

        var ret = await pinLogonDialogReference.ShowAsync();
        if (ret.Equals("dismissed"))
        {
            ret = returnValue;
        }

        return ret;
    }

    async Task SubmitLogon()
    {
        if (dialogStyle == ePINDialogStyle.EnterPIN)
        {
            if (pinLogonDTO.PIN1 == validationPIN)
            {
                returnValue = "<Log on succeeded>";

                toastService.ShowToast(
                    level: MTToastLevel.Success,
                    message: "Log on succeeded");

                await pinLogonDialogReference.HideAsync();
            }
            else
            {
                toastService.ShowToast(
                    level: MTToastLevel.Error,
                    message: "Log on failed");
            }
        }
        else
        {
            if (pinLogonDTO.PIN1 == pinLogonDTO.PIN2)
            {
                returnValue = "<PIN created with a value of '" + pinLogonDTO.PIN1.ToString() + "'>";

                toastService.ShowToast(
                    level: MTToastLevel.Success,
                    message: "<PIN creation succeeded>");

                await pinLogonDialogReference.HideAsync();
            }
            else
            {
                toastService.ShowToast(
                    level: MTToastLevel.Error,
                    message: "PINs do not match");
            }
        }
    }

    async Task CancelClick()
    {
        returnValue = "<CANCELED>";

        await pinLogonDialogReference.HideAsync();
    }

    void FocusPIN(string pin)
    {
        lastFocus = pin;
    }

    void NumberClick(string result)
    {
        if (result == "BKS")
        {
            if (lastFocus.StartsWith("PIN1"))
            {
                if (pinLogonDTO.PIN1.Length > 0)
                {
                    pinLogonDTO.PIN1 = pinLogonDTO.PIN1.Remove(pinLogonDTO.PIN1.Length - 1, 1);
                }
            }
            else
            {
                if (pinLogonDTO.PIN2.Length > 0)
                {
                    pinLogonDTO.PIN2 = pinLogonDTO.PIN2.Remove(pinLogonDTO.PIN2.Length - 1, 1);
                }
            }
        }
        else
        {
            if (lastFocus.StartsWith("PIN1"))
            {
                pinLogonDTO.PIN1 += result;
            }
            else
            {
                pinLogonDTO.PIN2 += result;
            }
        }
    }

}
