@namespace BlazorMdc.Demo

@page "/progress"

<h1 class="mdc-typography--headline4">Progress samples</h1>

<p style="margin-bottom: 2rem;">See <code>ProgressSample.razor</code> for sources.</p>

<p><BMdc.Switch @bind-Value="@show" Label="Show/hide items" /></p>
<p><BMdc.Switch @bind-Value="@showBuffer" Label="Show buffer" /></p>

<h5 class="mdc-typography--headline5">Indeterminate</h5>
<p><BMdc.LinearProgress LinearProgressType="@linearIndeterminate" /></p>

<p><BMdc.CircularProgress CircularProgressType="@circularIndeterminate" /></p>
<p><BMdc.CircularProgress CircularProgressType="@circularIndeterminate" CircularProgressSize="eCircularProgressSize.Medium" /></p>
<p><BMdc.CircularProgress CircularProgressType="@circularIndeterminate" CircularProgressSize="eCircularProgressSize.Small" /></p>

<h5 class="mdc-typography--headline5">Determinate</h5>
<BMdcPlus.NumericDoubleField @bind-Value="@progress" Label="Progress (0 to 100%)" Min="0" Max="1" Magnitude="eNumericInputMagnitude.Percent" DecimalPlaces="2" NumericFormat="P0" />

<p>Regular:</p>
<p><BMdc.LinearProgress LinearProgressType="linearDeterminate" Value="@progress" BufferValue="buffer" /></p>

<p>Reversed:</p>
<p><BMdc.LinearProgress LinearProgressType="linearReversed" Value="@progress" BufferValue="buffer" /></p>

<p><BMdc.CircularProgress Value="@progress" CircularProgressType="@circularDeterminate" /></p>
<p><BMdc.CircularProgress Value="@progress" CircularProgressType="@circularDeterminate" CircularProgressSize="eCircularProgressSize.Medium" /></p>
<p><BMdc.CircularProgress Value="@progress" CircularProgressType="@circularDeterminate" CircularProgressSize="eCircularProgressSize.Small" /></p>


@code {
    bool show = true;
    bool showBuffer = true;
    double progress = 0.2;
    double? buffer => showBuffer ? (double?)progress + (1 - progress) / 3 : null;
    eLinearProgressType linearIndeterminate => show ? eLinearProgressType.Indeterminate : eLinearProgressType.Closed;
    eLinearProgressType linearDeterminate => show ? eLinearProgressType.Determinate : eLinearProgressType.Closed;
    eLinearProgressType linearReversed => show ? eLinearProgressType.ReversedDeterminate : eLinearProgressType.Closed;
    eCircularProgressType circularIndeterminate => show ? eCircularProgressType.Indeterminate : eCircularProgressType.Closed;
    eCircularProgressType circularDeterminate => show ? eCircularProgressType.Determinate : eCircularProgressType.Closed;
}