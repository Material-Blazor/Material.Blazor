@namespace BlazorMdc.Demo

@page "/toast"

@inject BPlus.IToastService toastService

<h1 class="mdc-typography--headline4">Toast samples</h1>

<p>See <code>ToastSample.razor</code> for sources.</p>

<p>
    Note the addition of <code>AddBPlus.Toast()</code> in Startup.cs (Server) and Program.cs (WASM) as well as the component <code>BPlus.Toasts</code> in MainLayout.razor.
</p>

<style>
    .my-class {
        font-style: italic;
    }
</style>

@if (overrideDefaults)
{
    <style>
        :root {
            --bmdc-toast-color-info: black !important;
            --bmdc-toast-color-success: black !important;
            --bmdc-toast-color-warning: black !important;
            --bmdc-toast-color-error: black !important;

            --bmdc-toast-filter-info: initial !important;
            --bmdc-toast-filter-success: initial !important;
            --bmdc-toast-filter-warning: initial !important;
            --bmdc-toast-filter-error: initial !important;

            --bmdc-toast-background-color-info: var(--bmdc-color-lightblue-200) !important;
            --bmdc-toast-background-color-success: var(--bmdc-color-green-200) !important;
            --bmdc-toast-background-color-warning: var(--bmdc-color-amber-200) !important;
            --bmdc-toast-background-color-error: var(--bmdc-color-red-200) !important;
            --bmdc-toast-border-radius: 16px !important;
        }
    </style>
}

<p><BMdc.Checkbox @bind-Value="@overrideDefaults" Label="Change colors and border radius from default" /></p>

<p><BPlus.NumericIntField @bind-Value="@toastService.Configuration.MaxToastsShowing" Label="Max Toasts (0-10)" Min="0" Max="10" NumericFormat="N0" /></p>

<p>
    <BMdc.Button Style="background-color: var(--bmdc-toast-background-color-info);"
               @onclick="@InfoClick"
               Label="Info Toast"
               ButtonStyle="@BEnum.ButtonStyle.ContainedRaised" />

    <BMdc.Button Style="background-color: var(--bmdc-toast-background-color-success);"
               @onclick="@(() => toastService.ShowToast(
                              level: BEnum.ToastLevel.Success,
                              heading: "I'm a SUCCESS",
                              message: "Congratulations!" ))"
               Label="Success Toast"
               ButtonStyle="@BEnum.ButtonStyle.ContainedRaised" />

    <BMdc.Button Style="background-color: var(--bmdc-toast-background-color-warning);"
               @onclick="@(() => toastService.ShowToast(
                              level: BEnum.ToastLevel.Warning,
                              message: "I'm a WARNING" ))"
               Label="Warning Toast"
               ButtonStyle="@BEnum.ButtonStyle.ContainedRaised" />

    <BMdc.Button Style="background-color: var(--bmdc-toast-background-color-error);"
               @onclick="@(() => toastService.ShowToast(
                              level: BEnum.ToastLevel.Error,
                              message: "I'm an ERROR" ))"
               Label="Error Toast"
               ButtonStyle="@BEnum.ButtonStyle.ContainedRaised" />
</p>

<p>Try different configuration options</p>
<p><BMdc.Select Label="Additional css class" @bind-Value="@cssClass" Items="cssClassItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p><BMdc.Select Label="Close method" @bind-Value="@closeMethod" Items="closeMethodItems"></BMdc.Select></p>
<p><BMdc.Select Label="Heading" @bind-Value="@heading" Items="headingItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p><BMdc.Select Label="Icon" @bind-Value="@icon" Items="iconItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p><BMdc.Select Label="Level" @bind-Value="@level" Items="levelItems"></BMdc.Select></p>
<p><BMdc.Select Label="Message" @bind-Value="@message" Items="messageItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p><BMdc.Select Label="Show icon" @bind-Value="@showIcon" Items="showIconItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p><BMdc.Select Label="Timeout" @bind-Value="@timeout" Items="timeoutItems" ItemValidation="@BEnum.ItemValidation.DefaultToFirst"></BMdc.Select></p>
<p>
    <BMdc.Button @onclick="@customiseClick"
               Label="Toast with selected options"
               ButtonStyle="@BEnum.ButtonStyle.ContainedRaised" />
</p>


@code{
    private bool overrideDefaults = false;

    string cssClass;
    BModel.ListElement<string>[] cssClassItems = new BModel.ListElement<string>[]
    {
        new BModel.ListElement<string> { SelectedValue = "", Label = "Default" },
        new BModel.ListElement<string> { SelectedValue = "my-class", Label = "Italic" },
    };


    BEnum.ToastCloseMethod closeMethod;
    IEnumerable<BModel.ListElement<BEnum.ToastCloseMethod>> closeMethodItems => from c in (BEnum.ToastCloseMethod[])Enum.GetValues(typeof(BEnum.ToastCloseMethod))
                                                                          select new BModel.ListElement<BEnum.ToastCloseMethod>
                                                                          {
                                                                              SelectedValue = c,
                                                                              Label = c.ToString()
                                                                          };

#nullable enable annotations
    class MyIcon
    {
        public string Name;
        public BModel.IIconFoundry? Foundry;
    }
#nullable restore annotations

    MyIcon icon;
    BModel.ListElement<MyIcon>[] iconItems = new BModel.ListElement<MyIcon>[]
    {
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "directions_run" }, Label = "directions_run" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = BModel.IconHelper.MIFoundry(theme: BEnum.IconMITheme.Filled) }, Label = "thumb_up (filled / default)" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = BModel.IconHelper.MIFoundry(theme: BEnum.IconMITheme.Outlined) }, Label = "thumb_up (outlined)" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = BModel.IconHelper.MIFoundry(theme: BEnum.IconMITheme.Round) }, Label = "thumb_up (rounded)" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = BModel.IconHelper.MIFoundry(theme: BEnum.IconMITheme.TwoTone) }, Label = "thumb_up (two-tone)" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "thumb_up", Foundry = BModel.IconHelper.MIFoundry(theme: BEnum.IconMITheme.Sharp) }, Label = "thumb_up (sharp)" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance", Foundry = BModel.IconHelper.FAFoundry() }, Label = "fa-ambulance" },
        new BModel.ListElement<MyIcon> { SelectedValue = new MyIcon() { Name = "fa-ambulance", Foundry = BModel.IconHelper.FAFoundry(relativeSize: BEnum.IconFARelativeSize.ExtraSmall) }, Label = "fa-ambulance (x-small)" },
    };


    string heading;
    BModel.ListElement<string>[] headingItems = new BModel.ListElement<string>[]
    {
        new BModel.ListElement<string> { SelectedValue = "", Label = "Default" },
        new BModel.ListElement<string> { SelectedValue = "Run of the mill heading", Label = "Run of the mill heading" },
        new BModel.ListElement<string> { SelectedValue = "Heading truncated and truncated and truncated and truncated", Label = "Heading that will be truncated" }
    };


    BEnum.ToastLevel level;
    IEnumerable<BModel.ListElement<BEnum.ToastLevel>> levelItems => from c in (BEnum.ToastLevel[])Enum.GetValues(typeof(BEnum.ToastLevel))
                                                              select new BModel.ListElement<BEnum.ToastLevel>
                                                              {
                                                                  SelectedValue = c,
                                                                  Label = c.ToString()
                                                              };

    string message;
    BModel.ListElement<string>[] messageItems = new BModel.ListElement<string>[]
    {
        new BModel.ListElement<string> { SelectedValue = "Run of the mill message", Label = "Run of the mill message" },
        new BModel.ListElement<string> { SelectedValue = "Italicized font", Label = "Italicized font (To see this set the additional CSS class to italic)" },
        new BModel.ListElement<string> { SelectedValue = "Text <strong>bold</strong> and <u>underlined</u>", Label = "Message with markup" },
        new BModel.ListElement<string> { SelectedValue = "Message truncated and truncated and truncated and truncated", Label = "Message that will be truncated" }
    };


    string showIcon;
    BModel.ListElement<string>[] showIconItems = new BModel.ListElement<string>[]
    {
        new BModel.ListElement<string> { SelectedValue = "", Label = "Default" },
        new BModel.ListElement<string> { SelectedValue = "true", Label = "true" },
        new BModel.ListElement<string> { SelectedValue = "false", Label = "false" }
    };


    string timeout;
    BModel.ListElement<string>[] timeoutItems = new BModel.ListElement<string>[]
    {
        new BModel.ListElement<string> { SelectedValue = "", Label = "Default" },
        new BModel.ListElement<string> { SelectedValue = "1000", Label = "1 second" },
        new BModel.ListElement<string> { SelectedValue = "10000", Label = "10 seconds" },
        new BModel.ListElement<string> { SelectedValue = "60000", Label = "60 seconds" }
    };


    protected void InfoClick()
    {
        toastService.ShowToast(
            level: BEnum.ToastLevel.Info,
            message: "I'm an INFO");
    }


    protected void customiseClick()
    {
        string appliedCssClass = (cssClass.Length == 0) ? null : cssClass;

        string appliedHeading = (heading.Length == 0) ? null : heading;

        bool? appliedShowIcon = (showIcon.Length == 0) ? appliedShowIcon = null : appliedShowIcon = Convert.ToBoolean(showIcon);

        uint? appliedTimeout = (timeout.Length == 0) ? appliedTimeout = null : appliedTimeout = Convert.ToUInt32(timeout);

        toastService.ShowToast(
            cssClass: appliedCssClass,
            closeMethod: closeMethod,
            heading: appliedHeading,
            level: level,
            message: message,
            iconName: icon.Name,
            iconFoundry: icon.Foundry,
            showIcon: appliedShowIcon,
            timeout: appliedTimeout);
    }
}