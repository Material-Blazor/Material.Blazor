@namespace BlazorMdc.Demo

@page "/toast"

@inject IPmdcToastService toastService

<h1 class="@MdcTypography.Heading4">Toast samples</h1>

<p>See <code>ToastSample.razor</code> for sources.</p>

<p>
    Note the addition of <code>AddPMdcToast()</code> in Startup.cs (Server) and Program.cs (WASM) as well as the component <code>PMdcToasts</code> in MainLayout.razor.
</p>

<style>
    .my-class {
        font-style: italic;
    }
</style>

@if (overrideDefaults)
{
    <style>
        :root {
            --bmdc-toast-color-info: black !important;
            --bmdc-toast-color-success: black !important;
            --bmdc-toast-color-warning: black !important;
            --bmdc-toast-color-error: black !important;
            --bmdc-toast-background-color-info: var(--bmdc-color-lightblue-200) !important;
            --bmdc-toast-background-color-success: var(--bmdc-color-green-200) !important;
            --bmdc-toast-background-color-warning: var(--bmdc-color-amber-200) !important;
            --bmdc-toast-background-color-error: var(--bmdc-color-red-200) !important;
            --bmdc-toast-border-radius: 16px !important;
        }
    </style>
}

<p><MdcCheckbox @bind-Value="@overrideDefaults" Label="Change colors and border radius from default" /></p>

<p><PMdcNumericIntField @bind-Value="@toastService.Configuration.MaxToastsShowing" Label="Max Toasts (0-10)" Min="0" Max="10" NumericFormat="N0" /></p>

<p>
    <MdcButton Style="background-color: var(--bmdc-toast-background-color-info);"
               OnClick="@InfoClick"
               Label="Info Toast"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton Style="background-color: var(--bmdc-toast-background-color-success);"
               OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Success, new PMdcToastSettings() { Heading = "I'm a SUCCESS", Message = "Congratulations!" }))"
               Label="Success Toast"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton Style="background-color: var(--bmdc-toast-background-color-warning);"
               OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Message = "I'm a WARNING" }))"
               Label="Warning Toast"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton Style="background-color: var(--bmdc-toast-background-color-error);"
               OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Error, new PMdcToastSettings() { Message = "I'm an ERROR" }))"
               Label="Error Toast"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />
</p>

<p>
    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "No Icon", ShowIcon = false }))"
               Label="No Icon"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "Ten Seconds", Timeout = 10000 }))"
               Label="Ten Seconds"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "No Close Button", Message = "Press close to remove", CloseMethod = PMdcToastCloseMethod.Timeout }))"
               Label="No Close Button"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "No Timeout", Message = "Press close to remove", CloseMethod = PMdcToastCloseMethod.CloseButton }))"
               Label="No Timeout"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "Icon Changed", Icon = MdcIcons.Icon__directions_run }))"
               Label="Change Icon"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "Additional Class", Message = "Italicized font", CssClass = "my-class" }))"
               Label="Additional Class"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "With <span style=\"color: var(--bmdc-color-deeppurple-700); \">Markup</span>", Message = "Text <strong>bold</strong> and <u>underlined</u>" }))"
               Label="With Markup"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />

    <MdcButton OnClick="@(() => toastService.ShowToast(PMdcToastLevel.Warning, new PMdcToastSettings() { Heading = "Heading truncated and truncated and truncated and truncated", Message = "Message truncated and truncated and truncated and truncated" }))"
               Label="Long text truncation"
               ButtonStyle="@MdcButtonStyle.ContainedRaised" />
</p>


@code{
    private bool overrideDefaults = false;

    protected void InfoClick()
    {
        toastService.ShowToast(PMdcToastLevel.Info, new PMdcToastSettings() { Message = "I'm an INFO" });
    }
}