@page "/dialog"


@inject IMBToastService ToastService


@using System.ComponentModel.DataAnnotations;


<DemonstrationPage ComponentName="Dialog"
                   Title="Dialog Demonstration"
                   DemoComponent="@this"
                   MaterialIOPage="mdc-dialog#dialogs"
                   MinDensity="@MBDensity.Minus4">
    <Description>
        <p>
            Dialog samples. Click each card to launch a dialog.
        </p>
    </Description>

    <PageContent>
        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true" @onclick="@ShowDialog1Async">
                <PrimaryAction>
                    <div class="mb-card__primary">
                        <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                            General Dialog
                        </h2>
                        <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                            Launches a general dialog. Look at the result shown in a toast when you click a button, hit escape of click the scrim. Shows
                            a checkbox and radio buttons to demonstrate that these are correctly initiated with Material Theme javascript when rendered inside a dialog.
                        </h3>
                    </div>
                </PrimaryAction>
            </MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true" @onclick="@ShowDialog2Async">
                <PrimaryAction>
                    <div class="mb-card__primary">
                        <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                            Disabled Scrim and Escape
                        </h2>
                        <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                            A general dialog with scrim and escape key actions disabled.
                        </h3>
                    </div>
                </PrimaryAction>
            </MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true" @onclick="@ShowDialog3Async">
                <PrimaryAction>
                    <div class="mb-card__primary">
                        <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                            Date Picker Dialog
                        </h2>
                        <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                            Shows that a date picker's popup menu is able to render outside the dialog <code>&lt;div&gt;</code> block.
                        </h3>
                    </div>
                </PrimaryAction>
            </MBCard>
        </div>


        <div class="mdc-layout-grid__cell--span-4">
            <MBCard AutoStyled="true" @onclick="@ShowDialog4Async">
                <PrimaryAction>
                    <div class="mb-card__primary">
                        <h2 class="mb-card__title mdc-typography mdc-typography--headline6">
                            Logon Dialog
                        </h2>
                        <h3 class="mb-card__subtitle mdc-typography mdc-typography--subtitle2">
                            Shows a dialog that uses an edit form and validation annotations. It also demonstrates the altenative form of having submit and cancel methods
                        </h3>
                    </div>
                </PrimaryAction>
            </MBCard>
        </div>


    </PageContent>
</DemonstrationPage>


<MBDialog @ref="@Dialog1"
          Title="General dialog">
    <Body>
        <p>Please choose a fruit.</p>
        <MBCheckbox @bind-Value="@Check" Label="Check me" />
        <MBRadioButtonGroup @bind-Value="@RadioButtonResult1"
                            Items="@StringItems"
                            Vertical="true"
                            ItemValidation="@MBItemValidation.DefaultToFirst" />
    </Body>
    <Buttons>
        <MBButton Label="Orange" DialogAction="orange button clicked"></MBButton>
        <MBButton Label="Apple" DialogAction="apple button clicked" ButtonStyle="@MBButtonStyle.Text"></MBButton>
    </Buttons>
</MBDialog>


<MBDialog @ref="@Dialog2" Title="General dialog with scrim and escape disabled (using HideAsync)"
          ScrimClickAction=""
          EscapeKeyAction="">
    <Body>
        <p>Please choose a fruit.</p>
        <p><MBCheckbox @bind-Value="@Check" Label="Check me" /></p>
    </Body>
    <Buttons>
        <MBButton Label="Orange" @onclick="@(() => OnButtonClick("orange notified by @onclick"))"></MBButton>
        <MBButton Label="Apple" @onclick="@(() => OnButtonClick("orange notified by @onclick"))" ButtonStyle="@MBButtonStyle.Text"></MBButton>
    </Buttons>
</MBDialog>


<MBDialog @ref="@Dialog3" Title="Date Picker Dialog"
          OverflowVisible="true">
    <Body>
        <p>Set the date.</p>
        <MBDatePicker Label="The date" @bind-Value="@Date5" SelectInputStyle="MBSelectInputStyle.Outlined" MinDate="@MinDate" MaxDate="@MaxDate"></MBDatePicker>
    </Body>
    <Buttons>
        <MBButton Label="Orange" DialogAction="orange"></MBButton>
        <MBButton Label="Apple" DialogAction="apple" ButtonStyle="@MBButtonStyle.Text"></MBButton>
    </Buttons>
</MBDialog>

<MBDialog Title="Log on dialog"
          ScrimClickAction=""
          EscapeKeyAction=""
          @ref="@Dialog4">

    <Body>
        <EditForm Model="@UserLogon" OnValidSubmit="@Dialog4Submitted" OnInvalidSubmit="@Dialog4Invalid">
            <DataAnnotationsValidator />

            <div class="mdc-layout-grid__inner">
                <div class="mdc-layout-grid__cell--span-12">
                    <MBTextField @bind-Value="@UserLogon.UserID"
                                 Label="User ID"
                                 TrailingIcon="person"
                                 TextInputStyle="@MBTextInputStyle.Outlined"
                                 style="width: 100%; margin-top: 6px;" />
                    <ValidationMessage For="@(() => UserLogon.UserID)" />
                </div>
                <div class="mdc-layout-grid__cell--span-12">
                    <MBTextField @bind-Value="@UserLogon.Password"
                                 Label="Password"
                                 TrailingIcon="lock_outline"
                                 TextInputStyle="@MBTextInputStyle.Outlined"
                                 type="password"
                                 style="width: 100%;" />
                    <ValidationMessage For="@(() => UserLogon.Password)" />
                </div>
                <div class="mdc-layout-grid__cell--span-12" style="text-align: right;">
                    <MBButton style="margin: 0.75em 0.25em 0.25em 0.25em;"
                              type="submit"
                              Label="Logon" />
                    <MBButton @onclick="@Dialog4Canceled"
                              style="margin: 0.75em 0.25em 0.25em 0.25em;"
                              Label="Cancel" />
                </div>
            </div>
        </EditForm>
    </Body>

</MBDialog>



@code {
    private bool DisableInput { get; set; } = false;
    private MBDialog Dialog1 { get; set; }
    private MBDialog Dialog2 { get; set; }
    private MBDialog Dialog3 { get; set; }
    private MBDialog Dialog4 { get; set; }

    private bool Check { get; set; }

    private string _radioButtonResult1 = "brit-short";
    private string RadioButtonResult1
    {
        get => _radioButtonResult1;
        set
        {
            _radioButtonResult1 = value;

            ToastService.ShowToast(heading: "Dialog 1 Radio Click", message: $"Value: '{_radioButtonResult1}'", level: MBToastLevel.Success, showIcon: false);
        }
    }

    private MBListElement<string>[] StringItems = new MBListElement<string>[]
    {
        new MBListElement<string> { SelectedValue = "brit-short", Label = "British Shorthair" },
        new MBListElement<string> { SelectedValue = "russ-blue", Label = "Russian Blue" },
        new MBListElement<string> { SelectedValue = "ice-invis", Label = "Icelandic Invisible" }
                    };

    private async Task ShowDialog1Async()
    {
        var result = await Dialog1.ShowAsync();
        ToastService.ShowToast(heading: "Dialog 1 Result", message: $"Value: '{result}'", level: MBToastLevel.Success, showIcon: false);
    }

    private async Task ShowDialog2Async()
    {
        var result = await Dialog2.ShowAsync();
        ToastService.ShowToast(heading: "Dialog 4 Result", message: $"Value: '{result}'", level: MBToastLevel.Success, showIcon: false);
    }

    private async Task OnButtonClick(string button)
    {
        await Dialog2.HideAsync();
        ToastService.ShowToast(heading: "Dialog 4 By @onclick", message: $"Value: '{button}'", level: MBToastLevel.Success, showIcon: false);
    }

    private DateTime MinDate { get; set; } = new DateTime(2015, 1, 1);
    private DateTime MaxDate { get; set; } = new DateTime(2025, 12, 31);
    private DateTime Date5 { get; set; } = DateTime.Today;

    private async Task ShowDialog3Async()
    {
        var result = await Dialog3.ShowAsync();
        ToastService.ShowToast(heading: "Dialog 5 Result", message: $"Value: '{result}'", level: MBToastLevel.Success, showIcon: false);
    }

    private UserLogonDefinition UserLogon { get; set; }
    private async Task ShowDialog4Async()
    {
        UserLogon = new UserLogonDefinition();
        _ = Dialog4.ShowAsync();
        await Task.CompletedTask;
    }

    private async Task Dialog4Submitted()
    {
        await Dialog4.HideAsync();
        ToastService.ShowToast(heading: "Dialog 6 Result", message: $"Values: '{UserLogon.UserID};{UserLogon.Password}'", level: MBToastLevel.Success, showIcon: false);
    }

    private void Dialog4Invalid()
    {
        ToastService.ShowToast(heading: "Dialog 6 Invalid", message: $"Edit form was invalid", level: MBToastLevel.Warning, showIcon: false);
    }

    private async Task Dialog4Canceled()
    {
        await Dialog4.HideAsync();
        ToastService.ShowToast(heading: "Dialog 6 Canceled", message: "The cancel button was selected", level: MBToastLevel.Success, showIcon: false);
    }

    private class UserLogonDefinition

    {
        [Required(ErrorMessage = "UserID is required")] public string UserID { get; set; }
        [Required(ErrorMessage = "Password is required")] public string Password { get; set; }
    }
}
