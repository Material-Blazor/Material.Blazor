@namespace BlazorMdc

@inherits MdcInputComponentBase<bool>
@*@implements IDisposable*@

@inject IJSRuntime jsRuntime


<button @ref="@elementReference"
        class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()"
        @onclick="@OnLocalClickAsync"
        @onmousedown="@OnMouseDown"
        @onkeydown="@OnKeyDown"
        @ontouchstart="@OnTouchStart"
        disabled="@Disabled"
        type="@Type">

    <i class="material-icons mdc-icon-button__icon mdc-icon-button__icon--on bmdc-dp-menu__icon-button">@IconOn</i>
    <i class="material-icons mdc-icon-button__icon bmdc-dp-menu__icon-button">@IconOff</i>
</button>


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    [CascadingParameter] private MdcCard Card { get; set; }


    [Parameter] public string IconOn { get; set; }
    [Parameter] public string IconOff { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnMouseDown { get; set; }
    [Parameter] public EventCallback OnKeyDown { get; set; }
    [Parameter] public EventCallback OnTouchStart { get; set; }


    private ElementReference elementReference;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        MyClassMapper();

        HasValueSetter = true;
    }

    private void MyClassMapper() =>
        ClassMapper
            .Clear()
            .Get(() => Class)
            .Add("mdc-icon-button")
            .AddIf("mdc-card__action mdc-card__action--icon", () => (Card != null))
            .AddIf("mdc-icon-button--on", () => Value);


    public async Task OnLocalClickAsync()
    {
        ReportingValue = !ReportingValue;
        await OnClick.InvokeAsync(ReportingValue).ConfigureAwait(false);
    }


    protected override void ValueSetter(bool value)
    {
        UnderlyingValue = value;

        InvokeAsync(async () => await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.setOn", elementReference, value));
    }


    protected override async Task InitializeMdcComponent() => await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.init", elementReference);
}