@namespace BlazorMdc

@inherits MdcInputComponentBase<bool>

@inject IJSRuntime jsRuntime


<button @ref="@elementReference"
        class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()"
        @onclick="@OnClick"
        @onmousedown="@OnMouseDown"
        @onkeydown="@OnKeyDown"
        @ontouchstart="@OnTouchStart"
        disabled="@Disabled"
        type="@Type">

    <i class="material-icons mdc-icon-button__icon mdc-icon-button__icon--on bmdc-dp-menu__icon-button">@IconOn</i>
    <i class="material-icons mdc-icon-button__icon bmdc-dp-menu__icon-button">@IconOff</i>
</button>


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    [Parameter] public string IconOn { get; set; }
    [Parameter] public string IconOff { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnMouseDown { get; set; }
    [Parameter] public EventCallback OnKeyDown { get; set; }
    [Parameter] public EventCallback OnTouchStart { get; set; }


    private ElementReference elementReference;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-icon-button");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.init", elementReference);
        }
    }
}