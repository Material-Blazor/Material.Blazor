@namespace BlazorMdc

@inherits MdcInputComponentBase<bool>
@implements IDisposable

@inject IJSRuntime jsRuntime


<button @ref="@elementReference"
        class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()"
        @onclick="@OnClick"
        @onmousedown="@OnMouseDown"
        @onkeydown="@OnKeyDown"
        @ontouchstart="@OnTouchStart"
        disabled="@Disabled"
        type="@Type">

    <i class="material-icons mdc-icon-button__icon mdc-icon-button__icon--on bmdc-dp-menu__icon-button">@IconOn</i>
    <i class="material-icons mdc-icon-button__icon bmdc-dp-menu__icon-button">@IconOff</i>
</button>


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    [CascadingParameter] private MdcCard Card { get; set; }


    [Parameter] public string IconOn { get; set; }
    [Parameter] public string IconOff { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnMouseDown { get; set; }
    [Parameter] public EventCallback OnKeyDown { get; set; }
    [Parameter] public EventCallback OnTouchStart { get; set; }


    private DotNetObjectReference<MdcIconButtonToggle> objectReference;
    private ElementReference elementReference;
    private bool cachedIsOpen;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-icon-button")
            .AddIf("mdc-card__action mdc-card__action--icon", () => (Card != null));

        objectReference = DotNetObjectReference.Create(this);

        cachedIsOpen = ReportingValue;
    }


    public void Dispose()
    {
        objectReference?.Dispose();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Value != cachedIsOpen)
        {
            if (Value)
            {
                await TurnOnAsync();
            }
            else
            {
                await TurnOffAsync();
            }
        }

        await base.OnParametersSetAsync();
    }


    [JSInvokable("NotifyOnAsync")]
    public async Task NotifyOnAsync(bool on)
    {
        cachedIsOpen = on;
        ReportingValue = on;
        await Task.CompletedTask;
    }


    public async Task TurnOnAsync()
    {
        await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.turnOn", elementReference);
    }


    public async Task TurnOffAsync()
    {
        await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.turnOff", elementReference);
    }


    protected override async Task InitializeMdcComponent() => await jsRuntime.InvokeAsync<object>("BlazorMdc.iconButtonToggle.init", elementReference, objectReference, Value);
}