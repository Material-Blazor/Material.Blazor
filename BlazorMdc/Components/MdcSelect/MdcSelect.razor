@namespace BlazorMdc

@typeparam TItem

@inherits MdcValidatingInputComponentBase<TItem>

@implements IMdcDialogChild

@inject IJSRuntime jsRuntime


<div @ref="elementReference"
     class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    <div class="mdc-select__anchor">
        <i class="mdc-select__dropdown-icon"></i>
        <div class="mdc-select__selected-text @alignClass" role="button" aria-haspopup="listbox" aria-labelledby="@labelId" aria-disabled="Disabled">@selectedText</div>

        @if (appliedInputStyle == MdcSelectInputStyle.Outlined)
        {
            <span class="mdc-notched-outline">
                <span class="mdc-notched-outline__leading"></span>
                <span class="mdc-notched-outline__notch">
                    <span id="@labelId" class="mdc-floating-label @floatingLabelClass">@Label</span>
                </span>
                <span class="mdc-notched-outline__trailing"></span>
            </span>
        }
        else
        {
            <span id="@labelId" class="mdc-floating-label @floatingLabelClass">@Label</span>
            <div class="mdc-line-ripple"></div>
        }
    </div>

    <div class="mdc-select__menu mdc-menu mdc-menu-surface">
        <ul class="mdc-list">
            @foreach (var item in Items)
            {
                var dv = item.SelectedValue;

                if (object.Equals(item.SelectedValue, Value))
                {
                    <li class="mdc-list-item mdc-list-item--selected @alignClass" data-value="@item.SelectedValue" aria-selected="true" role="option" @onclick="@(_ => OnItemClickAsync(dv))"><span class="mdc-list-item__text">@item.SelectedValue</span></li>
                }
                else
                {
                    <li class="mdc-list-item @alignClass" data-value="@item.SelectedValue" aria-selected="false" role="option" @onclick=@(_ => OnItemClickAsync(dv))><span class="mdc-list-item__text">@item.SelectedValue</span></li>
                }
            }
        </ul>
    </div>
</div>



@code {

    [CascadingParameter] private IMdcDialog Dialog { get; set; }

    [Parameter] public MdcItemValidation? ItemValidation { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public IEnumerable<MdcListElement<TItem>> Items { get; set; }
    [Parameter] public MdcSelectInputStyle? SelectInputStyle { get; set; }
    [Parameter] public MdcTextAlignStyle? TextAlignStyle { get; set; }


    private ElementReference elementReference;
    private MdcSelectInputStyle appliedInputStyle => CascadingDefaults.AppliedStyle(SelectInputStyle);
    private string labelId = Utilities.GenerateCssElementSelector();
    private string selectedText = "";
    private string floatingLabelClass = "";
    private string alignClass => Utilities.GetTextAlignClass(CascadingDefaults.AppliedStyle(TextAlignStyle));
    private bool instantiate = false;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-select")
            .AddIf("mdc-select--outlined", () => (appliedInputStyle == MdcSelectInputStyle.Outlined))
            .AddIf("mdc-select--disabled", () => Disabled);

        if (Dialog != null)
        {
            Dialog.RegisterLayoutAction(this);
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        MdcItemValidation appliedItemValidation = CascadingDefaults.AppliedItemValidationSelect(ItemValidation);

        await ValidateItemListAsync(Items, appliedItemValidation, OnItemClickAsync);
    }


    private async Task OnItemClickAsync(TItem dataValue)
    {
        Value = dataValue;
        await ValueChanged.InvokeAsync(Value);
    }


    public void RequestInstantiation()
    {
        instantiate = true;
    }

    protected override bool ShouldRender()
    {
        return instantiate;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ((firstRender && (Dialog is null)) || instantiate)
        {
            instantiate = false;
            await jsRuntime.InvokeAsync<object>("BlazorMdc.select.init", elementReference);
        }
    }

}
