@namespace BlazorMdc

@typeparam TItem

@inherits MdcComponentBase

@inject IJSRuntime jsRuntime


<div @ref="elementReference"
     class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    <div class="mdc-select__anchor">
        <i class="mdc-select__dropdown-icon"></i>
        <div class="mdc-select__selected-text @alignClass" role="button" aria-haspopup="listbox" aria-labelledby="@labelId" aria-disabled="Disabled">@selectedText</div>

        @if (appliedInputStyle == MdcSelectInputStyle.Outlined)
        {
            <span class="mdc-notched-outline">
                <span class="mdc-notched-outline__leading"></span>
                <span class="mdc-notched-outline__notch">
                    <span id="@labelId" class="mdc-floating-label @floatingLabelClass">@Label</span>
                </span>
                <span class="mdc-notched-outline__trailing"></span>
            </span>
        }
        else
        {
            <span id="@labelId" class="mdc-floating-label @floatingLabelClass">@Label</span>
            <div class="mdc-line-ripple"></div>
        }
    </div>

    <div class="mdc-select__menu mdc-menu mdc-menu-surface">
        <ul class="mdc-list">
            @foreach (var item in Items)
            {
                var dv = item.DataValue;

                if (object.Equals(item.DataValue, initialValue))
                {
                    <li class="mdc-list-item mdc-list-item--selected @alignClass" data-value="@item.DataValue" aria-selected="true" role="option" @onclick="@(_ => OnItemClickAsync(dv))"><span class="mdc-list-item__text">@item.Text</span></li>
                }
                else
                {
                    <li class="mdc-list-item @alignClass" data-value="@item.DataValue" aria-selected="false" role="option" @onclick=@(_ => OnItemClickAsync(dv))><span class="mdc-list-item__text">@item.Text</span></li>
                }
            }
        </ul>
    </div>
</div>



@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    //  2020-04-13  Mark Stega
    //              Moved ClassMapper to constructor
    //
    public class Item<T>
    {
        public T DataValue { get; set; }
        public string Text { get; set; }
    }


    [Parameter] public MdcSelectInputStyle? SelectInputStyle { get; set; }
    [Parameter] public MdcTextAlignStyle? TextAlignStyle { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public IEnumerable<Item<TItem>> Items { get; set; }
    [Parameter] public TItem Value { get; set; } = default;
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }


    private ElementReference elementReference;
    private MdcSelectInputStyle appliedInputStyle => CascadingDefaults.AppliedStyle(SelectInputStyle);
    private string labelId = Utilities.GenerateCssElementSelector();
    private string selectedText = "";
    private string floatingLabelClass = "";
    private string alignClass => Utilities.GetTextAlignClass(CascadingDefaults.AppliedStyle(TextAlignStyle));
    private TItem initialValue;
    private TItem cachedCurrentValue;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-select")
            .AddIf("mdc-select--outlined", () => (appliedInputStyle == MdcSelectInputStyle.Outlined))
            .AddIf("mdc-select--disabled", () => Disabled);

        initialValue = (Value is null) ? Items.FirstOrDefault().DataValue : Value;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // All values that are bound to HTML are set once at initialization and then left unchanged
        // because allowing Blazor to re-render conflicts with the Material Theme js rendering. This
        // results in the floating label jumping to the wrong place.

        if (Value != null && !string.IsNullOrEmpty(Value.ToString()))
        {
            floatingLabelClass = "mdc-floating-label--float-above";
        }

        // Values
        cachedCurrentValue = (Value is null) ? Items.FirstOrDefault().DataValue : Value;
        selectedText = Items.Where(i => object.Equals(i.DataValue, cachedCurrentValue)).FirstOrDefault().Text;

        if (Value is null || string.IsNullOrEmpty(Value.ToString()))
        {
            Value = Items.FirstOrDefault().DataValue;
        }
        else if (Items.Where(i => object.Equals(i.DataValue, Value)).Count() == 0)
        {
            string itemList = "{ ";
            string prepend = "";

            foreach (var item in Items)
            {
                itemList += $"{prepend} '{item.DataValue}'";
                prepend = ",";
            }

            itemList += " }";

            throw new ArgumentException($"MdcSelect cannot select item with data value of '{Value?.ToString()}' from {itemList}");
        }
    }

    private async Task OnItemClickAsync(TItem dataValue)
    {
        Value = dataValue;
        cachedCurrentValue = Value;
        await ValueChanged.InvokeAsync(Value);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.select.init", elementReference);
        }
    }
}
