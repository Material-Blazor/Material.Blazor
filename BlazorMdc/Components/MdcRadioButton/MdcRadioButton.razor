@namespace BlazorMdc

@typeparam TItem

@inherits MdcInputComponentBase<bool>

@implements IMdcDialogChild

@inject IJSRuntime jsRuntime


<div class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()"
     @ref="@formReference">

    <div @ref="@radioButtonReference" class="@buttonContainerClass">
        <input class="mdc-radio__native-control @disabledClass"
                type="radio"
                id="@radioId"
                name="@RadioGroupName"
                disabled="@Disabled"
                @onclick="@OnClick">
 
        <div class="mdc-radio__background">
            <div class="mdc-radio__outer-circle"></div>
            <div class="mdc-radio__inner-circle"></div>
        </div>
        <div class="mdc-radio__ripple"></div>
    </div>
    <label for="@radioId">@Label</label>

</div>

@code{
    //
    //  2020-04-20  Mark Stega
    //              Created (loosely) from MdcRadioButtons
    //

    [CascadingParameter] private IMdcDialog Dialog { get; set; }

    [Parameter] public TItem CheckedValue { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string ButtonContainerClass { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;
    [Parameter] public string RadioGroupName { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }

    private bool instantiate = false;
    private readonly string radioId = Utilities.GenerateCssElementSelector();
    private ElementReference formReference { get; set; }
    private ElementReference radioButtonReference;
    private string buttonContainerClass;
    private string disabledClass = "";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (string.IsNullOrEmpty(RadioGroupName))
        {
            throw new ArgumentException("RadioGroupName is a required parameter in MdcRadioButton.");
        }

        ClassMapper
            .Add("mdc-form-field");

        if (EnableTouchWrapper)
        {
            buttonContainerClass = "mdc-radio mdc-radio--touch";
        }
        else
        {
            buttonContainerClass = "mdc-radio";
        }

        if (!string.IsNullOrWhiteSpace(ButtonContainerClass))
        {
            buttonContainerClass += " " + ButtonContainerClass;
        }

        if (Disabled)
        {
            disabledClass = " mdc-radio--disabled";
        }

        if (Dialog != null)
        {
            Dialog.RegisterLayoutAction(this);
        }
    }


    public void RequestInstantiation()
    {
        instantiate = true;
    }


    protected override bool ShouldRender()
    {
        return instantiate;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ((firstRender && (Dialog is null)) || instantiate)
        {
            instantiate = false;
            await jsRuntime.InvokeAsync<object>("BlazorMdc.radioButton.init", radioButtonReference, formReference, Value);
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    internal async Task ClickAsync() => await jsRuntime.InvokeVoidAsync("BlazorMdc.radioButton.click", radioButtonReference);
}
