@namespace BlazorMdc
@inherits ComponentFoundation


@if (DisplayedToasts.Any())
{
    <div class="bmdc-toast-container @PositionClass">
        @foreach (var toast in DisplayedToasts.OrderBy(x => x.TimeStamp))
        {
            var toastId = toast.Id;

            <div @key="toast" class="mdc-elevation--z5 bmdc-toast @toast.Settings.ContainerLevelClass @toast.Settings.StatusClass @toast.Settings.AppliedCssClass">

                @if (toast.Settings.AppliedShowIcon)
                {
                    var iconHelper = new MTIconHelper(null, toast.Settings.AppliedIconName, toast.Settings.AppliedIconFoundry);
                    var filterClass = iconHelper.RequiresColorFilter ? toast.Settings.IconFilterClass : "";

                    <div class="bmdc-toast-icon @filterClass">
                        <MTIcon IconName="@toast.Settings.AppliedIconName" IconFoundry="@toast.Settings.IconFoundry" aria-hidden="true" />
                    </div>
                }

                <div class="bmdc-toast-body">
                    <div class="bmdc-toast-header">
                        <div class="bmdc-toast-heading-container">
                            <h5 class="mdc-typography--subtitle1">@((MarkupString)toast.Settings.AppliedHeading)</h5>
                        </div>

                        @if (toast.Settings.CloseMethod != MTToastCloseMethod.Timeout)
                        {
                            <MTButton @onclick="@(() => CloseToast(toastId))" LeadingIcon="close" ButtonStyle="@MTButtonStyle.Text" class="bmdc-toast-close-button" />
                        }
                    </div>

                    <p class="mdc-typography--body2">@((MarkupString)toast.Settings.AppliedMessage)</p>
                </div>
            </div>
        }
    </div>
}