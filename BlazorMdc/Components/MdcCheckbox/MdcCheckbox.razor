@namespace BlazorMdc

@inherits MdcInputComponentBase<bool>

@inject IJSRuntime jsRuntime


<div @ref="@formReference"
        class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()">

    <div @ref="@elementReference" class="mdc-checkbox @disabledClass">
        <input @bind="@CurrentValue"
               type="checkbox"
               class="mdc-checkbox__native-control @FieldClass"
               id="@Id"
               disabled="@Disabled"/>
        <div class="mdc-checkbox__background">
            <svg class="mdc-checkbox__checkmark"
                 viewBox="0 0 24 24">
                <path class="mdc-checkbox__checkmark-path"
                      fill="none"
                      d="M1.73,12.91 8.1,19.28 22.79,4.59" />
            </svg>
            <div class="mdc-checkbox__mixedmark"></div>
        </div>
        <div class="mdc-checkbox__ripple"></div>
    </div>
    <label for="@Id">@Label</label>
</div>


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    //  2020-04-13  Mark Stega
    //              Moved ClassMapper to constructor
    //
    [Parameter] public string Label { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public bool IsFormField { get; set; }


    private string disabledClass => Disabled ? "mdc-checkbox--disabled" : "";
    private ElementReference elementReference;
    private ElementReference formReference;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper.Add("")
            .AddIf("mdc-form-field", () => (IsFormField || !(string.IsNullOrWhiteSpace(Label))));
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.checkBox.setChecked", elementReference, formReference, CurrentValue, IsFormField);
        }
    }

}