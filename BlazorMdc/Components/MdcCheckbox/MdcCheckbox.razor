@namespace BlazorMdc

@inherits MdcInputComponentBase<bool>

@inject IJSRuntime jsRuntime


<div @ref="@formReference" class="@formFieldClass">

    <div class="mdc-touch-target-wrapper">
        <div @ref="@elementReference"
             class="@ClassMapper.ToString()"
             style="@StyleMapper.ToString()">

            <input @bind="@ReportingValue"
                   type="checkbox"
                   class="mdc-checkbox__native-control @FieldClass"
                   id="@Id"
                   disabled="@Disabled" />
            <div class="mdc-checkbox__background">
                <svg class="mdc-checkbox__checkmark"
                     viewBox="0 0 24 24">
                    <path class="mdc-checkbox__checkmark-path"
                          fill="none"
                          d="M1.73,12.91 8.1,19.28 22.79,4.59" />
                </svg>
                <div class="mdc-checkbox__mixedmark"></div>
            </div>
            <div class="mdc-checkbox__ripple"></div>
        </div>
    </div>
    <label for="@Id">@Label</label>
</div>


@code {
        //
        //  2020-04-01  Mark Stega
        //              Changed to use class & style mappers
        //
        //  2020-04-13  Mark Stega
        //              Moved ClassMapper to constructor
        //
        [Parameter] public string Label { get; set; }
        [Parameter] public EventCallback OnChange { get; set; }
        [Parameter] public bool IsFormField { get; set; }


    private string formFieldClass => (IsFormField || !(string.IsNullOrWhiteSpace(Label))) ? "mdc-form-field" : "";
    private ElementReference elementReference;
    private ElementReference formReference;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper.Add("mdc-checkbox mdc-checkbox--touch")
            .AddIf("mdc-checkbox--disabled", () => Disabled);

        HasOnRenderValueSetter = true;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }


    private async Task<bool> ClickCheckbox(bool value)
    {
        await Task.CompletedTask;
        return value;
    }


    protected override async Task OnRenderValueSetter(bool value)
    {
        UnderlyingValue = value;
        await jsRuntime.InvokeAsync<object>("BlazorMdc.checkBox.setChecked", elementReference, formReference, value, IsFormField);
    }


    protected override async Task InitializeMdcComponent() => await jsRuntime.InvokeAsync<object>("BlazorMdc.checkBox.setChecked", elementReference, formReference, ReportingValue, IsFormField);
}