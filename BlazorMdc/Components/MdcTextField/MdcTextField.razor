@namespace BlazorMdc

@inherits MdcInputComponentBase<string>

@inject IJSRuntime jsRuntime


<div @ref="textFieldReference"
     class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    @LeadingIconMarkup
    <input @ref="@inputReference"
           type="@Type"
           id="@Id"
           class="mdc-text-field__input @Utilities.GetTextAlignClass(CascadingDefaults.AppliedStyle(TextAlignStyle)) @FieldClass"
           @bind="@ReportingValue"
           aria-labelledby="@labelId"
           disabled="@Disabled"
           formnovalidate="@FormNoValidate"
           tabindex="@TabIndex"
           @attributes="@AttributeMapper.ToDictionary()"
           @oninput="OnInput"
           @onmouseover="OnMouseOver"
           @onmouseout="OnMouseOut"
           @onfocus="OnFocus"
           @onfocusin="OnFocusIn"
           @onfocusout="OnFocusOut">

    @TrailingIconMarkup

    @if (appliedTextInputStyle == MdcTextInputStyle.Outlined)
    {
        <div class="mdc-notched-outline">
            <div class="mdc-notched-outline__leading"></div>
            <div class="mdc-notched-outline__notch">
                <label class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</label>
            </div>
            <div class="mdc-notched-outline__trailing"></div>
        </div>
    }
    else
    {
        <label class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</label>
        <div class="mdc-line-ripple"></div>
    }
</div>

@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    //  2020-04-13  Mark Stega
    //              Moved ClassMapper to constructor
    //

#nullable enable annotations
    [Parameter] public MdcTextInputStyle? TextInputStyle { get; set; }
    [Parameter] public MdcTextAlignStyle? TextAlignStyle { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string TabIndex { get; set; } = "";
    [Parameter] public bool NoLabel { get; set; } = false;
    [Parameter] public string? LeadingIcon { get; set; }
    [Parameter] public string? TrailingIcon { get; set; }
    [Parameter] public bool FormNoValidate { get; set; } = false;
    [Parameter] public EventCallback<ChangeEventArgs> OnInput { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseOver { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseOut { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocusIn { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocusOut { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
#nullable restore annotations


    private MdcTextInputStyle appliedTextInputStyle => CascadingDefaults.AppliedStyle(TextInputStyle);
    private ElementReference textFieldReference;
    private ElementReference inputReference;
    private string labelId = Guid.NewGuid().ToString();
    private string floatingLabelClass;
    private MarkupString LeadingIconMarkup;
    private MarkupString TrailingIconMarkup;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add($"mdc-text-field {FieldClass} {CascadingDefaults.TextFieldCssClass}")
            .AddIf("mdc-text-field--outlined", () => appliedTextInputStyle == MdcTextInputStyle.Outlined)
            .AddIf("mdc-text-field--fullwidth", () => appliedTextInputStyle == MdcTextInputStyle.FullWidth)
            .AddIf("mdc-text-field--no-label", () => NoLabel)
            .AddIf("mdc-text-field--disabled", () => Disabled)
            .AddIf("mdc-text-field--with-leading-icon", () => !(LeadingIcon is null))
            .AddIf("mdc-text-field--with-trailing-icon", () => !(TrailingIcon is null));

        ForceShouldRenderToTrue = true;
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        LeadingIconMarkup = (MarkupString)((LeadingIcon is null) ? "" : $"<i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\" tabindex=\"-1\" role=\"button\">{LeadingIcon}</i>");

        TrailingIconMarkup = (MarkupString)((TrailingIcon is null) ? "" : $"<i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\" tabindex=\"-1\" role=\"button\">{TrailingIcon}</i>");

        floatingLabelClass = string.IsNullOrEmpty(ReportingValue) ? "" : "mdc-floating-label--float-above";
    }


    protected override async Task InitializeMdcComponent() => await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.init", textFieldReference);


    internal async Task Select()
    {
        await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.select", inputReference);
    }
}
