@namespace BlazorMdc

@inherits MdcInputComponentBase<string>

@inject IJSRuntime jsRuntime


<div @ref="elementReference"
     class="@ClassMapper.AsString()"
     style="@StyleMapper.AsString()">

    @LeadingIconMarkup
    <input type="@Type"
           id="@Id"
           class="mdc-text-field__input @alignClass @FieldClass"
           @bind="@CurrentValue"
           aria-labelledby="@labelId"
           disabled="@Disabled"
           formnovalidate="@FormNoValidate"
           tabindex="@TabIndex"
           @attributes="@AttributeMapper.ToDictionary()"
           @oninput="OnInput"
           @onmouseover="OnMouseOver"
           @onmouseout="OnMouseOut"
           @onfocus="OnFocus"
           @onfocusin="OnFocusIn"
           @onfocusout="OnFocusOut">
    @TrailingIconMarkup

    @if (myInputStyle == MdcTextInputStyle.Outlined)
    {
        <div class="mdc-notched-outline">
            <div class="mdc-notched-outline__leading"></div>
            <div class="mdc-notched-outline__notch">
                <label class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</label>
            </div>
            <div class="mdc-notched-outline__trailing"></div>
        </div>
    }
    else
    {
        <label class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</label>
        <div class="mdc-line-ripple"></div>
    }
</div>

@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    [Parameter] public MdcTextInputStyle? InputStyle { get; set; }
    [Parameter] public MdcTextAlign? TextAlign { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string TabIndex { get; set; } = "";
    [Parameter] public bool NoLabel { get; set; } = false;
    [Parameter] public string? LeadingIcon { get; set; }
    [Parameter] public string? TrailingIcon { get; set; }
    [Parameter] public bool FormNoValidate { get; set; } = false;
    [Parameter] public EventCallback<ChangeEventArgs> OnInput { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseOver { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnMouseOut { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocusIn { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocusOut { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }


    private ElementReference elementReference;
    private MdcTextInputStyle myInputStyle;
    private MdcTextAlign myTextAlign;
    private string labelId = Guid.NewGuid().ToString();
    private string alignClass;
    private string floatingLabelClass;
    private MarkupString LeadingIconMarkup;
    private MarkupString TrailingIconMarkup;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Setup();
    }

    private void Setup()
    {
        myInputStyle = AppliedDefaults.AppliedTextInputStyle(InputStyle);
        myTextAlign = AppliedDefaults.AppliedTextAlign(TextAlign);

        LeadingIconMarkup = (MarkupString)((LeadingIcon is null) ? "" : $"<i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--leading\" tabindex=\"-1\" role=\"button\">{LeadingIcon}</i>");

        TrailingIconMarkup = (MarkupString)((TrailingIcon is null) ? "" : $"<i class=\"material-icons mdc-text-field__icon mdc-text-field__icon--trailing\" tabindex=\"-1\" role=\"button\">{TrailingIcon}</i>");

        alignClass = Utilities.GetTextAlignClass(myTextAlign);

        floatingLabelClass = string.IsNullOrEmpty(CurrentValue) ? "" : "mdc-floating-label--float-above";

        ClassMapper
            .Clear()
            .Add($"mdc-text-field {FieldClass} {AppliedDefaults.TextFieldCssClass}")
            .If("mdc-text-field--outlined", () => (myInputStyle == MdcTextInputStyle.Outlined))
            .If("mdc-text-field--fullwidth", () => (myInputStyle == MdcTextInputStyle.FullWidth))
            .If("mdc-text-field--no-label", () => NoLabel)
            .If("mdc-text-field--disabled", () => Disabled)
            .If("mdc-text-field--with-leading-icon", () => !(LeadingIcon is null))
            .If("mdc-text-field--with-trailing-icon", () => !(TrailingIcon is null));
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.init", elementReference);
        }
    }

    internal async Task Select()
    {
        await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.select", elementReference);
    }
}
