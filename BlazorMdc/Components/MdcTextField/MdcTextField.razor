@namespace BlazorMdc
@inherits MdcInputComponentBase<string>


<div @ref="TextFieldReference"
     @attributes="@AttributesToSplat(SplatType.ClassAndStyleOnly)">

    @if (AppliedTextInputStyle == BEnum.TextInputStyle.Filled || AppliedTextInputStyle == BEnum.TextInputStyle.FullWidth)
    {
        <span class="mdc-text-field__ripple"></span>
    }

    @if (!string.IsNullOrWhiteSpace(LeadingIcon))
    {
        <PMdcIcon Icon="@LeadingIcon" IconFoundry="@IconFoundry" Class="mdc-text-field__icon mdc-text-field__icon--leading" tabindex="-1" role="button" />
    }

    <input @ref="@InputReference"
           id="@Id"
           class="mdc-text-field__input @Utilities.GetTextAlignClass(CascadingDefaults.AppliedStyle(TextAlignStyle)) @FieldClass"
           @bind="@ReportingValue"
           @attributes="@AttributesToSplat(SplatType.ExcludeClassAndStyle)">

    @if (!string.IsNullOrWhiteSpace(TrailingIcon))
    {
        <PMdcIcon Icon="@TrailingIcon" IconFoundry="@IconFoundry" Class="mdc-text-field__icon mdc-text-field__icon--trailing" tabindex="-1" role="button" />
    }

    @if (AppliedTextInputStyle == BEnum.TextInputStyle.Outlined)
    {
        <span class="mdc-notched-outline">
            <span class="mdc-notched-outline__leading"></span>

            @if (!NoLabel)
            {
                <span class="mdc-notched-outline__notch">
                    <span class="mdc-floating-label @FloatingLabelClass" for="@Id" id="@labelId">@Label</span>
                </span>
            }

            <span class="mdc-notched-outline__trailing"></span>
        </span>
    }
    else
    {
        @if (AppliedTextInputStyle == BEnum.TextInputStyle.Filled && ! NoLabel)
        {
            <span class="mdc-floating-label @FloatingLabelClass" for="@Id" id="@labelId">@Label</span>
        }

        <span class="mdc-line-ripple"></span>
    }
</div>