@namespace BlazorMdc

@inherits MdcComponentBase

@inject IJSRuntime jsRuntime

<button @ref="@elementReference"
        class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()"
        @onclick="@OnClick"
        @onmousedown="@OnMouseDown"
        @onkeydown="@OnKeyDown"
        @ontouchstart="@OnTouchStart"
        disabled="@Disabled"
        tabindex="@TabIndex"
        data-mdc-dialog-action="@DialogAction"
        type="@Type">
    <div class="mdc-button__ripple"></div>
    @LeadingIconMarkup
    <span class="mdc-button__label">@Label</span>
    @TrailingIconMarkup
</button>


@code {
    //
    //  2020-03-31  Mark Stega
    //              Changed to use class & style mappers
    //
    //  2020-04-01  Mark Stega
    //              Changed to re-enable AppliedButtonStyle
    //
    //  2020-04-13  Mark Stega
    //              Made ButtonStyle nullable
    //              Moved ClassMapper to constructor
    //
    [Parameter] public MdcButtonStyle? ButtonStyle { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public string Label { get; set; }
    [Parameter] public string TabIndex { get; set; } = "0";
    [Parameter] public string? LeadingIcon { get; set; }
    [Parameter] public string? TrailingIcon { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public EventCallback OnMouseDown { get; set; }
    [Parameter] public EventCallback OnKeyDown { get; set; }
    [Parameter] public EventCallback OnTouchStart { get; set; }
    [Parameter] public string DialogAction { get; set; }


    private ElementReference elementReference;
    private MarkupString LeadingIconMarkup => (MarkupString)((LeadingIcon is null) ? "" : $"<i class=\"material-icons mdc-button__icon\" aria-hidden=\"true\">{LeadingIcon}</i>");
    private MarkupString TrailingIconMarkup => (MarkupString)((TrailingIcon is null) ? "" : $"<i class=\"material-icons mdc-button__icon\" aria-hidden=\"true\">{TrailingIcon}</i>");

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-button")
            .AddIf("mdc-button--raised", () => (CascadingDefaults.AppliedStyle(ButtonStyle) == MdcButtonStyle.ContainedRaised))
            .AddIf("mdc-button--unelevated", () => (CascadingDefaults.AppliedStyle(ButtonStyle) == MdcButtonStyle.ContainedUnelevated))
            .AddIf("mdc-button--outlined", () => (CascadingDefaults.AppliedStyle(ButtonStyle) == MdcButtonStyle.Outlined));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.button.init", elementReference);
        }
    }
}
