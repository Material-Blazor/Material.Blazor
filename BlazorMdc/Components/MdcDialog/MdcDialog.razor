@namespace BlazorMdc

@inherits MdcComponentBase

@inject IJSRuntime jsRuntime

<div @ref="dialogElem"
     class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()" 
     aria-labelledby="@titleId"
     aria-describedby="@descId">
    
    <div class="mdc-dialog__container">
        <div class="mdc-dialog__surface">
            <h2 id="@titleId" class="mdc-dialog__title">@Title</h2>
            <div id="@descId" class="mdc-dialog__content">@Body</div>
            @if (Buttons != null)
            {
                <footer class="mdc-dialog__actions">
                    @Buttons
                </footer>
            }
        </div>
    </div>
    
    <div class="mdc-dialog__scrim"></div>

</div>


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment Body { get; set; }
    [Parameter] public RenderFragment Buttons { get; set; }
    [Parameter] public string ScrimClickAction { get; set; } = "close";
    [Parameter] public string EscapeKeyAction { get; set; } = "close";

    private string titleId = Utilities.GenerateCssElementSelector();
    private string descId = Utilities.GenerateCssElementSelector();
    private ElementReference dialogElem;

    public async Task<string> ShowAsync()
        => await jsRuntime.InvokeAsync<string>("BlazorMdc.dialog.show", dialogElem, EscapeKeyAction, ScrimClickAction);

    public async Task HideAsync()
        => await jsRuntime.InvokeAsync<string>("BlazorMdc.dialog.hide", dialogElem);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-dialog");
    }
}
