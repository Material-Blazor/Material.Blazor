@namespace BlazorMdc

@inherits MdcComponentBase

@inject IJSRuntime jsRuntime

@if (isOpen)
{
    <div @key="@key"
         @ref="dialogElem"
            class="@ClassMapper.ToString()"
            style="@StyleMapper.ToString()"
            aria-labelledby="@titleId"
            aria-describedby="@descId">

        <div class="mdc-dialog__container">
            <div class="mdc-dialog__surface @overflowClass">
                <h2 id="@titleId" class="mdc-dialog__title">@Title</h2>
                <div id="@descId" class="mdc-dialog__content @overflowClass">@Body</div>
                @if (Buttons != null)
                {
                    <footer class="mdc-dialog__actions">
                        @Buttons
                    </footer>
                }
            </div>
        </div>

        <div class="mdc-dialog__scrim"></div>
    </div>
}


@code {
    //
    //  2020-04-01  Mark Stega
    //              Changed to use class & style mappers
    //
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment Body { get; set; }
    [Parameter] public RenderFragment Buttons { get; set; }
    [Parameter] public string ScrimClickAction { get; set; } = "close";
    [Parameter] public string EscapeKeyAction { get; set; } = "close";
    [Parameter] public bool OverflowVisible { get; set; } = false;


    private string titleId = Utilities.GenerateCssElementSelector();
    private string descId = Utilities.GenerateCssElementSelector();
    private ElementReference dialogElem;
    private bool isOpen = false;
    private bool afterRenderShowAction = false;
    private string overflowClass => OverflowVisible ? "bmdc-dialog-overflow-visible" : "";
    private string key = "";
    TaskCompletionSource<string> tcs;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-dialog");
    }


    public async Task<string> ShowAsync()
    {
        if (isOpen)
        {
            throw new InvalidOperationException("Cannot show MdcDialog that is already open");
        }
        else
        {
            key = Utilities.GenerateCssElementSelector();
            isOpen = true;
            afterRenderShowAction = true;
            StateHasChanged();
            tcs = new TaskCompletionSource<string>();
            return await tcs.Task;
        }
    }


    public async Task HideAsync()
    {
        if (isOpen)
        {
            await jsRuntime.InvokeAsync<string>("BlazorMdc.dialog.hide", dialogElem);
            tcs?.SetCanceled();
            isOpen = false;
            StateHasChanged();
        }
        else
        {
            throw new InvalidOperationException("Cannot hide MdcDialog that is not already open");
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (afterRenderShowAction)
        {
            try
            {
                afterRenderShowAction = false;
                tcs.SetResult(await jsRuntime.InvokeAsync<string>("BlazorMdc.dialog.show", dialogElem, EscapeKeyAction, ScrimClickAction));
                isOpen = false;
                StateHasChanged();
            }
            catch
            {
                tcs.SetCanceled();
            }
        }
    }
}
