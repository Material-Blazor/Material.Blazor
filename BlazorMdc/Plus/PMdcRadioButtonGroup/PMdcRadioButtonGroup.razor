@namespace BlazorMdc

@typeparam TItem

@inherits MdcValidatingInputComponentBase<TItem>


<div class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    @{ int index = 0; }
    @foreach (var item in Items)
    {
        @if ((index++ > 0) && Vertical)
        {
            <div class="bmdc-mdc-radio-break"></div>
        }

        <MdcRadioButton @key="item"
                        Value="@Value"
                        ValueChanged="@ValueChanged"
                        ValueExpression="@ValueExpression"
                        ButtonContainerClass="@item.ButtonContainerClass"
                        Disabled="@item.Disabled"
                        EnableTouchWrapper="@EnableTouchWrapper"
                        Label="@item.Label"
                        CheckedValue="@item.SelectedValue"
                        RadioGroupName="@radioGroupName"
                        @onclick="@(_ => OnItemClickAsync(item.SelectedValue))" />
    }

</div>

@code {
    //
    //  2020-04-22  Mark Stega
    //              Changed to use the newly created MdcRadioButton
    //
    [Parameter] public IEnumerable<MdcListElement<TItem>> Items { get; set; }
    [Parameter] public bool Vertical { get; set; } = false;
    [Parameter] public MdcItemValidation? ItemValidation { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;


    private string radioGroupName = Utilities.GenerateCssElementSelector();


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        MdcItemValidation appliedItemValidation = CascadingDefaults.AppliedItemValidationRadioButtonGroup(ItemValidation);

        await ValidateItemListAsync(Items, appliedItemValidation, OnItemClickAsync);
    }


    private async Task OnItemClickAsync(TItem SelectedValue)
    {
        Value = SelectedValue;
        await ValueChanged.InvokeAsync(Value);
    }


    protected override bool ShouldRender()
    {
        return false;
    }
}
