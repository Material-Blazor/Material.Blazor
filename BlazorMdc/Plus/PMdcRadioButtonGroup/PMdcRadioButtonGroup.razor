@namespace BlazorMdc

@typeparam TItem

@inherits MdcValidatingInputComponentBase<TItem>

@inject IJSRuntime jsRuntime


<div class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    @{ int index = 0; }
    @foreach (var w in wrappers)
    {
        @if ((index++ > 0) && Vertical)
        {
            <div class="bmdc-mdc-radio-break"></div>
        }

        var itemChecked = EqualityComparer<TItem>.Default.Equals(Value, w.ListElement.SelectedValue);

        <MdcRadioButton @key="@w.ListElement"
                        @ref="@w.RadioButton"
                        Value="@itemChecked"
                        ButtonContainerClass="@w.ListElement.ButtonContainerClass"
                        Disabled="@w.ListElement.Disabled"
                        EnableTouchWrapper="@EnableTouchWrapper"
                        Label="@w.ListElement.Label"
                        CheckedValue="@w.ListElement.SelectedValue"
                        RadioGroupName="@radioGroupName"
                        OnClick="@(_ => OnItemClickAsync(w.ListElement.SelectedValue))" />

        var x = w;
    }

</div>

@code {
    private class Wrapper<T>
    {
        public MdcListElement<T> ListElement { get; set; }
        public MdcRadioButton<T> RadioButton { get; set; }
    }


    //
    //  2020-04-22  Mark Stega
    //              Changed to use the newly created MdcRadioButton
    //
    [Parameter] public IEnumerable<MdcListElement<TItem>> Items { get; set; }
    [Parameter] public bool Vertical { get; set; } = false;
    [Parameter] public MdcItemValidation? ItemValidation { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;


    private string radioGroupName = Utilities.GenerateCssElementSelector();
    private Wrapper<TItem>[] wrappers;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        MdcItemValidation appliedItemValidation = CascadingDefaults.AppliedItemValidationRadioButtonGroup(ItemValidation);

        await ValidateItemListAsync(Items, appliedItemValidation, OnItemClickAsync);

        wrappers = (from i in Items
                    select new Wrapper<TItem>
                    {
                        ListElement = i
                    }).ToArray();
    }


    private async Task OnItemClickAsync(TItem SelectedValue)
    {
        NativeComponentBoundValue = SelectedValue;
        await Task.CompletedTask;
    }


    internal override async Task ValueSetterAsync(TItem value)
    {
        var w = wrappers.Where(w => EqualityComparer<TItem>.Default.Equals(w.ListElement.SelectedValue, value)).FirstOrDefault();

        await w.RadioButton.ClickAsync();
    }
}
