@namespace BlazorMdc

@typeparam TItem

@inherits MdcValidatingInputComponentBase<TItem>

@inject IJSRuntime jsRuntime


    <div class="@ClassMapper.ToString()"
         style="@StyleMapper.ToString()">

        @{ bool isFirst = true; }
        @foreach (var item in ItemArray)
        {
            @if (Vertical && !isFirst)
            {
                <div class="bmdc-mdc-radio-break"></div>
            }

            isFirst = false;

            <MdcRadioButton @key="@item"
                            Value="@localValue"
                            ValueChanged="@vChanged"
                            ValueExpression="vExpression"
                            TItem="TItem"
                            ButtonContainerClass="@item.ButtonContainerClass"
                            Disabled="@item.Disabled"
                            EnableTouchWrapper="@EnableTouchWrapper"
                            Label="@item.Label"
                            CheckedValue="@item.SelectedValue"
                            RadioGroupName="@radioGroupName"
                            OnClick="@(OnItemClickAsync)" />
        }
        <hr />

    </div>

@code {
    //
    //  2020-04-22  Mark Stega
    //              Changed to use the newly created MdcRadioButton
    //
    [Parameter] public IEnumerable<MdcListElement<TItem>> Items { get; set; }
    [Parameter] public bool Vertical { get; set; } = false;
    [Parameter] public MdcItemValidation? ItemValidation { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;


    private string radioGroupName = Utilities.GenerateCssElementSelector();

    private MdcListElement<TItem>[] ItemArray;

    private TItem localValue;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        ItemArray = Items.ToArray();

        MdcItemValidation appliedItemValidation = CascadingDefaults.AppliedItemValidationRadioButtonGroup(ItemValidation);

        localValue = Value;

        await ValidateItemListAsync(ItemArray, appliedItemValidation, SetInitialItem);
    }


    private async Task SetInitialItem(TItem SelectedValue)
    {
        localValue = SelectedValue;
        await OnItemClickAsync(SelectedValue);
    }


    private async Task OnItemClickAsync(TItem SelectedValue)
    {
        NativeComponentBoundValue = localValue;
        await Task.CompletedTask;
    }

    private async Task vChanged(TItem newValue)
    {
        localValue = newValue;
    }

    private System.Linq.Expressions.Expression<System.Func<TItem>> vExpression => (() => localValue);

    protected override bool ShouldRender()
    {
        return true;
    }
}
