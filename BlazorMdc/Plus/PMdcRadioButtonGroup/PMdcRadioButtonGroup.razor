@namespace BlazorMdc

@typeparam TItem

@inherits MdcValidatingInputComponentBase<TItem>

@inject IJSRuntime jsRuntime


<div class="@ClassMapper.ToString()"
        style="@StyleMapper.ToString()">

    @foreach (var item in ItemArray)
    {
        @if (Vertical && isNotFirst)
        {
            <div class="bmdc-mdc-radio-break"></div>
        }

        isNotFirst = true;

        <MdcRadioButton @key="@item"
                        @bind-Value="@ReportingValue"
                        TItem="TItem"
                        ButtonContainerClass="@item.ButtonContainerClass"
                        Disabled="@item.Disabled"
                        EnableTouchWrapper="@EnableTouchWrapper"
                        Label="@item.Label"
                        CheckedValue="@item.SelectedValue"
                        RadioGroupName="@radioGroupName" />
    }

</div>


@code {
    //
    //  2020-04-22  Mark Stega
    //              Changed to use the newly created MdcRadioButton
    //
    [Parameter] public IEnumerable<MdcListElement<TItem>> Items { get; set; }
    [Parameter] public bool Vertical { get; set; } = false;
    [Parameter] public MdcItemValidation? ItemValidation { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;


    private bool isNotFirst = false;
    private string radioGroupName = Utilities.GenerateCssElementSelector();
    private MdcListElement<TItem>[] ItemArray;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ItemArray = Items.ToArray();

        MdcItemValidation appliedItemValidation = CascadingDefaults.AppliedItemValidationRadioButtonGroup(ItemValidation);

        ForceShouldRenderToTrue = true;

        ReportingValue = ValidateItemList(ItemArray, appliedItemValidation);
    }


    private async Task ValidationValueSetter(TItem value)
    {
        ReportingValue = value;
        await Task.CompletedTask;
    }
}
