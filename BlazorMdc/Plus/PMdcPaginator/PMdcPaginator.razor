@namespace BlazorMdc

@inherits MdcComponentBase

@using System.Linq

@inject IJSRuntime jsRuntime


<div class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    <div class="bmdc-paginator">
        <div class="bmdc-paginator__container">
            <div class="bmdc-paginator__float-left">
                <div class="bmdc-paginator__float-left">
                    @rowsText
                </div>

                <div class="bmdc-dp-menu__float-left">
                    <MdcIconButtonToggle @bind-Value="@menuOpen" OnClick="@OnMenuToggleAsync" IconOn="@MdcIcons.Icon__arrow_drop_up" IconOff="@MdcIcons.Icon__arrow_drop_down" />
                    <div class="mdc-menu-surface--anchor">
                        <MdcMenu @ref="menu">
                            @foreach (var rows in RowsPerPageSelection)
                            {
                                <MdcListItem Text="@rows.ToString("G0")" />
                            }
                        </MdcMenu>
                    </div>
                </div>
            </div>

            <div class="bmdc-paginator__float-left">
                <div class="bmdc-paginator__float-left bmdc-paginator__spaced">
                    <div class="bmdc-paginator__position-hidden">
                        @maxPositionText
                    </div>
                    <div>
                        @positionText
                    </div>
                </div>

                <div class="bmdc-paginator__float-left">
                    <MdcIconButton Icon="@MdcIcons.Icon__chevron_left" OnClick="@OnPreviousClick" Disabled="@previousDisabled" />
                </div>
                <div class="bmdc-paginator__float-left">
                    <MdcIconButton Icon="@MdcIcons.Icon__chevron_right" OnClick="@OnNextClick" Disabled="@nextDisabled" />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public IEnumerable<int> RowsPerPageSelection { get; set; }
    [Parameter] public int ItemCount { get; set; }

    private int _rowsPerPage = 0;
    [Parameter] public int RowsPerPage
    {
        get => _rowsPerPage;
        set
        {
            if (value != _rowsPerPage)
            {
                _rowsPerPage = value;
                _ = RowsPerPageChanged.InvokeAsync(value);
                PageNumber = _pageNumber; // Forces a clamp
            }
        }
    }

    [Parameter] public EventCallback<int> RowsPerPageChanged { get; set; }

    private int _pageNumber = 0;
    [Parameter]
    public int PageNumber
    {
        get => _pageNumber;
        set
        {
            if (RowsPerPage == 0)
            {
                _pageNumber = value;
                _ = PageNumberChanged.InvokeAsync(value);
            }
            else
            {
                var clampedValue = Math.Clamp(value, 0, maxPageNumber);

                if (clampedValue != _pageNumber)
                {
                    _pageNumber = clampedValue;
                    _ = PageNumberChanged.InvokeAsync(value);
                }
            }
        }
    }

    [Parameter] public EventCallback<int> PageNumberChanged { get; set; }


    private MdcMenu menu;
    private bool menuOpen;
    private IEnumerable<MdcSelect<int>.Item<int>> rowsPerPageItems;
    private int maxPageNumber => Convert.ToInt32(Math.Ceiling((double)ItemCount / RowsPerPage)) - 1;
    private string rowsText => $"{RowsPerPage.ToString("G0")} rows per page";
    private string positionText => PositionTextString(PageNumber);
    private string maxPositionText => PositionTextString(maxPageNumber);
    private bool previousDisabled => PageNumber <= 0;
    private bool nextDisabled => PageNumber >= maxPageNumber;

    private string PositionTextString(int pageNumber) => $"{(pageNumber * RowsPerPage + 1).ToString("G0")}-{(Math.Min(ItemCount, (pageNumber + 1) * RowsPerPage)).ToString("G0")} of {ItemCount.ToString("G0")}";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (RowsPerPage == 0)
        {
            RowsPerPage = RowsPerPageSelection.FirstOrDefault();
        }

        if (!RowsPerPageSelection.Contains(RowsPerPage))
        {
            throw new ArgumentException($"PMdcPaginator: Cannot set RowsPerPage to {RowsPerPage} from selection of {{ {RowsPerPageSelection.Select(r => r).ToString()} }}");
        }

        rowsPerPageItems = from r in RowsPerPageSelection
                           select new MdcSelect<int>.Item<int>
                           {
                               DataValue = r,
                               Text = r.ToString()
                           };
    }


    private async Task OnMenuToggleAsync()
    {
        await menu.ToggleAsync();
        StateHasChanged();
    }


    private void OnPreviousClick()
    {
        PageNumber = Math.Max(PageNumber - 1, 0);
        StateHasChanged();
    }


    private void OnNextClick()
    {
        PageNumber = Math.Min(PageNumber + 1, maxPageNumber);
        StateHasChanged();
    }
}