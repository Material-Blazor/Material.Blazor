@namespace BlazorMdc

@inherits MdcInputComponentBase<DateTime>

@using System.Globalization

@inject IJSRuntime jsRuntime



<div class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    <ul class="mdc-list bmdc-dp-list">
        <li @ref="@listItem" class="mdc-list-item mdc-list-item--selected bmdc-dp-list-item" data-value="@cachedNativeComponentBoundValueText" aria-selected="true" role="option">
            <span class="mdc-list-item__text bmdc-dp-list-item__text">@cachedNativeComponentBoundValueText</span>
        </li>
    </ul>

    <div class="bmdc-dp-menu">
        <div class="bmdc-dp-menu__container">
            <div class="bmdc-dp-menu__float-left">
                @monthText
            </div>
            <div class="bmdc-dp-menu__float-left">
               <MdcIconButtonToggle @bind-Value="@showYearPad" Class="bmdc-dp-menu__icon-button" IconOn="@MdcIcons.Icon__arrow_drop_up" IconOff="@MdcIcons.Icon__arrow_drop_down" />
            </div>

            @if (!showYearPad)
            {
                <div class="bmdc-dp-menu__float-right bmdc-dp-menu__float-right-spaced">
                    <MdcIconButton OnClick="OnNextMonthClick" Class="bmdc-dp-menu__icon-button" Icon="@MdcIcons.Icon__chevron_right" Disabled="@nextMonthDisabled" />
                </div>
                <div class="bmdc-dp-menu__float-right bmdc-dp-menu__float-right-spaced">
                    <MdcIconButton OnClick="OnShowCurrentDateClick" Class="bmdc-dp-menu__icon-button" Icon="@MdcIcons.Icon__undo" />
                </div>
                <div class="bmdc-dp-menu__float-right">
                    <MdcIconButton OnClick="OnPreviousMonthClick" Class="bmdc-dp-menu__icon-button" Icon="@MdcIcons.Icon__chevron_left" Disabled="@previousMonthDisabled" />
                </div>
            }
        </div>
    </div>

    @if (showYearPad)
    {
        <div class="bmdc-dp-year-pad">
            <div class="mdc-list bmdc-dp-year-pad__years-line">
                @foreach (var year in years)
                {
                    <InternalDatePickerYearButton @key="@year" CurrentYear="@startOfDisplayMonth.Year" DisplayYear="@year" OnItemClickAsync="@OnYearItemClick" MinDate="@MinDate" MaxDate="@MaxDate" />
                }
            </div>
        </div>
    }
    else
    {
        <div class="bmdc-dp-day-pad">
            <div class="bmdc-dp-day-pad__weekdays-line">
                @foreach (var d in daysOfWeek)
                {
                    <span class="mdc-theme--text-disabled-on-background bmdc-dp-day-pad__weekday">@d</span>
                }
            </div>
            <div class="mdc-list bmdc-dp-day-pad__days-line">
                @foreach (var date in dates)
                {
                    <InternalDatePickerDayButton @key="@date" DateSelectionCriteria="@DateSelectionCriteria" CurrentDate="@initialDate" DisplayDate="@date" StartOfDisplayMonth="@startOfDisplayMonth" OnItemClickAsync="@OnDayItemClickAsync" MinDate="@MinDate" MaxDate="@MaxDate" />
                }
            </div>
        </div>
    }
</div>



@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    [Parameter] public PMdcDateSelectionCriteria? DateSelectionCriteria { get; set; }
    [Parameter] public DateTime MinDate { get; set; }
    [Parameter] public DateTime MaxDate { get; set; }

    private string[] daysOfWeek;

    private ElementReference listItem;
    private bool previousMonthDisabled => (startOfDisplayMonth <= MinDate);
    private bool nextMonthDisabled => (startOfDisplayMonth.AddMonths(1) >= MaxDate);
    private bool showYearPad;


    private LinkedList<DateTime> dates { get; set; } = new LinkedList<DateTime>();
    private LinkedList<int> years { get; set; } = new LinkedList<int>();
    private DateTime initialDate;
    private DateTime cachedNativeComponentBoundValue;
    private DateTime cachedMinDate;
    private DateTime cachedMaxDate;
    private string cachedNativeComponentBoundValueText => Utilities.DateToString(cachedNativeComponentBoundValue);
    private int monthsOffset = 0;
    private DateTime startOfDisplayMonth;
    private string monthText => startOfDisplayMonth.ToString("MMMM yyyy");
    private int year => startOfDisplayMonth.Year;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-typography--body2 bmdc-dp-container");

        daysOfWeek = (new DateTimeFormatInfo()).DayNames.Select(d => d.Substring(0, 1)).ToArray();
    }


    private bool IsFirstParametersSet = true;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsFirstParametersSet)
        {
            IsFirstParametersSet = false;
            SetParameters(true);
        }
    }


    private void SetParameters(bool forceSetup)
    {
        if (forceSetup || NativeComponentBoundValue != cachedNativeComponentBoundValue || MinDate != cachedMinDate || MaxDate != cachedMaxDate)
        {
            initialDate = Value;
            cachedNativeComponentBoundValue = Value;
            cachedMinDate = MinDate;
            cachedMaxDate = MaxDate;

            var startDate = startOfDisplayMonth = new DateTime(Value.Year, Value.Month, 1).AddMonths(monthsOffset);
            var endDate = startDate.AddMonths(1).AddDays(-1);

            startDate = startDate.AddDays(-Convert.ToInt32(startDate.DayOfWeek));
            endDate = endDate.AddDays(-Convert.ToInt32(endDate.DayOfWeek) + 7);

            dates = new LinkedList<DateTime>();

            for (var date = startDate; date < endDate; date = date.AddDays(1))
            {
                dates.AddLast(date);
            }

            var startYear = ((MinDate.Year - 1) / 4) * 4 + 1;
            var endYear = ((MaxDate.Year + 3) / 4) * 4 + 1;

            years = new LinkedList<int>();

            for (var year = startYear; year < endYear; year++)
            {
                years.AddLast(year);
            }

            showYearPad = false;

        }
    }


    private async Task OnDayItemClickAsync(DateTime dateTime)
    {
        NativeComponentBoundValue = dateTime;
        cachedNativeComponentBoundValue = Value;
        monthsOffset = 0;
        SetParameters(true);
        await jsRuntime.InvokeAsync<object>("BlazorMdc.datePicker.listItemClick", listItem, cachedNativeComponentBoundValueText);
    }


    private void OnYearItemClick(int year)
    {
        monthsOffset += (year - startOfDisplayMonth.Year) * 12;
        showYearPad = false;
        SetParameters(true);
    }


    private void OnPreviousMonthClick()
    {
        monthsOffset--;
        SetParameters(true);
    }


    private void OnShowCurrentDateClick()
    {
        monthsOffset = 0;
        SetParameters(true);
    }


    private void OnNextMonthClick()
    {
        monthsOffset++;
        SetParameters(true);
    }


    protected override bool ShouldRender()
    {
        return true;
    }
}
