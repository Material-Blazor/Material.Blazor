@namespace BlazorMdc

@typeparam TItem


<div class="@visibilityClass">
    <div class="@contentClass">
        @Content(currentItem)
    </div>
</div>


@code {
    private int _itemIndex;
    [Parameter] public int ItemIndex
    {
        get => _itemIndex;

        set
        {
            if (value != _itemIndex)
            {
                ItemIndexChanged.InvokeAsync(value);

                SlideDirection direction = (value > _itemIndex) ? SlideDirection.Forwards : SlideDirection.Backwards;

                if (hasRendered)
                {
                    InvokeAsync(() => SlideToItem(value, direction));
                }

                _itemIndex = value;
            }
        }
    }

    [Parameter] public EventCallback<int> ItemIndexChanged { get; set; }


    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public RenderFragment<TItem> Content { get; set; }


    private string contentClass = "";
    private bool hideContent = false;
    private string visibilityClass => hideContent ? Hidden : Visible;
    private TItem currentItem;
    private bool hasRendered = false;


    internal const string Hidden = "bmdc-visibility-hidden";
    internal const string Visible = "bmdc-visibility-visible";
    internal const string InFromLeft = "bmdc-slide-in-from-left";
    internal const string InFromRight = "bmdc-slide-in-from-right";
    internal const string OutToLeft = "bmdc-slide-out-to-left";
    internal const string OutToRight = "bmdc-slide-out-to-right";

    public enum SlideDirection { Backwards, Forwards }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        currentItem = Items.ElementAt(_itemIndex);
    }


    private async Task SlideToItem(int index, SlideDirection direction)
    {
        if (index != _itemIndex)
        {
            string nextClass = "";

            if (direction == SlideDirection.Backwards)
            {
                nextClass = InFromLeft;
                contentClass = OutToRight;
            }
            else
            {
                nextClass = InFromRight;
                contentClass = OutToLeft;
            }

            await Task.Delay(100);

            hideContent = true;
            contentClass = nextClass;
            currentItem = Items.ElementAt(index);
            hideContent = false;

            StateHasChanged();
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }
    }
}