@namespace BlazorMdc

@typeparam TItem

@inherits MdcComponentBase

@inject IJSRuntime jsRuntime


@*<div @ref="elementReference"
     role="tablist"
     class="@ClassMapper.ToString()"
     style="@StyleMapper.ToString()">

    <div class="mdc-tab-scroller">
        <div class="mdc-tab-scroller__scroll-area">
            <div class="mdc-tab-scroller__scroll-content">
                @{ int i = 0; }
                @foreach (var item in Items)
                {
                    int index = i++;
                    bool selected = (index == initialTabIndex);
                    string buttonActive = selected ? "mdc-tab--active" : "";
                    string indicatorActive = selected ? "mdc-tab-indicator--active" : "";

                    <button class="mdc-tab @stackClass @buttonActive" role="tab" aria-selected="@selected" tabindex="-1" @onclick="(_ => OnTabClickAsync(index))">
                        <span class="mdc-tab__content">
                            @if (!(Icon is null))
                            {
                                <span class="mdc-tab__icon material-icons" aria-hidden="true">@Icon(item)</span>
                            }

                            <span class="mdc-tab__text-label">@Label(item)</span>
                        </span>
                        <span class="mdc-tab-indicator @indicatorActive">
                            <span class="mdc-tab-indicator__content mdc-tab-indicator__content--underline"></span>
                        </span>
                        <span class="mdc-tab__ripple"></span>
                    </button>
                }
            </div>
        </div>
    </div>
</div>*@

<MdcTabBar @ref="@tabBar"
           TabIndex="@TabIndex"
           Items="@Items"
           Context="item"
           OnTabClick="@OnTabClickAsync">

    <Label>@Label(item)</Label>
    <Icon>@Icon(item)</Icon>
</MdcTabBar>


@if (!hideContent)
{
    int tabNum = 0;

    @foreach (var item in Items)
    {
        @*System.Diagnostics.Debug.WriteLine($"tab num: {tabNum}");*@
        if (tabNum++ == TabIndex)
        {
            @*System.Diagnostics.Debug.WriteLine($"selected content");*@
            <div class="bmdc-tab-content-container">
                <div class="@contentClass">
                    @Content(item)
                </div>
            </div>
        }
    }
}


@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    private int initialTabIndex;
    private int _requestedTabIndex;
    private int _tabIndex;

    [Parameter]
    public int TabIndex
    {
        get => _tabIndex;

        set
        {
            _requestedTabIndex = value;

            if (!suppressTwoWayBinding && value != _tabIndex)
            {
                _ = SetTabIndexAsync(value);
            }

            if (!hasRendered)
            {
                _tabIndex = value;
            }
        }
    }

    [Parameter] public EventCallback<int> TabIndexChanged { get; set; }

    [Parameter] public bool StackIcons { get; set; }
    [Parameter] public EventCallback<int> OnTabClick { get; set; }

    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public RenderFragment<TItem> Label { get; set; }
    [Parameter] public RenderFragment<TItem> Icon { get; set; }
    [Parameter] public RenderFragment<TItem> Content { get; set; }


    private string contentClass = "";
    private bool hideContent = false;
    private bool suppressTwoWayBinding = false;
    private string stackClass => StackIcons ? "mdc-tab--stacked" : "";
    private MdcTabBar<TItem> tabBar;
    private bool hasRendered = false;
    private int nextTabIndex = -1;


    private const string InFromLeft = "bmdc-slide-in-from-left";
    private const string InFromRight = "bmdc-slide-in-from-right";
    private const string OutToLeft = "bmdc-slide-out-to-left";
    private const string OutToRight = "bmdc-slide-out-to-right";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add("mdc-tab-bar bmdc-tab-bar");

        initialTabIndex = _requestedTabIndex;
    }


    private async Task OnTabClickAsync(int index)
    {
        if (index != TabIndex)
        {
            suppressTwoWayBinding = true;
            tabBar.SuppressTwoWayBinding = true;
            string nextClass = "";

            if (index < TabIndex)
            {
                nextClass = InFromLeft;
                contentClass = OutToRight;
            }
            else
            {
                nextClass = InFromRight;
                contentClass = OutToLeft;
            }

            await Task.Delay(100);

            hideContent = true;
            contentClass = nextClass;
            _tabIndex = index;
            await TabIndexChanged.InvokeAsync(_tabIndex);
            hideContent = false;

            StateHasChanged();

            await OnTabClick.InvokeAsync(index);
            suppressTwoWayBinding = false;
            tabBar.SuppressTwoWayBinding = false;
        }
    }


    public async Task SetTabIndexAsync(int index)
    {
        //await jsRuntime.InvokeAsync<object>("BlazorMdc.tabBar.setTab", elementReference, index);

        nextTabIndex = index;
        StateHasChanged();
        await Task.CompletedTask;
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
        }
        else if (nextTabIndex >= 0)
        {
            await tabBar.SetTabIndexAsync(nextTabIndex).ConfigureAwait(false);
        }

        nextTabIndex = -1;
    }
}