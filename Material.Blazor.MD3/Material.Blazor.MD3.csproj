<Project Sdk="Microsoft.NET.Sdk.Razor">

	<PropertyGroup>
		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>
		<Version>5.0.0-preview.WIP</Version>
		<PackageLicenseFile></PackageLicenseFile>
		<Authors>Simon Ziegler of Dioptra and Mark Stega of Optimium Health</Authors>
		<Company>Material.Blazor</Company>
		<Description>A lightweight Material Theme component library for Blazor. Intended to adhere rigorously to Material Theme guidelines in https://material.io. API and other documentation can be found at https://material-blazor.com/docs.</Description>
		<RepositoryUrl>https://github.com/Material-Blazor/Material.Blazor</RepositoryUrl>
		<PackageLicenseExpression>MIT</PackageLicenseExpression>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageReleaseNotes></PackageReleaseNotes>
		<NeutralLanguage>en</NeutralLanguage>
		<Copyright>Dioptra and Optimium Health</Copyright>
		<PackageProjectUrl>https://material-blazor.com</PackageProjectUrl>
		<Product>Material.Blazor</Product>
		<UserSecretsId>d7509b6c-bc5c-4a56-a750-09c8ae4aeb85</UserSecretsId>
	</PropertyGroup>

	<PropertyGroup>
		<EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
	</PropertyGroup>

	<PropertyGroup>
		<EmitCompilerGeneratedFiles>false</EmitCompilerGeneratedFiles>
	</PropertyGroup>

	<PropertyGroup>
		<ImplicitUsings>disable</ImplicitUsings>
	</PropertyGroup>

	<ItemGroup>
		<None Include="..\README.md" Pack="true" PackagePath="\" />
	</ItemGroup>

	<ItemGroup>
		<SupportedPlatform Include="browser" />
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<WarningLevel>5</WarningLevel>
	</PropertyGroup>

	<ItemGroup>
		<!--Keep these four Removes-->
		<Content Remove="package-lock.json" />
		<Content Remove="package.json" />
		<Content Remove="tsconfig.json" />
		<Content Remove="wwwroot\intermediate.js" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="wwwroot\" />
	</ItemGroup>

	<ItemGroup>
		<!--<PackageReference Include="Microsoft.AspNetCore.Components" Version="8.0.0-rc.1.23421.29" />-->
		<PackageReference Include="Microsoft.AspNetCore.Components" Version="8.0.0-rc.2.23480.2" />
		<PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="8.0.0-rc.2.23480.2" />
		<PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0-rc.2.23479.6" />
		<PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="8.0.0-rc.2.23479.6" />
	</ItemGroup>

	<ItemGroup>
		<None Include="package-lock.json" />
		<None Include="package.json" />
		<None Include="tsconfig.json" />
	</ItemGroup>

	<ItemGroup>
		<None Update="Scripts\material.blazor.ts">
			<SubType>Code</SubType>
		</None>
	</ItemGroup>

	<ItemGroup>
		<InputStaticAssetsScripts Include="components\**\*.ts;scripts\**\*.ts" />
		<OutputStaticAssetsScripts Include="wwwroot\material.blazor.js;wwwroot\material.blazor.min.js" />
		<!--Keep this Remove/Include pair-->
		<Content Remove="@(OutputStaticAssetsScripts)" />
		<Content Include="@(OutputStaticAssetsScripts)" />
	</ItemGroup>

	<ItemGroup>
		<InputStaticAssetsStyles Include="components\**\*.scss;styles\**\*.scss;" />
		<OutputStaticAssetsStyles Include="wwwroot\material.blazor.css;wwwroot\material.blazor.min.css" />
		<!--Keep this Remove/Include pair-->
		<Content Remove="@(OutputStaticAssetsStyles)" />
		<Content Include="@(OutputStaticAssetsStyles)" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="wwwroot\" />
	</ItemGroup>

	<Target Name="CheckIfNpmExists" BeforeTargets="PreBuildEvent">
		<Exec Command="npm --version" ContinueOnError="true" StandardOutputImportance="low" StandardErrorImportance="low" LogStandardErrorAsError="false" IgnoreExitCode="true">
			<Output TaskParameter="ExitCode" PropertyName="NpmReturnCode" />
		</Exec>
	</Target>

	<Target Name="ErrorOutput" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' != '0' ">
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="***** 'npm --version' return code was $(NpmReturnCode)" />
		<Message Importance="high" Text="CSS and JS not built due to the lack of a proper development environment" />
		<Message Importance="high" Text="See https://material-blazor.com/docs/articles/DevelopmentEnvironment.html" />
		<Message Importance="high" Text="If the return code is 1, check package.json and package-lock.json" />
		<Message Importance="high" Text="If the return code is 9009, npm is not present" />
		<Message Importance="high" Text="For other non-zero return codes, check npm documentation" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
		<Message Importance="high" Text="**********************************************************************************" />
	</Target>

	<UsingTask TaskName="DeduplicateLicenseHeaders" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<SourceFile ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.Collections.Generic" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Linq" />
			<Using Namespace="System.Text" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
          var input = File.ReadAllText(SourceFile);
          HashSet<string> knownLicenseHeaders = new();
          int startIndex = 0;
          while (true)
          {
            // search for opening multi-line comment token
            var nextIndex = input.IndexOf("/*", startIndex);
            if (nextIndex < 0)
            {
              break;
            }
            if (nextIndex == 0 || input[nextIndex - 1] != '\\')
            {
              // search matching closing comment token
              var closingIndex = input.IndexOf("*/", nextIndex);
              if (closingIndex < 0)
              {
                 throw new Exception("A multi-line comment wasn't closed");
              }
              closingIndex += 2; // the closing token is two characters long
              var license = input.Substring(nextIndex, closingIndex - nextIndex);
              if (knownLicenseHeaders.Add(license))
              {
                // this is a new one! let's not replace, we just advance the cursor
                startIndex = closingIndex;
              }
              else
              {
                // we've seen this one before, so we rip it out here.
                input = input.Substring(0, nextIndex) + input.Substring(closingIndex);
                // we don't advance the cursor, because we just ripped out some text.
              }
            }
            else
            {
              // this is not an actual comment token, because the slash is escaped
              startIndex = nextIndex + 1;
            }
					}
          // remove empty lines
          input = input.Replace("\n\n", "\n").Replace("\n\n", "\n").Replace("\n\n", "\n");
          File.WriteAllText(SourceFile, input);
                ]]>
			</Code>
		</Task>
	</UsingTask>

	<ItemGroup>
		<UpToDateCheckInput Include="@(InputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsScripts)" Set="Scripts" />
		<UpToDateCheckInput Include="@(InputStaticAssetsStyles)" Set="Styles" />
		<UpToDateCheckOutput Include="@(OutputStaticAssetsStyles)" Set="Styles" />
	</ItemGroup>

	<Target Name="BuildScripts" Inputs="@(InputStaticAssetsScripts)" Outputs="@(OutputStaticAssetsScripts)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
		<Message Importance="high" Text="***** MakeDir wwwroot (M.B.MD3 Scripts)" />
		<MakeDir Directories="wwwroot" />

		<Message Importance="high" Text="***** npm install (M.B.MD3 Scripts)" />
		<Exec Command="npm install" />

		<Message Importance="high" Text="***** npm run build-js (M.B.MD3 Scripts)" />
		<Exec Command="npm run build-js" />

		<Message Importance="high" Text="***** npm run build-js-minify (M.B.MD3 Scripts)" />
		<Exec Command="npm run build-js-minify" />


		<DeduplicateLicenseHeaders SourceFile="wwwroot\material.blazor.min.js" />

	</Target>

	<Target Name="BuildStyles" Inputs="@(InputStaticAssetsStyles)" Outputs="@(OutputStaticAssetsStyles)" BeforeTargets="PreBuildEvent" AfterTargets="CheckIfNpmExists" Condition=" '$(NpmReturnCode)' == '0' ">
		<Message Importance="high" Text="***** mkdir wwwroot (M.B.MD3 Styles)" />
		<MakeDir Directories="wwwroot" />

		<Message Importance="high" Text="***** npm install (M.B.MD3 Styles)" />
		<Exec Command="npm install" />

		<!--<Message Importance="high" Text="***** downloadfiles" />
		
		ISSUE - The UserAgent used by DownloadFile results in TrueType fonts. See the curl
		commands in package.json that get around this behavior.
		
		<DownloadFile SourceUrl="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@100..700"
					  DestinationFolder="$(MSBuildProjectDirectory)\styles"
					  DestinationFilename="_material-symbols-outlined.scss" />
		<DownloadFile SourceUrl="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
					  DestinationFolder="$(MSBuildProjectDirectory)\styles"
					  DestinationFilename="_material-symbols-rounded.scss" />
		<DownloadFile SourceUrl="https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
					  DestinationFolder="$(MSBuildProjectDirectory)\styles"
					  DestinationFilename="_material-symbols-sharp.scss" />-->

		<Message Importance="high" Text="***** download font files (M.B.MD3 Styles)" />
		<Exec Command="npm run build-acquire-font-MSO" />
		<Exec Command="npm run build-acquire-font-MSR" />
		<Exec Command="npm run build-acquire-font-MSS" />

		<Message Importance="high" Text="***** npm run build-css (M.B.MD3 Styles)" />
		<Exec Command="npm run build-css" />

		<Message Importance="high" Text="***** npm run build-min-css (M.B.MD3 Styles)" />
		<Exec Command="npm run build-css-minify" />

	</Target>

	<ProjectExtensions>
		<VisualStudio>
			<UserProperties />
		</VisualStudio>
	</ProjectExtensions>

	<!--
	SolutionDir is only available to builds in the IDE
	
	<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
		<Copy SourceFiles="$(SolutionDir)README.md"
			  DestinationFiles="$(ProjectDir)README.md" />
	</Target>
	-->

	<!--
	These two don't work in the IDE

	<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
	  <Exec Command="copy ..\README.md $(projectdir)README.md" />
	</Target>

	<Target Name="PreBuild" BeforeTargets="PreBuildEvent">
		<Copy SourceFiles="README.md"
			  DestinationFiles="$(ProjectDir)README.md" />
	</Target>
	-->

</Project>
