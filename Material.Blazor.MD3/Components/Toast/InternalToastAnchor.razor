@namespace Material.Blazor
@using Material.Blazor.Internal;
@inherits ComponentFoundation

@if (DisplayedToasts.Any())
{
    <aside class="mb-toast-container @PositionClass">
        @foreach (var toast in DisplayedToasts.OrderBy(x => x.TimeStamp))
        {
            <div @key="@toast"
                 aria-relevant="additions"
                 class="mb-toast__surface @toast.Settings.ContainerLevelClass @toast.Settings.StatusClass @toast.Settings.AppliedCssClass"
                 role="status">

                @if (toast.Settings.AppliedShowIcon)
                {
                    <div class="mb-toast__icon">
                        <MBIcon aria-hidden="true"
                                IconName="@toast.Settings.AppliedIconName" />
                    </div>
                }

                <div aria-atomic="false" class="mb-toast__label">
                    @if (!string.IsNullOrWhiteSpace(toast.Settings.Heading))
                    {
                        <h5 class="mdc-typography--subtitle1">@((MarkupString)toast.Settings.AppliedHeading)</h5>
                    }

                    @((MarkupString)toast.Settings.AppliedMessage)
                </div>

                @if (toast.Settings.CloseMethod != MBNotifierCloseMethod.Timeout)
                {
                    <md-icon-button @onclick="@(async () => await CloseToastAsync(toast.Id).ConfigureAwait(false))">
                        <md-icon>close</md-icon>
                    </md-icon-button>
                }
            </div>
        }
    </aside>
}