name: GithubActionsRelease-LTS

############################################################################################################
# All of thes jobs runs commands only on a tag push in the Material-Blazor\Material.Blazor repository
# The publishing actions in forked repositories were handled by the WIP workflow
# An 'ExitWorkflow' action is sorely needed
############################################################################################################
# NUGET_API_KEY is valid through 9/11/2021
############################################################################################################

on:
  push:
    tags:
      - 3.** # Push events to matching pattern, i.e. 3.1.0, 3.1.1

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputDocFx: ${{github.workspace}}\siteDocFx
  outputMB: ${{github.workspace}}\siteMB
  outputWeb: ${{github.workspace}}\siteWeb
  projectMB: 'Material.Blazor/Material.Blazor.csproj'
  projectTest: 'Material.Blazor.Test/Material.Blazor.Test.csproj'
  projectWeb: 'Material.Blazor.Website.WebAssembly/Material.Blazor.Website.WebAssembly.csproj'

jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-material-blazor:
    name: Running on Material-Blazor/Material.Blazor?
    runs-on: ubuntu-latest
    if: github.repository == 'Material-Blazor/Material.Blazor'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# Run the test project. Should this fail, we don't perform any deploy action
############################################################################################################
  test:
    name: Run .NET tests
    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Use dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Run the acceptance tests as the first build action and cancel out the rest if it fails
      run: dotnet test ${{env.projectTest}} --configuration ${{env.buildConfiguration}}
############################################################################################################
# Build package and deploy
############################################################################################################
  build-and-deploy-package:
    name: Build nuget package & deploy to nuget
    needs: [test, is-on-material-blazor]

    runs-on: windows-latest

    steps:
    - name: Get the version
      run: echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Build Material.Blazor & Generate the NuGet package 🔧
      run: dotnet pack ${{env.projectMB}} --configuration ${{env.buildConfiguration}} --output ${{env.outputMB}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:Version=${{env.version}}

    - name: Display MaterialBlazor package output Ꙫ
      run: dir ${{env.outputMB}}

    - name: Upload Package 🚀
      run: dotnet nuget push ${{env.outputMB}}\*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json
############################################################################################################
# Create release
############################################################################################################
  create-release:
    name: Create release
    needs: [build-and-deploy-package]

    runs-on: ubuntu-latest

    steps:
    - name: Get the version
      run: echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      shell: bash

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{env.version}}
        release_name: Release ${{env.version}}
        draft: false
        prerelease: false
