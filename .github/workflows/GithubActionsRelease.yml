name: GithubActionsRelease

############################################################################################################
# All of thes jobs runs commands only on a tag push in the Material-Blazor\Material.Blazor repository
# The publishing actions in forked repositories were handled by the WIP workflow
# An 'ExitWorkflow' action is sorely needed
############################################################################################################
# NUGET_API_KEY is valid through 9/11/2021
############################################################################################################

on:
  push:
    tags:
      - '*' # Push events to matching *, i.e. 1.0, 20.15.10
    branches:
      - experimental-release-workflow

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputDocFx: ${{github.workspace}}\siteDocFx
  outputMB: ${{github.workspace}}\siteMB
  outputWeb: ${{github.workspace}}\siteWeb
  projectMB: 'Material.Blazor/Material.Blazor.csproj'
  projectTest: 'Material.Blazor.Test/Material.Blazor.Test.csproj'
  projectWeb: 'Material.Blazor.Website.WebAssembly/Material.Blazor.Website.WebAssembly.csproj'

jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  is-on-fork:
    name: Running on a fork?
    runs-on: ubuntu-latest
    if: github.repository != 'Material-Blazor/Material.Blazor'
    steps:
    - name: Nothing to see here
      run: echo ""

  is-on-material-blazor:
    name: Running on Material-Blazor/Material.Blazor?
    runs-on: ubuntu-latest
    if: github.repository == 'Material-Blazor/Material.Blazor'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# Run the test project. Should this fail, we don't perform any deploy action
############################################################################################################
  test:
    name: Run .NET tests
    runs-on: windows-latest

    steps:
    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Run the acceptance tests as the first build action and cancel out the rest if it fails
      run: dotnet test ${{env.projectTest}} --configuration ${{env.buildConfiguration}}
############################################################################################################
# Store the version information
############################################################################################################
  version:
    name: Set version identifier
    runs-on: ubuntu-latest

    steps:
    - id: get
      run: |
        echo "::set-output name=identifier::${GITHUB_REF/refs\/tags\//}"
    - id: show
      run: |
        echo "${{ steps.get.outputs.identifier }}"
    outputs:
      identifier: ${{ steps.get.outputs.identifier }}
############################################################################################################
# Store the branch information
############################################################################################################
  branch:
    name: Set branch identifier
    runs-on: ubuntu-latest
    steps:
    - id: get
      run: |
        echo "::set-output name=identifier::${GITHUB_REF/refs\/heads\//}"
    - id: show
      run: |
        echo "${{ steps.get.outputs.identifier }}"
    outputs:
      identifier: ${{ steps.get.outputs.identifier }}
############################################################################################################
# Build documentation
############################################################################################################
  build-documentation:
    name: Build documentation
    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Create documentation 🔧
      run: .\docfx\docfx docfx.json
      env:
        DOCFX_SOURCE_BRANCH_NAME: main   

    - name: Upload Documentation Artifacts 🔺 # The project is then uploaded as an artifact named 'siteDocFx'.
      uses: actions/upload-artifact@v2
      with:
        name: siteDocFx
        path: siteDocFx       
############################################################################################################
# Build website
############################################################################################################
  build-website:
    needs: [test, version]
    name: Build website
    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Build and Publish Website 🔧
      run: dotnet publish ${{env.projectWeb}} --configuration ${{env.buildConfiguration}} --output ${{env.outputWeb}} -p:Version=${{needs.version.outputs.identifier}} -p:BlazorEnableCompression=false      

    - name: Upload Website Artifacts 🔺 # The website is then uploaded as an artifact named 'siteWeb'.
      uses: actions/upload-artifact@v2
      with:
        name: siteWeb
        path: siteWeb      
############################################################################################################
# Build package and deploy
############################################################################################################
  build-and-deploy-package:
    name: Build nuget package & deploy to nuget
    needs: [test, version, branch, is-on-material-blazor]

    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Build Material.Blazor 🔧
      run: dotnet build ${{env.projectMB}} --configuration ${{env.buildConfiguration}} -p:Version=${{needs.version.outputs.identifier}}

    - name: Generate the NuGet package 🔧
      run: dotnet pack ${{env.projectMB}} --no-build --configuration ${{env.buildConfiguration}} --output ${{env.outputMB}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:Version=${{needs.version.outputs.identifier}}

    - name: Display MaterialBlazor package output Ꙫ
      run: dir ${{env.outputMB}}

    - name: Upload Package 🚀
      run: dotnet nuget push ${{env.outputMB}}\*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json
      if: needs.branch.outputs.identifier != 'experimental-release-workflow' # this check is important to allow testing this workflow on a non-main branch without deploying to nuget: this critical action is not performed when not on main.
############################################################################################################
# deployghpages
############################################################################################################
  deployghpages:
    name: Deploy to material-blazor.com
    needs: [test, build-documentation, build-website, branch, is-on-material-blazor]

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Use prelease dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true

    - name: Download Artifacts 🔻 # The documentation is downloaded into the 'siteDocFx' folder.
      uses: actions/download-artifact@v2
      with:
        name: siteDocFx
        path: siteDocFx

    - name: Download Artifacts 🔻 # The built project is downloaded into the 'siteWeb' folder.
      uses: actions/download-artifact@v2
      with:
        name: siteWeb
        path: siteWeb

    - name: Configure deployment directory structure Ꙫ
      run: |
        mv siteWeb/wwwroot deployroot
        mv siteDocFx deployroot/docs

    - name: Deploy 🚀
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        token: ${{secrets.GH_PAT}}
        branch: gh-pages
        folder: 'deployroot'
      if: needs.branch.outputs.identifier != 'experimental-release-workflow' # this check is important to allow testing this workflow on a non-main branch without deploying to nuget: this critical action is not performed when not on main.
############################################################################################################
# Create release
############################################################################################################
  create-release:
    name: Create release
    needs: [deployghpages, build-and-deploy-package, branch, version, is-on-material-blazor]

    runs-on: ubuntu-latest

    steps:
    - name: Create Release
      if: needs.branch.outputs.identifier != 'experimental-release-workflow' # this check is important to allow testing this workflow on a non-main branch without deploying to nuget: this critical action is not performed when not on main.
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{needs.version.outputs.identifier}}
        release_name: Release ${{needs.version.outputs.identifier}}
        draft: false
        prerelease: false
