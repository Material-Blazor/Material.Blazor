name: GithubActionsWIP-LTS

on:
  push:
    branches: [ LTS-DN6 ]

  pull_request:
    branches: [ LTS-DN6 ]

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputDocFx: ${{github.workspace}}\siteDocFx
  outputMB: ${{github.workspace}}/siteMB
  outputWeb: ${{github.workspace}}/siteWeb
  projectMB: 'Material.Blazor/Material.Blazor.csproj'
  projectTest: 'Material.Blazor.Test/Material.Blazor.Test.csproj'
  projectWeb: 'Material.Blazor.Website.WebAssembly/Material.Blazor.Website.WebAssembly.csproj'

jobs:

############################################################################################################
# These jobs are used to gate actions. By creating these jobs we don't need to proliferate the repo checks
############################################################################################################
  perform-deployment-mb:
    name: Perform deployment on M-B/M.B
    runs-on: ubuntu-latest
    if: github.repository == 'Material-Blazor/Material.Blazor'
    steps:
    - name: Nothing to see here
      run: echo ""

  build-allowed:
    name: Build allowed
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Nothing to see here
      run: echo ""

############################################################################################################
# Set unified version
############################################################################################################
  set-unified-version:
    name: Create the date based version
    needs: [perform-deployment-mb]
    runs-on: ubuntu-latest
    outputs:
      unifiedVersion: ${{ steps.setVersion.outputs.version }}

    steps:
    - id: setVersion
      run: echo "version=4.0.0.0-preview.$(date +'%Y-%m-%d--%H-%M-%S')" >> $GITHUB_OUTPUT
      shell: bash

############################################################################################################
# Run the test project. Should this fail, the deploy step (job deployghpages) is skipped
############################################################################################################
  test:
    name: Run .NET tests
    runs-on: windows-latest
    needs: [build-allowed]

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Run the acceptance tests as the first build action and cancel out the rest if it fails
      run: dotnet test ${{env.projectTest}} --configuration ${{env.buildConfiguration}}
      
############################################################################################################
# Build documentation
############################################################################################################
  build-documentation:
    name: Build documentation
    runs-on: windows-latest
    needs: [build-allowed]

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'


    - name: Create documentation 🔧
      run: .\docfx\docfx docfx.json
      env:
        DOCFX_SOURCE_BRANCH_NAME: main

############################################################################################################
# Build website
############################################################################################################
  build-website:
    name: Build website
    needs: [test, set-unified-version]
    runs-on: windows-latest

    steps:
    - name: Set ciVersion as env variable
      run: echo "ciVersion=${{needs.set-unified-version.outputs.unifiedVersion}}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Build and Publish Website 🔧
      run: dotnet publish ${{env.projectWeb}} --configuration ${{env.buildConfiguration}} --output ${{env.outputWeb}} -p:version=${{env.ciVersion}} -p:BlazorEnableCompression=false

    - name: Display MaterialBlazor web output Ꙫ
      run: dir ${{env.outputWeb}} /s

############################################################################################################
# Build nuget package
############################################################################################################
  build-package:
    name: Build nuget package
    needs: [test, set-unified-version]

    runs-on: windows-latest

    steps:
    - name: Set ciVersion as env variable
      run: echo "ciVersion=${{needs.set-unified-version.outputs.unifiedVersion}}" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v3
      with:
        ref: LTS-DN6

    - name: Setup dotnet
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Build Material.Blazor & Generate the NuGet package 🔧
      run: dotnet pack ${{env.projectMB}} --configuration ${{env.buildConfiguration}} --output ${{env.outputMB}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:Version=${{env.ciVersion}}

    - name: Display MaterialBlazor package output Ꙫ
      run: dir ${{env.outputMB}}
