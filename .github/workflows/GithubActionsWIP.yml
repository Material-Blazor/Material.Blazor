name: GithubActionsWIP

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Debug'
  outputDocFx: ${{github.workspace}}/siteDocFx
  outputBmdc: ${{github.workspace}}/siteBmdc
  outputBmdcWin: ${{github.workspace}}\siteBmdc
  outputWeb: ${{github.workspace}}/siteWeb
  projectBmdc: 'BlazorMdc/BlazorMdc.csproj'
  projectWeb: 'BlazorMdcWebsite.WebAssembly/BlazorMdcWebsite.WebAssembly.csproj'

jobs:

############################################################################################################
#Build DocFx pages (1st of 2 jobs), second job publishes to gh-pages
#
# Why Windows? Lack of guidance on running docfx under Linus
############################################################################################################
  builddocfx:

    runs-on: windows-latest

    steps:

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Create documentation 🔧
      run: .\docfx\docfx docfx.json
      env:
        DOCFX_SOURCE_BRANCH_NAME: ${{steps.get_branch.outputs.branch}}
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Upload Artifacts 🔺 # The project is then uploaded as an artifact named 'site'.
      uses: actions/upload-artifact@v1
      with:
        name: siteDocFx
        path: siteDocFx
      if: (github.repository != 'BlazorMdc/BlazorMdc')


############################################################################################################
#Build BlazorMdcWebsite (1st of 2 jobs), second job publishes to gh-pages
#This has to be a separate job from BuildBlazorMdc because of the different dnc environments (3.1 & 5.0 preview)
############################################################################################################
  buildwebsite:

    runs-on: ubuntu-latest

    steps:

    - name: Set ciSuffix as env variable
      run: echo "::set-env name=ciSuffix::CI.$(date +'%Y-%m-%d--%H%M')"

    - name: Echo ciSuffix
      run: echo "CI suffix is $ciSuffix"

    - name: Get the branch
      id: get_branch
      run: echo ::set-output name=branch::${GITHUB_REF/refs\/heads\//}

    - name: Get the pullrequest
      id: get_pullrequest
      run: echo ::set-output name=pullrequest::${GITHUB_REF/refs\/pull\//}

    - name: Get the tag
      id: get_tag
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

    - name: Show branch name Ꙫ
      run: echo GitHub indicates that this is a branch push request of ${{steps.get_branch.outputs.branch}}
      if: contains(github.ref, 'refs/heads')

    - name: Show PR name Ꙫ
      run: echo GitHub indicates that this is a pull request called ${{steps.get_pullrequest.outputs.pullrequest}}
      if: contains(github.ref, 'refs/pull')

    - name: Show Tag name Ꙫ
      run: echo GitHub indicates that this is a tag creation with ${{steps.get_tag.outputs.tag}}
      if: contains(github.ref, 'refs/tag')

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2


    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-preview.8.20417.9

    - name: Build 🔧
      run: dotnet build --configuration $buildConfiguration --version-suffix $ciSuffix $projectWeb

    - name: Publish 🔧
      run: dotnet publish --no-build --configuration $buildConfiguration --output $outputWeb --version-suffix $ciSuffix $projectWeb

    - name: Upload Artifacts 🔺 # The project is then uploaded as an artifact named 'siteWeb'.
      uses: actions/upload-artifact@v1
      with:
        name: siteWeb
        path: siteWeb
      if: (github.repository != 'BlazorMdc/BlazorMdc')

############################################################################################################
#Deploy gh-pages
############################################################################################################
  deployghpages:
    needs: [builddocfx,buildwebsite] # This job must depend on the two build jobs to complete before running, and uses ubuntu-latest instead of windows.

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Download Artifacts 🔻 # The built project is downloaded into the 'site' folder.
      uses: actions/download-artifact@v1
      with:
        name: siteDocFx
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Download Artifacts 🔻 # The built project is downloaded into the 'site' folder.
      uses: actions/download-artifact@v1
      with:
        name: siteWeb
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Configure deployment directory structure Ꙫ
      run: mv siteWeb/wwwroot deployroot; mv siteDocFx deployroot/docs
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Base Href Rewrite 👉
      uses: SteveSandersonMS/ghaction-rewrite-base-href@v1
      with:
        html_path: 'deployroot/index.html'
        base_href: '/BlazorMdc/'
      if: (github.repository != 'BlazorMdc/BlazorMdc')

    - name: Deploy 🚀
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{secrets.GH_PAT}}
        BRANCH: gh-pages
        FOLDER: 'deployroot'
      if: (github.repository != 'BlazorMdc/BlazorMdc')


############################################################################################################
# Build & Deploy BlazorMdc Nuget package (1st of 2 jobs)
#
# Why two jobs? Because we couldn't figure out how to successfully 'nuget push' on Ubuntu after more than
# 2 man days of effort. Instead we simply upload the nuget packages as an artifact and then run a Windows job
# to deploy to GitHub Packages
############################################################################################################
  buildblazormdc:
    runs-on: ubuntu-latest

    steps:
    - name: Set ciSuffix as env variable
      run: echo "::set-env name=ciSuffix::CI.$(date +'%Y-%m-%d--%H%M')"

    - name: Echo ciSuffix
      run: echo "CI suffix is $ciSuffix"

    - name: Get the branch
      id: get_branch
      run: echo ::set-output name=branch::${GITHUB_REF/refs\/heads\//}

    - name: Get the pullrequest
      id: get_pullrequest
      run: echo ::set-output name=pullrequest::${GITHUB_REF/refs\/pull\//}

    - name: Get the tag
      id: get_tag
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

    - name: Show branch name Ꙫ
      run: echo GitHub indicates that this is a branch push request of ${{steps.get_branch.outputs.branch}}
      if: contains(github.ref, 'refs/heads')

    - name: Show PR name Ꙫ
      run: echo GitHub indicates that this is a pull request called ${{steps.get_pullrequest.outputs.pullrequest}}
      if: contains(github.ref, 'refs/pull')

    - name: Show Tag name Ꙫ
      run: echo GitHub indicates that this is a tag creation with ${{steps.get_tag.outputs.tag}}
      if: contains(github.ref, 'refs/tag')

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2

    - name: Setup .NET Core 🛎️
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.302
        source-url: https://nuget.pkg.github.com/${{github.repository_owner}}/index.json
      env:
        NUGET_AUTH_TOKEN: '%NUGET_AUTH_TOKEN%'

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      with:
        nuget-api-key: ${{ secrets.GH_PAT }}
        nuget-version: latest
 
    - name: Build 🔧
      run: dotnet build --configuration $buildConfiguration --version-suffix $ciSuffix $projectBmdc
      env:
        NUGET_AUTH_TOKEN: '${{secrets.GITHUB_TOKEN}}'

    - name: Generate NuGet package 🔧
      run: dotnet pack --no-build --configuration $buildConfiguration --output $outputBmdc -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --version-suffix $ciSuffix $projectBmdc
      env:
        NUGET_AUTH_TOKEN: '${{secrets.GITHUB_TOKEN}}'

    - name: Display package output Ꙫ
      run: ls $outputBmdc

    - name: Upload Artifacts 🔺
      uses: actions/upload-artifact@v1
      with:
        name: siteBmdc
        path: siteBmdc

############################################################################################################
#Build & Deploy BlazorMdc Nuget package (2nd of 2 jobs)
#
# Why two jobs? Because we couldn't figure out how to successfully 'nuget push' on Ubuntu after more than
# 2 man days of effort. Instead we simply upload the nuget packages as an artifact and then run a Windows job
# to deploy to GitHub Packages
############################################################################################################
  deployblazormdc:
    needs: [buildblazormdc] # The second job must depend on the first one to complete before running, and uses ubuntu-latest instead of windows.

    runs-on: windows-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2

    - name: Download Artifacts 🔻 # The built project is downloaded into the 'siteBmdc' folder.
      uses: actions/download-artifact@v1
      with:
        name: siteBmdc

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.302
        source-url: https://nuget.pkg.github.com/${{github.repository_owner}}/index.json
      env:
        NUGET_AUTH_TOKEN: '%NUGET_AUTH_TOKEN%'

    - name: Display package output Ꙫ
      run: dir ${env:outputBmdc}

    - name: Display package output Ꙫ
      run: dir ${env:outputBmdcWin}

    - name: Display obfuscated secret Ꙫ
      run: echo The GitHub token is ${{ secrets.GITHUB_TOKEN }}

    - name: Display obfuscated secret Ꙫ
      run: echo The GH_PAT token is ${{ secrets.GH_PAT }}

# We'd like to push to a forked repository; The push appears to work but the packages are not visible
# Pending a service response we only do the push of the CI build in the bmdc/bmdc repository
# The commented 'if' can replace the current 'if' when this is resolved

    - name: Upload Package 🚀
      run: nuget push ${env:outputBmdcWin}\*.nupkg -Source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json
      env:
        NUGET_AUTH_TOKEN: '${{ secrets.GH_PAT }}'
      if: ((github.repository == 'BlazorMdc/BlazorMdc') && (github.event_name == 'push'))
#      if: (((github.repository == 'BlazorMdc/BlazorMdc') && (github.event_name == 'push')) || (github.repository != 'BlazorMdc/BlazorMdc'))
