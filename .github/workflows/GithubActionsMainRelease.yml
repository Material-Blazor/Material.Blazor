name: GithubActionsMainRelease

############################################################################################################
#All of thes jobs runs commands only on a tag push in the BlazorMdc\BlazorMdc repository
#The publishing actions in forked repositories were handled by the WIP workflow
#An 'ExitWorkflow' action is sorely needed
############################################################################################################

on:
  push:
    tags:
      - '*' # Push events to matching *, i.e. 1.0, 20.15.10

env:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  outputDocFx: ${{github.workspace}}/siteDocFx
  outputBmdc: ${{github.workspace}}/siteBmdc
  outputWeb: ${{github.workspace}}/siteWeb
  projectBmdc: 'BlazorMdc/BlazorMdc.csproj'
  projectWeb: 'BlazorMdcWebsite.WebAssembly/BlazorMdcWebsite.WebAssembly.csproj'

jobs:

############################################################################################################
#Build & Deploy DocFx pages (2 jobs)
#Why two jobs? The build of DocFx is on Windows because we haven't figured out how to create DocFx output
#     on Ubuntu
############################################################################################################
  builddocfx:

    runs-on: windows-latest

    steps:

    - name: Show Tag name Ꙫ
      run: echo "GitHub indicates that this is a tag creation with ${GITHUB_REF/refs\/tags\//}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Create documentation 🔧
      run: .\docfx\docfx docfx.json
      env:
        DOCFX_SOURCE_BRANCH_NAME: ${{steps.get_branch.outputs.branch}}
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Upload Artifacts 🔺 # The project is then uploaded as an artifact named 'site'.
      uses: actions/upload-artifact@v1
      with:
        name: siteDocFx
        path: siteDocFx
      if: (github.repository == 'BlazorMdc/BlazorMdc')


  deploydocfx:
    needs: [builddocfx] # The second job must depend on the first one to complete before running, and uses ubuntu-latest instead of windows.

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Download Artifacts 🔻 # The built project is downloaded into the 'site' folder.
      uses: actions/download-artifact@v1
      with:
        name: siteDocFx
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Deploy 🚀
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{secrets.GH_PAT}}
        BRANCH: gh-pages
        FOLDER: "siteDocFx" # The deployment folder should match the name of the artifact.
      if: (github.repository == 'BlazorMdc/BlazorMdc')


############################################################################################################
#Build & Deploy BlazorMdc Nuget package (1 job)
#Why Windows? Because it proved highly impossible to figure out Ubuntu 'NuGet push'
############################################################################################################
  buildblazormdc:
    runs-on: ubuntu-latest

    steps:

    - name: Set Version as env variable
      run: echo "::set-env name=Version::${GITHUB_REF/refs\/tags\//}"

    - name: Echo Version
      run: echo "Version is $Version"

    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Setup .NET Core 🛎️
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.302
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Build 🔧
      run: dotnet build --configuration $buildConfiguration -p:PackageVersion=$Version $projectBmdc
      env:
        NUGET_AUTH_TOKEN: "${secrets.GITHUB_TOKEN}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Generate NuGet package 🔧
      run: dotnet pack --no-build --configuration $buildConfiguration --output $outputBmdc -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:PackageVersion=$Version $projectBmdc
      env:
        NUGET_AUTH_TOKEN: "${secrets.GITHUB_TOKEN}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Display package output Ꙫ
      run: ls $outputBmdc
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Upload Package 🚀
      run: dotnet nuget push $outputBmdc/*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Display GITHUB_REF Ꙫ
      run: echo "${GITHUB_REF/refs\/heads\//}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Display tag name Ꙫ
      run: echo "${GITHUB_REF/refs\/heads\//}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Display release name Ꙫ
      run: echo "Release $Version"
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${GITHUB_REF/refs\/heads\//}
        release_name: Release $Version
        draft: false
        prerelease: false


############################################################################################################
#Build & Deploy BlazorMdcWebsite (1 job)
#At the moment this has to be a separate job because of the different dnc environments (3.1 & 5.0 preview)
############################################################################################################
  buildblazormdcwebsite:

    runs-on: ubuntu-latest

    steps:

    - name: Show Tag name Ꙫ
      run: echo "GitHub indicates that this is a tag creation with ${GITHUB_REF/refs\/tags\//}"
      if: (github.repository == 'BlazorMdc/BlazorMdc')


    - name: Checkout repository under $GITHUB_WORKSPACE so the job can access it 🛎️
      uses: actions/checkout@v2
      if: (github.repository == 'BlazorMdc/BlazorMdc')


    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-preview.7.20366.6
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Build 🔧
      run: dotnet build --configuration $buildConfiguration $projectWeb
      if: (github.repository == 'BlazorMdc/BlazorMdc')

    - name: Publish 🔧
      run: dotnet publish --no-build --configuration $buildConfiguration --output $outputWeb $projectWeb
      if: (github.repository == 'BlazorMdc/BlazorMdc')

# deploy to the BmdcWebsite (We deployed to the forked websites in the CI build process)

    - name: Deploy BlazorMdcWebsite 🚀
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        ACCESS_TOKEN: ${{secrets.GH_PAT}}
        BRANCH: gh-pages
        FOLDER: "siteweb/wwwroot"
        REPOSITORY_NAME: 'BlazorMdc/BlazorMdcWebsite'
      if: (github.repository == 'BlazorMdc/BlazorMdc')
